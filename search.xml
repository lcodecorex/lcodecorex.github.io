<?xml version="1.0" encoding="utf-8"?>
<search>
  
  
    
    <entry>
      <title><![CDATA[Android应用插件化原理与实现（待续）]]></title>
      <url>http://yoursite.com/2016/08/20/Android%E6%8F%92%E4%BB%B6%E5%8C%96/</url>
      <content type="html"><![CDATA[<p>插件化通常出于模块解耦、动态升级、65535方法数限制、并行开发、节省升级流量等方面的考虑，用户也可以定制的选择需要的模块。插件化指将一个程序划分为不同的部分，如app的主题样式，组件化指提取通用及复用性比较高的构建。目前开源的插件化框架有<a href="https://github.com/singwhatiwanna/dynamic-load-apk" target="_blank" rel="external">DynamicLoadApk</a>(很好的解决了资源访问和activity生命周期管理的问题)、<a href="https://github.com/mmin18/AndroidDynamicLoader" target="_blank" rel="external">AndroidDynamicLoader</a>(使用scheme，像浏览网页一样调用插件)、<a href="https://github.com/Qihoo360/DroidPlugin" target="_blank" rel="external">360 DroidPlugin</a>。插件化的实现，还得从ClassLoader说起。</p>
<hr>
<h2 id="PathClassLoader和DexClassLoader"><a href="#PathClassLoader和DexClassLoader" class="headerlink" title="PathClassLoader和DexClassLoader"></a>PathClassLoader和DexClassLoader</h2><p>在Android中ClassLoader是一个抽象类，在AS中通过<code>ctrl + h</code>可以看到类层级关系，PathClassLoader和DexClassLoader都继承自BaseDexClassLoader，它们的区别是：</p>
<ul>
<li>DexClassLoader可以加载jar/apk/dex，可以从SD卡中加载未安装的apk</li>
<li>PathClassLoader只能加载系统中已经安装过的apk</li>
<li>BootClassLoader 加载系统类库</li>
</ul>
<p>实际上两者的实现差别不大，DexClassLoader可以指定dex路径，加载外部存储中的dex，实际上是把dex复制到内部存储中了。DexClassLoader的构造函数中有4个参数：</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">public</span> <span class="title">DexClassLoader</span><span class="params">(String dexPath, String optimizedDirectory, String libraryPath, ClassLoader parent)</span></span></div><div class="line"></div><div class="line">dexPath: 需要装载的apk/jar/dex文件的路径</div><div class="line">optimizedDirectory: 优化后的dex文件存放目录，不能为<span class="keyword">null</span></div><div class="line">libraryPath: 目标类中使用的C/C++库的列表,每个目录用File.pathSeparator间隔开; 可以为 <span class="keyword">null</span></div><div class="line">parent: 该类装载器的父装载器，一般用当前执行类的装载器</div></pre></td></tr></table></figure>
<h3 id="双亲委托机制"><a href="#双亲委托机制" class="headerlink" title="双亲委托机制"></a>双亲委托机制</h3><p>为了更好的保证 JAVA 平台的安全，当一个装载器被请求加载某个类时，先委托自己的 parent 去装载，如果 parent 能装载，则返回这个类对应的 Class 对象，否则，递归委托给父类的父类装载。当所有父类装载器都装载失败时，才由当前装载器装载。因此用户自定义的类装载器，不可能装载应该由父亲装载的可靠类，从而防止不可靠甚至恶意的代码代替本应该由父亲装载器装载的可靠代码。</p>
<p>Android中的委派机制是DexClassLoader-&gt;PathClassLoader-&gt;BootClassLoader。</p>
<h2 id="DexClassLoader的使用过程"><a href="#DexClassLoader的使用过程" class="headerlink" title="DexClassLoader的使用过程"></a>DexClassLoader的使用过程</h2><ul>
<li>通过PacageMangager获得指定的apk的安装的目录，dex的解压缩目录，c/c++库的目录</li>
<li>创建一个 DexClassLoader实例</li>
<li>加载指定的类返回一个Class</li>
<li>然后使用反射调用这个Class</li>
</ul>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">useDexClassLoader</span><span class="params">()</span></span>&#123;  </div><div class="line">    <span class="comment">//创建一个意图，用来找到指定的apk  </span></div><div class="line">    Intent intent = <span class="keyword">new</span> Intent(<span class="string">"com.suchangli.android.plugin"</span>, <span class="keyword">null</span>);  </div><div class="line">    <span class="comment">//获得包管理器  </span></div><div class="line">    PackageManager pm = getPackageManager();  </div><div class="line">    List&lt;ResolveInfo&gt; resolveinfoes =  pm.queryIntentActivities(intent, <span class="number">0</span>);  </div><div class="line">    <span class="comment">//获得指定的activity的信息  </span></div><div class="line">    ActivityInfo actInfo = resolveinfoes.get(<span class="number">0</span>).activityInfo;  </div><div class="line"></div><div class="line">    <span class="comment">//获得包名  </span></div><div class="line">    String pacageName = actInfo.packageName;  </div><div class="line">    <span class="comment">//获得apk的目录或者jar的目录  </span></div><div class="line">    String apkPath = actInfo.applicationInfo.sourceDir;  </div><div class="line">    <span class="comment">//dex解压后的目录,注意，这个用宿主程序的目录，android中只允许程序读取写自己  </span></div><div class="line">    <span class="comment">//目录下的文件  </span></div><div class="line">    String dexOutputDir = getApplicationInfo().dataDir;  </div><div class="line"></div><div class="line">    <span class="comment">//native代码的目录  </span></div><div class="line">    String libPath = actInfo.applicationInfo.nativeLibraryDir;  </div><div class="line">    <span class="comment">//创建类加载器，把dex加载到虚拟机中  </span></div><div class="line">    DexClassLoader calssLoader = <span class="keyword">new</span> DexClassLoader(apkPath, dexOutputDir, libPath,  </div><div class="line">            <span class="keyword">this</span>.getClass().getClassLoader());  </div><div class="line"></div><div class="line">    <span class="comment">//利用反射调用插件包内的类的方法  </span></div><div class="line"></div><div class="line">        Class&lt;?&gt; clazz = calssLoader.loadClass(pacageName+<span class="string">".Plugin1"</span>);  </div><div class="line"></div><div class="line">        Object obj = clazz.newInstance();  </div><div class="line">        Class[] param = <span class="keyword">new</span> Class[<span class="number">2</span>];  </div><div class="line">        param[<span class="number">0</span>] = Integer.TYPE;  </div><div class="line">        param[<span class="number">1</span>] = Integer.TYPE;  </div><div class="line"></div><div class="line">        Method method = clazz.getMethod(<span class="string">"function1"</span>, param);  </div><div class="line"></div><div class="line">        Integer ret = (Integer)method.invoke(obj, <span class="number">1</span>,<span class="number">12</span>);  </div><div class="line">   &#125;</div></pre></td></tr></table></figure>
<h2 id="插件化的坑"><a href="#插件化的坑" class="headerlink" title="插件化的坑"></a>插件化的坑</h2><p>Android程序和标准的Java程序最大的区别就在于他们的上下文环境（Context）不同，各种Android动态加载框架核心要解决的东西也正是“如何给外部的新类提供上下文环境”的问题。</p>
<ol>
<li>同一个Class = 相同的 ClassName + PackageName + ClassLoader，自定义的ClassLoader其它ClassLoader就算加载的是同一个类文件，也会抛出ClassCastException</li>
<li>Android中许多组件类（如Activity、Service等）是需要在Manifest文件里面注册后才能工作的（系统会检查该组件有没有注册），所以即使动态加载了一个新的组件类进来，没有注册的话还是无法工作</li>
<li>res资源是Android开发中经常用到的，而Android是把这些资源用对应的R.id注册好，运行时通过这些ID从Resource实例中获取对应的资源。如果是运行时动态加载进来的新类，那类里面用到R.id的地方将会抛出找不到资源或者用错资源的异常，因为新类的资源ID根本和现有的Resource实例中保存的资源ID对不上</li>
</ol>
<hr>
<h2 id="架构"><a href="#架构" class="headerlink" title="架构"></a>架构</h2><h3 id="1-使用接口Interface"><a href="#1-使用接口Interface" class="headerlink" title="1. 使用接口Interface"></a>1. 使用接口Interface</h3><p>Host宿主和插件Plugin需要定义完全相同的接口类(包名也需一致，ClassLoader也需要保持一致)，插件apk的入口需要实现这个接口。</p>
<p>由于插件接口存在于两个不同的dex文件中，插件接口被同一个加载器装载了两次，每个dex文件有一个类型id，检测到不一致所以报错。需要保证插件接口只被装载一次：<br>可以把插件接口提取出来打包成plugin.jar，在宿主apk中：</p>
<figure class="highlight gams"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">compile <span class="keyword">files</span>(<span class="string">'libs/plugin.jar'</span>)</div></pre></td></tr></table></figure>
<p>在插件apk中：</p>
<figure class="highlight gams"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">provided <span class="keyword">files</span>(<span class="string">'libs/plugin.jar'</span>)</div></pre></td></tr></table></figure>
<h3 id="2-获取插件中资源文件（TODO）"><a href="#2-获取插件中资源文件（TODO）" class="headerlink" title="2. 获取插件中资源文件（TODO）"></a>2. 获取插件中资源文件（TODO）</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">getResIdFromPlugin</span><span class="params">(Plugin plugin,String resName,String defType)</span></span>&#123;</div><div class="line">        <span class="keyword">try</span> &#123;</div><div class="line">            Resources res = context.getPackageManager().getResourcesForApplication(plugin.packageName);</div><div class="line">            <span class="keyword">return</span> res.getIdentifier(resName,defType,plugin.packageName);</div><div class="line">        &#125; <span class="keyword">catch</span> (PackageManager.NameNotFoundException e) &#123;</div><div class="line">            e.printStackTrace();</div><div class="line">        &#125;</div><div class="line">        <span class="keyword">return</span> <span class="number">0</span>;</div><div class="line">    &#125;</div></pre></td></tr></table></figure>
<h3 id="完整代码-待续"><a href="#完整代码-待续" class="headerlink" title="完整代码(待续)"></a>完整代码(待续)</h3><p>PluginManager：</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">PluginManager</span> </span>&#123;</div><div class="line">    <span class="keyword">private</span> List&lt;Plugin&gt; mPlugins = <span class="keyword">null</span>;</div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">addPlugin</span><span class="params">(Plugin plugin)</span></span>&#123;</div><div class="line">        <span class="keyword">if</span> (mPlugins==<span class="keyword">null</span>) mPlugins = <span class="keyword">new</span> ArrayList&lt;&gt;();</div><div class="line">        mPlugins.add(plugin);</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    DexClassLoader classLoader;  <span class="comment">//TODO</span></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">activatePlugin</span><span class="params">(Plugin plugin)</span></span>&#123;</div><div class="line">        <span class="keyword">if</span> (plugin==<span class="keyword">null</span>) <span class="keyword">return</span>;</div><div class="line">        <span class="keyword">try</span> &#123;</div><div class="line">            Class&lt;?&gt; clazz = classLoader.loadClass(plugin.packageName+<span class="string">"."</span>+plugin.enterClassName);</div><div class="line">            IPlugin obj = (IPlugin) clazz.newInstance();</div><div class="line">            obj.init();</div><div class="line">        &#125; <span class="keyword">catch</span> (ClassNotFoundException e) &#123;</div><div class="line">            e.printStackTrace();</div><div class="line">        &#125; <span class="keyword">catch</span> (IllegalAccessException e) &#123;</div><div class="line">            e.printStackTrace();</div><div class="line">        &#125; <span class="keyword">catch</span> (InstantiationException e) &#123;</div><div class="line">            e.printStackTrace();</div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">activatePlugin</span><span class="params">(Plugin plugin, Uri uri)</span></span>&#123;</div><div class="line">        <span class="keyword">if</span> (plugin==<span class="keyword">null</span>) <span class="keyword">return</span>;</div><div class="line">        <span class="keyword">try</span> &#123;</div><div class="line">            Class&lt;?&gt; clazz = classLoader.loadClass(plugin.packageName+<span class="string">"."</span>+plugin.enterClassName);</div><div class="line">            IPlugin obj = (IPlugin) clazz.newInstance();</div><div class="line">            obj.init(uri);</div><div class="line">        &#125; <span class="keyword">catch</span> (ClassNotFoundException e) &#123;</div><div class="line">            e.printStackTrace();</div><div class="line">        &#125; <span class="keyword">catch</span> (IllegalAccessException e) &#123;</div><div class="line">            e.printStackTrace();</div><div class="line">        &#125; <span class="keyword">catch</span> (InstantiationException e) &#123;</div><div class="line">            e.printStackTrace();</div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">getDrawableFromPlugin</span><span class="params">()</span></span>&#123;&#125;</div></pre></td></tr></table></figure>
<p>IPlugin：</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">IPlugin</span> </span>&#123;</div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">void</span> <span class="title">init</span><span class="params">()</span></span>;</div><div class="line"></div><div class="line">    <span class="comment">//由于参数数据类型可能不同,使用uri便于传参</span></div><div class="line">    <span class="function"><span class="keyword">void</span> <span class="title">init</span><span class="params">(Uri uri)</span></span>;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>Plugin：</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Plugin</span> </span>&#123;</div><div class="line">    <span class="keyword">public</span> <span class="keyword">int</span> id;</div><div class="line">    <span class="keyword">public</span> <span class="keyword">int</span> desc; <span class="comment">//描述</span></div><div class="line">    <span class="keyword">public</span> String packageName; <span class="comment">//包名</span></div><div class="line">    <span class="keyword">public</span> String enterClassName; <span class="comment">//入口类名</span></div><div class="line">    <span class="keyword">public</span> String url; <span class="comment">//dex/jar/apk获取的地址</span></div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h2 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h2><ul>
<li><a href="http://www.trinea.cn/android/android-plugin/" target="_blank" rel="external">Android 插件化 动态升级</a></li>
<li><a href="http://blog.csdn.net/com360/article/details/14125683" target="_blank" rel="external">Android中的类装载器DexClassLoader</a></li>
<li><a href="http://sanwen8.cn/p/147zusQ.html" target="_blank" rel="external">Android动态加载基础 ClassLoader工作机制</a></li>
<li><a href="http://blog.csdn.net/maplejaw_/article/details/51493843" target="_blank" rel="external">Android插件化探索（一）类加载器DexClassLoader</a></li>
</ul>
]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[Android热补丁动态修复技术Hotfix]]></title>
      <url>http://yoursite.com/2016/08/20/Android%E7%83%AD%E8%A1%A5%E4%B8%81%E5%8A%A8%E6%80%81%E4%BF%AE%E5%A4%8DHotFix/</url>
      <content type="html"><![CDATA[<p><a href="https://zhuanlan.zhihu.com/p/20308548" target="_blank" rel="external">HotFix</a>指可以以打补丁的方式动态修复紧急bug，而不用重新发布新版本的技术。继插件化之后，HotFix在2015年爆发，淘宝有Dexposed(需要使用xposed框架)、支付宝有AndFix(方法替换)、QQ空间有热补丁方案(从classloader加载dex的考虑)以及微信也有DexDiff(差分热补丁)，Android Studio 2.0的Instant Run其实也是热补丁方案的体现。它让应用无需重新安装就可以完成更新、修复bug。</p>
<hr>
<h2 id="QQ空间采用的方案"><a href="#QQ空间采用的方案" class="headerlink" title="QQ空间采用的方案"></a>QQ空间采用的方案</h2><p>QQ空间给出的方案是基于dex分包，就是将多个dex塞到app的classloader中，但对于热补丁来说，两个dex中必然会存在有重复的类，classloader会选择加载哪一个类是一个问题。</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">public</span> Class <span class="title">findClass</span><span class="params">(String name,List&lt;Throwable&gt; suppressed)</span></span>&#123;</div><div class="line">    <span class="keyword">for</span>(Element element:dexElements)&#123;</div><div class="line">        DexFile dex = element.dexFile;</div><div class="line">        <span class="keyword">if</span>(dex !!= <span class="keyword">null</span>)&#123;</div><div class="line">            Class clazz = dex.loadClassBinaryName(name,definingContext,suppressed);</div><div class="line">            <span class="keyword">if</span>(clazz != <span class="keyword">null</span>) <span class="keyword">return</span> clazz;</div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>classloader会依次遍历所有的dex，直到找到第一个有对应class的dex，然后返回class,遍历完成都没找到则会返回null。</p>
<p>上面的findClass()方法（在DexClassLaoder中实现），其中有<code>Class clazz = dex.loadClassBinaryName(name, definingContext)</code>，定位到其实现：</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">public</span> <span class="keyword">final</span> <span class="class"><span class="keyword">class</span> <span class="title">DexFile</span> </span>&#123;</div><div class="line"></div><div class="line">     <span class="function"><span class="keyword">public</span> Class <span class="title">loadClassBinaryName</span><span class="params">(String name, ClassLoader loader)</span></span>&#123;</div><div class="line">         <span class="keyword">return</span> defineClass(name, loader, mCookie);</div><div class="line">     &#125;</div><div class="line"></div><div class="line">     <span class="function"><span class="keyword">private</span> <span class="keyword">native</span> <span class="keyword">static</span> Class <span class="title">defineClass</span><span class="params">(String name, ClassLoader loader, <span class="keyword">int</span> cookie)</span></span>;</div><div class="line">&#125;</div><div class="line">```  </div><div class="line"></div><div class="line">可见获取Class是调用<span class="keyword">native</span>方法来实现的。</div><div class="line"></div><div class="line">所以办法就有了。是不是可以**<span class="number">1</span>.把dex插入到dexElements的最前面**，这是其一。另外，被引用的<span class="class"><span class="keyword">class</span>不在同一类里面也会出现问题，原因就是<span class="title">classloader</span>底层还有一个校验引用者和被引用者的<span class="title">dex</span>是否相同的过程，而引用者打上了<span class="title">CLASS_ISPREVERIFIED</span>标志就会进行校验，所以需要**2.阻止引用者被打上<span class="title">CLASS_ISPREVERIFIED</span>标志**。</span></div><div class="line"></div><div class="line">最终方案是往所有类的构造函数中插入了：</div><div class="line"></div><div class="line">```<span class="title">java</span></div><div class="line"><span class="title">if</span> (<span class="title">ClassVerifier</span>.<span class="title">PREVENT_VERIFY</span>) &#123;</div><div class="line">    System.out.println(AntilazyLoad.class);</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>AntilazyLoad类会被打包成单独的hack.dex，这样当安装apk的时候，classes.dex内的类都会引用一个在不相同dex中的AntilazyLoad类,在应用启动的时候加载进来,AntilazyLoad类所在的dex包必须被先加载进来,不然AntilazyLoad类会被标记为不存在。</p>
<h3 id="女娲开源项目"><a href="#女娲开源项目" class="headerlink" title="女娲开源项目"></a>女娲开源项目</h3><p>目前已有相应的开源项目<a href="https://github.com/jasonross/Nuwa" target="_blank" rel="external">Nuwa</a>。</p>
<h5 id="1-在工程目录下build-gradle添加classpath-39-cn-jiajixin-nuwa-gradle-1-2-2-39"><a href="#1-在工程目录下build-gradle添加classpath-39-cn-jiajixin-nuwa-gradle-1-2-2-39" class="headerlink" title="1. 在工程目录下build.gradle添加classpath &#39;cn.jiajixin.nuwa:gradle:1.2.2&#39;:"></a>1. 在工程目录下build.gradle添加<code>classpath &#39;cn.jiajixin.nuwa:gradle:1.2.2&#39;</code>:</h5><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div></pre></td><td class="code"><pre><div class="line">buildscript &#123;</div><div class="line">    repositories &#123;</div><div class="line">        jcenter()</div><div class="line">    &#125;</div><div class="line">    dependencies &#123;</div><div class="line">        classpath <span class="string">'com.android.tools.build:gradle:1.2.3'</span></div><div class="line">        classpath <span class="string">'cn.jiajixin.nuwa:gradle:1.2.2'</span></div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h5 id="2-添加apply-plugin-quot-cn-jiajixin-nuwa-quot-到app下面的build-gradle文件，并添加依赖："><a href="#2-添加apply-plugin-quot-cn-jiajixin-nuwa-quot-到app下面的build-gradle文件，并添加依赖：" class="headerlink" title="2. 添加apply plugin: &quot;cn.jiajixin.nuwa&quot;到app下面的build.gradle文件，并添加依赖："></a>2. 添加<code>apply plugin: &quot;cn.jiajixin.nuwa&quot;</code>到app下面的build.gradle文件，并添加依赖：</h5><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">dependencies &#123;</div><div class="line">    compile <span class="string">'cn.jiajixin.nuwa:nuwa:1.0.0'</span></div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h6 id="3-在Application的onCreate-方法中调用Nuwa-init-this-然后就可以在需要的时候加载补丁了"><a href="#3-在Application的onCreate-方法中调用Nuwa-init-this-然后就可以在需要的时候加载补丁了" class="headerlink" title="3. 在Application的onCreate()方法中调用Nuwa.init(this),然后就可以在需要的时候加载补丁了"></a>3. 在Application的onCreate()方法中调用<code>Nuwa.init(this)</code>,然后就可以在需要的时候加载补丁了</h6><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">Nuwa.loadPatch(<span class="keyword">this</span>,patchFile);</div></pre></td></tr></table></figure>
<p>执行编译，最终会在app/build/outputs/nuwa/debug/目录下生成patch.jar文件。</p>
<p>但是项目已经9个月没有更新了，据说也有一些坑。</p>
<h3 id="RocooFix"><a href="#RocooFix" class="headerlink" title="RocooFix"></a>RocooFix</h3><p>查看<a href="https://github.com/dodola/RocooFix" target="_blank" rel="external">项目</a>，作者在使用Nuwa发现一些坑之后，决定在Nuwa的基础上做修改，修复了一些bug，支持不同的gradle版本，且支持dvm和art虚拟机。同样也是生成patch.jar,具体操作在作者wiki上有详细说明。</p>
<hr>
<h2 id="AndFix"><a href="#AndFix" class="headerlink" title="AndFix"></a>AndFix</h2><p>AndFix原理就是：在Native层使用指针替换的方式替换bug方法，以达到修复bug的目的。</p>
<p>查看<code>patchManager.loadPatch()</code>方法：</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">loadPatch</span><span class="params">()</span> </span>&#123;   </div><div class="line">    mLoaders.put(<span class="string">"*"</span>, mContext.getClassLoader());</div><div class="line">    Set&lt;String&gt; patchNames;   </div><div class="line">    List&lt;String&gt; classes;   </div><div class="line">    <span class="keyword">for</span> (Patch patch : mPatchs) &#123;      </div><div class="line">        patchNames = patch.getPatchNames();      </div><div class="line">        <span class="keyword">for</span> (String patchName : patchNames) &#123;        </div><div class="line">            <span class="comment">//获取补丁内Class的集合</span></div><div class="line">            classes = patch.getClasses(patchName);   </div><div class="line">            <span class="comment">//重点方法：修复的方法      </span></div><div class="line">            mAndFixManager.fix(patch.getFile(), mContext.getClassLoader(),               classes);      </div><div class="line">        &#125;   </div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>接着查看<code>mAndFixManager.fix(patch.getFile())</code>方法：</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">fixClass</span><span class="params">(Class&lt;?&gt; clazz, ClassLoader classLoader)</span> </span>&#123;</div><div class="line">    <span class="comment">// 反射找到clazz中的所有方法</span></div><div class="line">    Method[] methods = clazz.getDeclaredMethods();   </div><div class="line">    <span class="comment">//注解</span></div><div class="line">    MethodReplace methodReplace;   </div><div class="line">    String clz;   </div><div class="line">    String meth;   </div><div class="line">    <span class="keyword">for</span> (Method method : methods) &#123;    </div><div class="line">        <span class="comment">//遍历所有方法，找到有MethodReplace注解的方法，即需要替换的方法  </span></div><div class="line">        methodReplace = method.getAnnotation(MethodReplace.class);      </div><div class="line">        <span class="keyword">if</span> (methodReplace == <span class="keyword">null</span>)         </div><div class="line">            <span class="keyword">continue</span>;      </div><div class="line">        clz = methodReplace.clazz();      </div><div class="line">        meth = methodReplace.method();    </div><div class="line">        <span class="comment">//找到需要替换的方法后调用replaceMethod替换方法  </span></div><div class="line">        <span class="keyword">if</span> (!isEmpty(clz) &amp;&amp; !isEmpty(meth)) &#123;               </div><div class="line">            replaceMethod(classLoader, clz, meth, method);      </div><div class="line">        &#125;   </div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>通过反射的方式找到新方法和旧方法，最后使用native方法进行方法的替换。</p>
<p>AndFix实现了方法的替换，从根本上解决了问题，但也频繁的使用了反射，不免对效率和性能也有着一定的影响。</p>
<hr>
<h2 id="微信热补丁方案"><a href="#微信热补丁方案" class="headerlink" title="微信热补丁方案"></a>微信热补丁方案</h2><p>微信的方法比较简洁，和增量更新比较类似，通过新旧两个dex来生成差分包patch.dex，还自研了粒度是class级别的DexDiff算法，通过一个后台进程来进行打补丁操作。<br><img src="http://mmbiz.qpic.cn/mmbiz/csvJ6rH9Mct2S79NW7Qy83cyABDn0BN825x4bbEZmfhbiavSI2VibLabiaPMSnktQDcA5OEqgnZPPPUX6gl5mIQ1g/640?wx_fmt=png&amp;wxfrom=5&amp;wx_lazy=1" alt=""></p>
<hr>
<h2 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h2><ul>
<li><a href="http://www.jianshu.com/p/6f0ae1e364d9" target="_blank" rel="external">HotFix原理介绍及使用总结</a></li>
<li><a href="http://mp.weixin.qq.com/s?__biz=MzAwNDY1ODY2OQ==&amp;mid=2649286306&amp;idx=1&amp;sn=d6b2865e033a99de60b2d4314c6e0a25&amp;scene=0#wechat_redirect" target="_blank" rel="external">微信Android热补丁实践演进之路</a></li>
</ul>
]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[Adapter学习与优化]]></title>
      <url>http://yoursite.com/2016/08/18/adapter%E6%B7%B1%E5%85%A5%E7%90%86%E8%A7%A3%E5%AD%A6%E4%B9%A0/</url>
      <content type="html"><![CDATA[<p>针对包含多个元素的View，如ListView，GridView，ExpandableListview，的时候我们是给其设置一个Adapter。Adapter是父View给子View提供数据的桥梁，也是提供每个Item的视图桥梁。由于View滚动的时候涉及到资源和View的回收过程，这其中也有一些坑，处理不当容易造成OOM，这里列举了一些优化的办法。</p>
<h2 id="设计模式"><a href="#设计模式" class="headerlink" title="设计模式"></a>设计模式</h2><h3 id="1-桥接模式"><a href="#1-桥接模式" class="headerlink" title="1.桥接模式"></a>1.桥接模式</h3><p>Adapter使用了桥接模式(Bridge Mode),将抽象部分与实现部分分离，使它们都可以独立的变化，即具有无数个子View的ViewGroup(ListView,GridView)以及各种Adapter(CursorAdapter,ArrayAdapter)都可独立的变化。Adapter是与View之间提供数据的桥梁，也是提供每个Item的视图桥梁。<br><img src="http://img.blog.csdn.net/20150322120809221" alt=""></p>
<h3 id="2-适配器模式"><a href="#2-适配器模式" class="headerlink" title="2.适配器模式"></a>2.适配器模式</h3><p>适配器模式可以让两个没有任何关系的类在一起运行,我们访问的Target目标角色，但是具体的实现都委托给了源角色，而这些对高层次模块是透明的，也是它不需要关心的。<br><img src="http://images.cnitblog.com/blog/338535/201301/06213728-5c707fef721e4012b6e2ad40ebf1de8e.png" alt=""></p>
<hr>
<h2 id="AbsListView内部的RecycleBin"><a href="#AbsListView内部的RecycleBin" class="headerlink" title="AbsListView内部的RecycleBin"></a>AbsListView内部的RecycleBin</h2><ul>
<li>fillActiveViews()   调用这个方法后就会根据传入的参数来将ListView中的指定元素存储到mActiveViews数组当中。</li>
<li>getActiveView()  获取ListView某一position处的View(获取之后即从mActiveViews中移除)</li>
<li>addScrapView()  当有某个View确定要废弃掉的时候(比如滚动出了屏幕)缓存这个View<br>RecycleBin中有一个ArrayList<view>来存储废弃的View，convertView被移出屏幕后进入到了废弃缓存中，item再次滑动到屏幕上时拿过来复用即可。<br>可查看<a href="http://blog.csdn.net/guolin_blog/article/details/44996879" target="_blank" rel="external">ListView工作原理完全解析</a>。</view></li>
</ul>
<h3 id="1-避免重复inflate-view造成资源浪费"><a href="#1-避免重复inflate-view造成资源浪费" class="headerlink" title="1.避免重复inflate view造成资源浪费"></a>1.避免重复inflate view造成资源浪费</h3><p>ListView等内部有Recycler的实现，无论数据中是多少个item，在显示上Recycler只存储其中可见的View在内存中。当向下滑动时，顶部不可见Item直接回移动到下方再次填充数据变为新增项，不用再inflate产生新的对象。<br><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">public</span> View <span class="title">getView</span><span class="params">(<span class="keyword">int</span> position, View convertView, ViewGroupparent)</span></span>&#123;   </div><div class="line">     <span class="keyword">if</span> (convertView ==<span class="keyword">null</span>) &#123;   </div><div class="line">           convertView =LayoutInflater.from(mContext).inflate(R.layout.item_view, <span class="keyword">null</span>);   </div><div class="line">     &#125;   </div><div class="line">    <span class="comment">//do something</span></div><div class="line">    <span class="keyword">return</span> converView;   </div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<h3 id="2-使用一个静态类-ViewHolder-保存子View和xml的引用关系，避免多余的findViewById"><a href="#2-使用一个静态类-ViewHolder-保存子View和xml的引用关系，避免多余的findViewById" class="headerlink" title="2.使用一个静态类(ViewHolder)保存子View和xml的引用关系，避免多余的findViewById"></a>2.使用一个静态类(ViewHolder)保存子View和xml的引用关系，避免多余的findViewById</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">static</span> <span class="class"><span class="keyword">class</span> <span class="title">ViewHolder</span> </span>&#123;    </div><div class="line">    TextView tv;    </div><div class="line">    ImageView iv;    </div><div class="line">&#125;    </div><div class="line"></div><div class="line"><span class="function"><span class="keyword">public</span> View <span class="title">getView</span><span class="params">(<span class="keyword">int</span> position, View convertView, ViewGroup parent)</span> </span>&#123;   </div><div class="line">    ViewHolder holder;   </div><div class="line">    <span class="keyword">if</span> (convertView == <span class="keyword">null</span>) &#123;   </div><div class="line">        convertView = mInflater.inflate(R.layout.item_view, <span class="keyword">null</span>);   </div><div class="line">        holder = <span class="keyword">new</span> ViewHolder();   </div><div class="line">        holder.tv = (TextView) convertView.findViewById(R.id.text);   </div><div class="line">        holder.iv = (ImageView) convertView.findViewById(R.id.icon);   </div><div class="line">        convertView.setTag(holder);   </div><div class="line">    &#125; <span class="keyword">else</span> &#123;   </div><div class="line">        holder = (ViewHolder) convertView.getTag();   </div><div class="line">    &#125;   </div><div class="line">    holder.tv.setText(DATA[pos].title);   </div><div class="line">    holder.iv.setImageBitmap(DATA[pos].bitmap);   </div><div class="line">    <span class="keyword">return</span> convertView;   </div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h3 id="3-图片加载优化"><a href="#3-图片加载优化" class="headerlink" title="3.图片加载优化"></a>3.图片加载优化</h3><ul>
<li>使用线程池进行图片请求并使用LRUCache做图片缓存处理</li>
<li>图片根据边界，option进行缩放处理</li>
<li>滑动时暂停请求</li>
</ul>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div></pre></td><td class="code"><pre><div class="line">listView.setOnScrollListener(<span class="keyword">new</span> OnScrollListener() &#123;  </div><div class="line">        <span class="meta">@Override</span>  </div><div class="line">        <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">onScrollStateChanged</span><span class="params">(AbsListView view, <span class="keyword">int</span> scrollState)</span> </span>&#123;  </div><div class="line"></div><div class="line">            <span class="keyword">if</span> (scrollState == OnScrollListener.SCROLL_STATE_IDLE) &#123;<span class="comment">//list停止滚动时加载图片  </span></div><div class="line">                loadImage(startPos, endPos);<span class="comment">// 异步加载图片   ,只加载可以看到的图片  </span></div><div class="line">            &#125;  </div><div class="line">        &#125;  </div><div class="line">        <span class="meta">@Override</span>  </div><div class="line">        <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">onScroll</span><span class="params">(AbsListView view, <span class="keyword">int</span> firstVisibleItem,  </span></span></div><div class="line">                <span class="keyword">int</span> visibleItemCount, <span class="keyword">int</span> totalItemCount) &#123;  </div><div class="line">            <span class="comment">//设置当前屏幕显示的起始pos和结束pos</span></div><div class="line">        	startPos = firstVisibleItem;  </div><div class="line">        	endPos = firstVisibleItem + visibleItemCount;  </div><div class="line">            <span class="keyword">if</span> (endPos &gt;= totalItemCount) &#123;  </div><div class="line">            	endPos = totalItemCount - <span class="number">1</span>;  </div><div class="line">            &#125;  </div><div class="line">        &#125;  </div><div class="line">    &#125;);</div></pre></td></tr></table></figure>
<h3 id="4-设置点击事件"><a href="#4-设置点击事件" class="headerlink" title="4.设置点击事件"></a>4.设置点击事件</h3><p>设置点击事件的通常写法是在getView方法中一个个设置，每次调用getView时都设置了一个新的onClick事件，可以直接在ViewHolder中设置一个position，然后实现OnClickListenr接口<br><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div></pre></td><td class="code"><pre><div class="line"><span class="class"><span class="keyword">class</span>  <span class="title">ViewHolder</span> <span class="keyword">implements</span> <span class="title">OnClickListener</span></span>&#123;</div><div class="line">    <span class="keyword">int</span> position;</div><div class="line">    TextView name;</div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setPosition</span><span class="params">(<span class="keyword">int</span> position)</span></span>&#123;</div><div class="line">        <span class="keyword">this</span>.position = position;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="meta">@Override</span></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">onClick</span><span class="params">(View v)</span> </span>&#123;</div><div class="line">        <span class="keyword">switch</span> (v.getId())&#123;</div><div class="line">            <span class="comment">//do something</span></div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">public</span> View <span class="title">getView</span><span class="params">(<span class="keyword">int</span> position, View convertView, ViewGroup parent)</span> </span>&#123;</div><div class="line">    ViewHolder holder = <span class="keyword">null</span>;</div><div class="line">    <span class="keyword">if</span>(convertView==<span class="keyword">null</span>)&#123;</div><div class="line">        convertView = inflater.inflate(R.layout.list_item, parent, <span class="keyword">false</span>);</div><div class="line">        holder = <span class="keyword">new</span> ViewHolder();</div><div class="line">        holder.name = (TextView) convertView.findViewById(R.id.name);</div><div class="line">        holder.name.setOnClickListener(<span class="keyword">this</span>);</div><div class="line">        convertView.setTag(holder);</div><div class="line">    &#125;<span class="keyword">else</span>&#123;</div><div class="line">        holder = (ViewHolder) convertView.getTag();</div><div class="line">    &#125;</div><div class="line">    <span class="comment">//设置holder</span></div><div class="line">    holder.name.setText(list.get(position).partname);</div><div class="line">    <span class="comment">//设置position</span></div><div class="line">    holder.setPosition(position);</div><div class="line">    <span class="keyword">return</span> convertView;</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<h3 id="5-getView中减少重复逻辑，避免耗时操作，避免创建大量对象"><a href="#5-getView中减少重复逻辑，避免耗时操作，避免创建大量对象" class="headerlink" title="5.getView中减少重复逻辑，避免耗时操作，避免创建大量对象"></a>5.getView中减少重复逻辑，避免耗时操作，避免创建大量对象</h3><h3 id="6-RecyclerView的优化主要在代码量上"><a href="#6-RecyclerView的优化主要在代码量上" class="headerlink" title="6.RecyclerView的优化主要在代码量上"></a>6.RecyclerView的优化主要在代码量上</h3>]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[Android代码混淆详解]]></title>
      <url>http://yoursite.com/2016/08/18/Android%E4%BB%A3%E7%A0%81%E6%B7%B7%E6%B7%86%E8%AF%A6%E8%A7%A3/</url>
      <content type="html"><![CDATA[<p>Java 是一种跨平台的、解释型语言，Java 源代码编译成中间”字节码”存储于 class 文件中。Java 字节码中包括了很多源代码信息，如变量名、方法名，很容易被反编译成 Java 源代码。所以需要对java代码进行混淆。混淆就是对发布出去的程序进行重新组织和处理，混淆器将代码中的所有变量、函数、类的名称变为简短的英文字母代号，反编译后将难以阅读。</p>
<p>同时混淆的时候会遍历代码以发现没有被调用的代码，从而将其在打包成apk时剔除，最终一定程度上降低了apk的大小，比如编译后 jar 文件体积大约能减少25% 。</p>
<h2 id="基础回顾"><a href="#基础回顾" class="headerlink" title="基础回顾"></a>基础回顾</h2><h4 id="常用通配符"><a href="#常用通配符" class="headerlink" title="常用通配符"></a>常用通配符</h4><ul>
<li><code>[]</code>  表示其中内容可选</li>
<li><code>|</code>   表示区分前后选项</li>
<li><code>&lt;&gt;</code>  <fields>属性、类属性，<methods>方法、类方法，<init>构造方法</init></methods></fields></li>
<li><code>?</code>   表示任意一个字符</li>
<li><code>*</code>   表示任意多个字符（不含分隔符，filename为/，classpath为.），用在{}中表示任意属性和方法</li>
<li><code>**</code>  表示任意多个字符，可含分隔符</li>
<li><code>%</code>   表示java基本数据类型（不含void）,用于filed type, method returntype, method argumenttype</li>
<li><code>***</code> 表示任意类型</li>
</ul>
<h4 id="输入输出选项"><a href="#输入输出选项" class="headerlink" title="输入输出选项"></a>输入输出选项</h4><ul>
<li><code>-include filename</code>  同@filename,读取目录文件中的配置</li>
<li><code>-basedirectory directoryname</code> 指定配置文件的目录</li>
<li><code>libraryjars class_path</code>  指定的jar不会被混淆</li>
<li><code>-skipnonpubliclibraryclasses</code> 不混淆jar包中的非public的class</li>
<li><code>-dontskipnonpubliclibraryclasses</code> 混淆jar包中的非public的class（默认选项）</li>
<li><code>dontskipnonpubliclibraryclassmemebers</code> 混淆非public classes中的成员</li>
<li><code>-keepdirectories [dirrectory_filter]</code></li>
</ul>
<h4 id="Keep-Options-保持不变的选项"><a href="#Keep-Options-保持不变的选项" class="headerlink" title="Keep Options 保持不变的选项"></a>Keep Options 保持不变的选项</h4><ul>
<li><code>-keep [,modifier,...] class_specification</code>  保持class_specification规则；若有[,modifier,…]，则先启用它的规则;保护指定的类文件和类的成员</li>
<li><code>-keepclassmembers [,modifier,...]class_specification</code>  保持类的成员：属性(可以是成员属性、类属性)、方法(可以是成员方法、类方法)</li>
<li><code>-keepclasseswithmembers [,modifier,...] class_specification</code>  与-keep功能基本一致(经测试),保护指定的类和类的成员，但条件是所有指定的类和类成员都要存在</li>
<li><code>-keepnames class_specification</code>  保护指定的类和类的成员的名称（如果他们不会压缩步骤中删除）</li>
<li><code>-keepclassmembernames class_specification</code>  保护指定的类的成员的名称（如果他们不会压缩步骤中删除）</li>
<li><code>-keepclasseswithmembernames class_specification</code>  保护指定的类和类的成员的名称，如果所有指定的类成员出席（在压缩步骤之后）</li>
<li><code>-printseeds [filename]</code>  打印匹配的-keep家族的 类和类成员列表，到标准输出</li>
<li><code>-keepattributes {attribute_name,...}</code> 保护给定的可选属性，例如LocalVariableTable, SourceFile, Deprecated, Synthetic, Signature, and InnerClasses.</li>
</ul>
<h4 id="压缩"><a href="#压缩" class="headerlink" title="压缩"></a>压缩</h4><ul>
<li><code>-dontdhrink</code> 不压缩输入的类文件</li>
<li><code>-printusage {filename}</code></li>
<li><code>-whyareyoukeeping {class_specification}</code></li>
</ul>
<h4 id="优化"><a href="#优化" class="headerlink" title="优化"></a>优化</h4><ul>
<li><code>-dontoptimize</code> 不优化输入的类文件</li>
<li><code>assumenosideeffects {class_specification}</code> 优化时假设指定的方法，没有任何副作用</li>
<li><code>allowaccessmodification</code> 优化时允许访问并修改有修饰符的类和类的成员</li>
</ul>
<h4 id="其它"><a href="#其它" class="headerlink" title="其它"></a>其它</h4><ul>
<li><code>ignorewarnings</code> 屏蔽警告</li>
<li><code>dontwarn</code> 去掉警告</li>
<li><code>-optimizationpasses 5</code> 指定代码的压缩级别  </li>
<li><code>-dontpreverify</code> 混淆时不做预校验  </li>
<li><code>-dontusemixedcaseclassnames</code> 不使用大小写混合</li>
</ul>
<h4 id="注意事项"><a href="#注意事项" class="headerlink" title="注意事项"></a>注意事项</h4><ul>
<li>在AndroidManifest.xml中配置过的activity、application、service、provider、receiver不能进行混淆</li>
<li>一些在xml中配置的view也不能进行混淆</li>
<li>实体类由于涉及到与服务端的交互，各种gson的交互等，需要保留</li>
</ul>
<h2 id="实践-5步搞定混淆"><a href="#实践-5步搞定混淆" class="headerlink" title="实践 - 5步搞定混淆"></a>实践 - 5步搞定混淆</h2><h3 id="1-复制混淆模板"><a href="#1-复制混淆模板" class="headerlink" title="1. 复制混淆模板"></a>1. 复制混淆模板</h3><p>将混淆分为两个个主要部分，定制化区域(包含4个小部分)和基本不用动区域，复制如下代码：</p>
<figure class="highlight haml"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div><div class="line">61</div><div class="line">62</div><div class="line">63</div><div class="line">64</div><div class="line">65</div><div class="line">66</div><div class="line">67</div><div class="line">68</div><div class="line">69</div><div class="line">70</div><div class="line">71</div><div class="line">72</div><div class="line">73</div><div class="line">74</div><div class="line">75</div><div class="line">76</div><div class="line">77</div><div class="line">78</div><div class="line">79</div><div class="line">80</div><div class="line">81</div><div class="line">82</div><div class="line">83</div><div class="line">84</div><div class="line">85</div><div class="line">86</div><div class="line">87</div><div class="line">88</div><div class="line">89</div><div class="line">90</div><div class="line">91</div><div class="line">92</div><div class="line">93</div><div class="line">94</div><div class="line">95</div><div class="line">96</div><div class="line">97</div><div class="line">98</div><div class="line">99</div><div class="line">100</div><div class="line">101</div><div class="line">102</div><div class="line">103</div><div class="line">104</div><div class="line">105</div><div class="line">106</div></pre></td><td class="code"><pre><div class="line">#-------------------------------------------定制化区域----------------------------------------------</div><div class="line">#---------------------------------1.实体类---------------------------------</div><div class="line"></div><div class="line"></div><div class="line"></div><div class="line">#-------------------------------------------------------------------------</div><div class="line"></div><div class="line">#---------------------------------2.第三方包-------------------------------</div><div class="line"></div><div class="line"></div><div class="line"></div><div class="line">#-------------------------------------------------------------------------</div><div class="line"></div><div class="line">#---------------------------------3.与js互相调用的类------------------------</div><div class="line"></div><div class="line"></div><div class="line"></div><div class="line">#-------------------------------------------------------------------------</div><div class="line"></div><div class="line">#---------------------------------4.反射相关的类和方法-----------------------</div><div class="line"></div><div class="line"></div><div class="line"></div><div class="line">#----------------------------------------------------------------------------</div><div class="line">#---------------------------------------------------------------------------------------------------</div><div class="line"></div><div class="line">#-------------------------------------------基本不用动区域--------------------------------------------</div><div class="line">#---------------------------------基本指令区----------------------------------</div><div class="line">-<span class="ruby">optimizationpasses <span class="number">5</span></span></div><div class="line">-<span class="ruby">dontusemixedcaseclassnames</span></div><div class="line">-<span class="ruby">dontskipnonpubliclibraryclasses</span></div><div class="line">-<span class="ruby">dontskipnonpubliclibraryclassmembers</span></div><div class="line">-<span class="ruby">dontpreverify</span></div><div class="line">-<span class="ruby">verbose</span></div><div class="line">-<span class="ruby">printmapping proguardMapping.txt</span></div><div class="line">-<span class="ruby">optimizations !code/simplification/cast,!field/*,!<span class="class"><span class="keyword">class</span>/<span class="title">merging</span>/*</span></span></div><div class="line">-<span class="ruby">keepattributes *Annotation*,InnerClasses</span></div><div class="line">-<span class="ruby">keepattributes Signature</span></div><div class="line">-<span class="ruby">keepattributes SourceFile,LineNumberTable</span></div><div class="line">#----------------------------------------------------------------------------</div><div class="line"></div><div class="line">#---------------------------------默认保留区---------------------------------</div><div class="line">-<span class="ruby">keep public <span class="class"><span class="keyword">class</span> * <span class="title">extends</span> <span class="title">android</span>.<span class="title">app</span>.<span class="title">Activity</span></span></span></div><div class="line">-<span class="ruby">keep public <span class="class"><span class="keyword">class</span> * <span class="title">extends</span> <span class="title">android</span>.<span class="title">app</span>.<span class="title">Application</span></span></span></div><div class="line">-<span class="ruby">keep public <span class="class"><span class="keyword">class</span> * <span class="title">extends</span> <span class="title">android</span>.<span class="title">app</span>.<span class="title">Service</span></span></span></div><div class="line">-<span class="ruby">keep public <span class="class"><span class="keyword">class</span> * <span class="title">extends</span> <span class="title">android</span>.<span class="title">content</span>.<span class="title">BroadcastReceiver</span></span></span></div><div class="line">-<span class="ruby">keep public <span class="class"><span class="keyword">class</span> * <span class="title">extends</span> <span class="title">android</span>.<span class="title">content</span>.<span class="title">ContentProvider</span></span></span></div><div class="line">-<span class="ruby">keep public <span class="class"><span class="keyword">class</span> * <span class="title">extends</span> <span class="title">android</span>.<span class="title">app</span>.<span class="title">backup</span>.<span class="title">BackupAgentHelper</span></span></span></div><div class="line">-<span class="ruby">keep public <span class="class"><span class="keyword">class</span> * <span class="title">extends</span> <span class="title">android</span>.<span class="title">preference</span>.<span class="title">Preference</span></span></span></div><div class="line">-<span class="ruby">keep public <span class="class"><span class="keyword">class</span> * <span class="title">extends</span> <span class="title">android</span>.<span class="title">view</span>.<span class="title">View</span></span></span></div><div class="line">-<span class="ruby">keep public <span class="class"><span class="keyword">class</span> <span class="title">com</span>.<span class="title">android</span>.<span class="title">vending</span>.<span class="title">licensing</span>.<span class="title">ILicensingService</span></span></span></div><div class="line">-<span class="ruby">keep <span class="class"><span class="keyword">class</span> <span class="title">android</span>.<span class="title">support</span>.** &#123;*;</span>&#125;</span></div><div class="line"></div><div class="line">-<span class="ruby">keepclasseswithmembernames <span class="class"><span class="keyword">class</span> * &#123;</span></span></div><div class="line">    native &lt;methods&gt;;</div><div class="line">&#125;</div><div class="line">-<span class="ruby">keepclassmembers <span class="class"><span class="keyword">class</span> * <span class="title">extends</span> <span class="title">android</span>.<span class="title">app</span>.<span class="title">Activity</span>&#123;</span></span></div><div class="line">    public void *(android.view.View);</div><div class="line">&#125;</div><div class="line">-<span class="ruby">keepclassmembers enum * &#123;</span></div><div class="line">    public static **[] values();</div><div class="line">    public static ** valueOf(java.lang.String);</div><div class="line">&#125;</div><div class="line">-<span class="ruby">keep public <span class="class"><span class="keyword">class</span> * <span class="title">extends</span> <span class="title">android</span>.<span class="title">view</span>.<span class="title">View</span>&#123;</span></span></div><div class="line">    *** get*();</div><div class="line">    void set*(***);</div><div class="line">    public &lt;init&gt;(android.content.Context);</div><div class="line">    public &lt;init&gt;(android.content.Context, android.util.AttributeSet);</div><div class="line">    public &lt;init&gt;(android.content.Context, android.util.AttributeSet, int);</div><div class="line">&#125;</div><div class="line">-<span class="ruby">keepclasseswithmembers <span class="class"><span class="keyword">class</span> * &#123;</span></span></div><div class="line">    public &lt;init&gt;(android.content.Context, android.util.AttributeSet);</div><div class="line">    public &lt;init&gt;(android.content.Context, android.util.AttributeSet, int);</div><div class="line">&#125;</div><div class="line">-<span class="ruby">keep <span class="class"><span class="keyword">class</span> * <span class="title">implements</span> <span class="title">android</span>.<span class="title">os</span>.<span class="title">Parcelable</span> &#123;</span></span></div><div class="line">  public static final android.os.Parcelable$Creator *;</div><div class="line">&#125;</div><div class="line">-<span class="ruby">keepclassmembers <span class="class"><span class="keyword">class</span> * <span class="title">implements</span> <span class="title">java</span>.<span class="title">io</span>.<span class="title">Serializable</span> &#123;</span></span></div><div class="line">    static final long serialVersionUID;</div><div class="line">    private static final java.io.ObjectStreamField[] serialPersistentFields;</div><div class="line">    private void writeObject(java.io.ObjectOutputStream);</div><div class="line">    private void readObject(java.io.ObjectInputStream);</div><div class="line">    java.lang.Object writeReplace();</div><div class="line">    java.lang.Object readResolve();</div><div class="line">&#125;</div><div class="line">-<span class="ruby">keep <span class="class"><span class="keyword">class</span> **.<span class="title">R</span>$* &#123;</span></span></div><div class="line"> *;</div><div class="line">&#125;</div><div class="line">-<span class="ruby">keepclassmembers <span class="class"><span class="keyword">class</span> * &#123;</span></span></div><div class="line">    void *(**On*Event);</div><div class="line">&#125;</div><div class="line">#----------------------------------------------------------------------------</div><div class="line"></div><div class="line">#---------------------------------webview------------------------------------</div><div class="line">-<span class="ruby">keepclassmembers <span class="class"><span class="keyword">class</span> <span class="title">fqcn</span>.<span class="title">of</span>.<span class="title">javascript</span>.<span class="title">interface</span>.<span class="title">for</span>.<span class="title">Webview</span> &#123;</span></span></div><div class="line">   public *;</div><div class="line">&#125;</div><div class="line">-<span class="ruby">keepclassmembers <span class="class"><span class="keyword">class</span> * <span class="title">extends</span> <span class="title">android</span>.<span class="title">webkit</span>.<span class="title">WebViewClient</span> &#123;</span></span></div><div class="line">    public void *(android.webkit.WebView, java.lang.String, android.graphics.Bitmap);</div><div class="line">    public boolean *(android.webkit.WebView, java.lang.String);</div><div class="line">&#125;</div><div class="line">-<span class="ruby">keepclassmembers <span class="class"><span class="keyword">class</span> * <span class="title">extends</span> <span class="title">android</span>.<span class="title">webkit</span>.<span class="title">WebViewClient</span> &#123;</span></span></div><div class="line">    public void *(android.webkit.WebView, jav.lang.String);</div><div class="line">&#125;</div><div class="line">#----------------------------------------------------------------------------</div><div class="line">#---------------------------------------------------------------------------------------------------</div></pre></td></tr></table></figure>
<h3 id="2-补充-实体类"><a href="#2-补充-实体类" class="headerlink" title="2. 补充-实体类"></a>2. 补充-实体类</h3><p>涉及到与服务端的交互，gson解析，数据库操作(GreenDao)等的实体类是要保留的。将你项目中实体类都拎出来，用以下语法进行保留。</p>
<figure class="highlight haml"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">-<span class="ruby">keep <span class="class"><span class="keyword">class</span> 你的实体类所在的包.** &#123; *;</span> &#125;</span></div></pre></td></tr></table></figure>
<p>如我的项目下类User的完整路径为：com.demo.login.bean.User, 那我的混淆如下</p>
<figure class="highlight axapta"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line"><span class="meta">#---------------------------------1.实体类---------------------------------</span></div><div class="line"></div><div class="line">-keep <span class="class"><span class="keyword">class</span> <span class="title">com</span>.<span class="title">demo</span>.<span class="title">login</span>.<span class="title">bean</span>.** </span>&#123; *; &#125;</div><div class="line"></div><div class="line"><span class="meta">#-------------------------------------------------------------------------</span></div></pre></td></tr></table></figure>
<p>当然你的实体类肯定不止这一个，请用上边的方式一一添加，如果你的实体类都在一个包下，那你就幸福了。</p>
<h3 id="3-补充第三方包的混淆"><a href="#3-补充第三方包的混淆" class="headerlink" title="3. 补充第三方包的混淆"></a>3. 补充第三方包的混淆</h3><p>查看项目都依赖了哪些开源库，然后到项目的wiki上查看官方给的对应版本的混淆代码，直接复制过来即可。</p>
<p>已经混淆过的jar包不需要再混淆，比如百度定位的jar包已经混淆过了，可以这么写：</p>
<figure class="highlight haml"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">-<span class="ruby">keep <span class="class"><span class="keyword">class</span> <span class="title">com</span>.<span class="title">baidu</span>.** &#123;*;</span>&#125;</span></div></pre></td></tr></table></figure>
<p>如果没有找到开源库的混淆代码，可以先保留开源库的所有类不混淆，待其它部分的混淆完成打包安装应用能正常使用后再来解决这部分的混淆问题。</p>
<h3 id="4-与js互调的类"><a href="#4-与js互调的类" class="headerlink" title="4. 与js互调的类"></a>4. 与js互调的类</h3><p>工程中没有直接跳过。一般你可以这样写</p>
<figure class="highlight haml"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">-<span class="ruby">keep <span class="class"><span class="keyword">class</span> 你的类所在的包.** &#123; *;</span> &#125;</span></div></pre></td></tr></table></figure>
<p>如果是内部类的话，你可以这样</p>
<figure class="highlight haml"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">-<span class="ruby">keepclasseswithmembers <span class="class"><span class="keyword">class</span> 你的类所在的包.父类$子类 &#123; &lt;methods&gt;;</span> &#125;</span></div></pre></td></tr></table></figure>
<h3 id="5-与反射有关的类"><a href="#5-与反射有关的类" class="headerlink" title="5. 与反射有关的类"></a>5. 与反射有关的类</h3><p>比如gson解析部分会用到反射，需要保留对应的实体和方法。此部分可能需要进行较多的尝试，不要气馁，都是这么过来的。。</p>
<p>以上就是进行代码混淆的基本流程，亲测完全解决了我的问题，也希望能帮助到在学习代码混淆的童鞋们！</p>
<p>Android Studio也有一键生成混淆代码的插件<a href="https://github.com/zhonghanwen/AndroidProguardPlugin" target="_blank" rel="external">AndroidProguardPlugin</a>,集成了很多Android第三方开源库的代码混淆。</p>
]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[Android SQLite操作性能优化办法-参考GreenDao]]></title>
      <url>http://yoursite.com/2016/08/12/Android%20SQLite%E6%93%8D%E4%BD%9C%E6%80%A7%E8%83%BD%E4%BC%98%E5%8C%96%E5%8A%9E%E6%B3%95(%E5%8F%82%E8%80%83GreenDao)/</url>
      <content type="html"><![CDATA[<p>众所周知，GreenDao操作数据库的性能比其他ORM注解框架甚至是原生API都要快许多，现在来看看GreenDao比其它框架快的原因。</p>
<p><img src="http://greenrobot.org/wordpress/wp-content/uploads/greenDAO-vs-OrmLite-vs-ActiveAndroid.png" alt=""></p>
<ol>
<li>避免使用注解和反射拼装sql语句</li>
<li>一些方法基于SQLiteStatement实现的(比原生的execSQL方法快一些)</li>
<li>最终执行时开启了事务</li>
<li>支持异步查询和回调</li>
<li>查询缓存机制，使用了弱引用WeakReference，第一次查询时将数据加入SparseArray<weakreference<q>&gt;的集合中<br>所以要想自己来优化数据库的性能也可以从这些方面来考虑。</weakreference<q></li>
</ol>
<h3 id="GreenDao了解"><a href="#GreenDao了解" class="headerlink" title="GreenDao了解"></a>GreenDao了解</h3><p>GreenDao的核心类如下：</p>
<p><img src="/assets/blogImg/module.jpg" alt="核心类结构图"></p>
<p>DaoMaster 保存了SqliteDatabase对象，提供了一些创建和删除表的静态方法（OpenHelper和DevOpenHelper）</p>
<p>DaoSession 会话层，操作具体对象</p>
<p>xxxDao 实际生成的数据库类</p>
<p>xxxEntity 持久的实体对象，对应着具体的数据库</p>
<p>其基本的数据库操作如下：</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line">DevOpenHelper helper = <span class="keyword">new</span> DaoMaster.DevOpenHelper(<span class="keyword">this</span>, <span class="string">"notes-db"</span>, <span class="keyword">null</span>);  </div><div class="line">db = helper.getWritableDatabase();  </div><div class="line">daoMaster = <span class="keyword">new</span> DaoMaster(db);  </div><div class="line">daoSession = daoMaster.newSession();  </div><div class="line">noteDao = daoSession.getNoteDao();  </div><div class="line">Note note = <span class="keyword">new</span> Note(<span class="keyword">null</span>, noteText, comment, <span class="keyword">new</span> Date());  </div><div class="line">noteDao.insert(note);  </div><div class="line">noteDao.deleteByKey(id);</div></pre></td></tr></table></figure>
<h3 id="1-使用SQLiteStatement"><a href="#1-使用SQLiteStatement" class="headerlink" title="1.使用SQLiteStatement"></a>1.使用SQLiteStatement</h3><p>优化前：<br><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">if</span> (database.isOpen()) &#123;</div><div class="line">            database.beginTransaction(); <span class="comment">// 开启事务</span></div><div class="line">            <span class="keyword">try</span> &#123;</div><div class="line">                database.execSQL(sql);</div><div class="line">                database.setTransactionSuccessful();</div><div class="line">            &#125; <span class="keyword">finally</span> &#123;</div><div class="line">                database.endTransaction();</div><div class="line">            &#125;</div><div class="line">            database.close();</div><div class="line">        &#125;</div></pre></td></tr></table></figure></p>
<p>优化后：<br><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div></pre></td><td class="code"><pre><div class="line">SQLiteStatement statement = database.compileStatement(sql);</div><div class="line">        <span class="keyword">if</span> (database.isOpen()) &#123;</div><div class="line">            database.beginTransaction();</div><div class="line">            <span class="keyword">try</span> &#123;</div><div class="line">                <span class="comment">//index 为1开始索引，value为入库的值</span></div><div class="line">                <span class="comment">//bingXXX为插入XXX类型</span></div><div class="line">                statement.bindString(index, value);</div><div class="line">                database.setTransactionSuccessful();</div><div class="line">            &#125; <span class="keyword">finally</span> &#123;</div><div class="line">                database.endTransaction();</div><div class="line">            &#125;</div><div class="line">            database.close();</div><div class="line">        &#125;</div></pre></td></tr></table></figure></p>
<p>插入数据有3种方式：</p>
<ol>
<li>直接拼装sql，执行execSQL方法，但是它存在SQL注入危险且效率也稍差一些</li>
<li>借用ContentValues可解决SQL注入漏洞问题</li>
<li>使用database.compileStatement<br>3种方式从本质上来说都是创建了一个SQLiteStatement对象，然后调用其executeUpdateDelete插入方法，最后调用native方法完成操作。<br><strong>执行SQL产生SQLiteStatement对象之后，会通过session调用连接池中某个connection中的execute方法。在connection中会构建一个PreparedStatement对象且其含有指向native的指针。</strong></li>
</ol>
<hr>
<h3 id="2-使用事务Transaction"><a href="#2-使用事务Transaction" class="headerlink" title="2.使用事务Transaction"></a>2.使用事务Transaction</h3><p>上面的代码已使用过事务对插入操作进行过优化。<br>使用事务可以保证数据的统一性和完整性，同时也可以提高效率。事务是可以把启动事务过程中的所有操作视为事务的过程。等到所有过程执行完毕后，我们可以根据操作是否成功来决定事务是否进行提交或者回滚。提交事务后会一次性把所有数据提交到数据库，如果回滚了事务就会放弃这次的操作，而对原来表的数据不进行更改。<br>使用SQLiteDatabase的beginTransaction()方法可以开启一个事务，程序执行到endTransaction() 方法时会检查事务的标志是否为成功，如果程序执行到endTransaction()之前调用了<strong>setTransactionSuccessful()</strong> 方法设置事务的标志为成功则提交事务，如果没有调用setTransactionSuccessful() 方法则回滚事务。<br>事务有4个属性：</p>
<ul>
<li>原子性：确保工作单位内的所有操作都成功完成</li>
<li>一致性：确保数据库在成功提交的事务上正确地改变状态</li>
<li>隔离性：使事务操作相互独立和透明</li>
<li>持久性：确保已提交事务的结果或效果在系统发生故障的情况下仍然存在</li>
</ul>
<hr>
<h3 id="3-使用List缓存数据或者按需缓存-操作较大的结果集时采用懒加载的方式"><a href="#3-使用List缓存数据或者按需缓存-操作较大的结果集时采用懒加载的方式" class="headerlink" title="3.使用List缓存数据或者按需缓存(操作较大的结果集时采用懒加载的方式)"></a>3.使用List缓存数据或者按需缓存(操作较大的结果集时采用懒加载的方式)</h3><p>TODO:<br>分析GreenDao的QueryBuilder相关API：<br><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div></pre></td><td class="code"><pre><div class="line"><span class="comment">//断言主键唯一性</span></div><div class="line">assertSinglePk();</div><div class="line"><span class="keyword">if</span> (key == <span class="keyword">null</span>) &#123;</div><div class="line">    <span class="keyword">return</span> <span class="keyword">null</span>;</div><div class="line">&#125;</div><div class="line"><span class="comment">//存在数据作用域的缓存</span></div><div class="line"><span class="keyword">if</span> (identityScope != <span class="keyword">null</span>) &#123;</div><div class="line">    <span class="comment">//如果从缓存中获取到数值  直接返回</span></div><div class="line">    T entity = identityScope.get(key);</div><div class="line">    <span class="keyword">if</span> (entity != <span class="keyword">null</span>) &#123;</div><div class="line">        <span class="keyword">return</span> entity;</div><div class="line">    &#125;</div><div class="line">&#125;</div><div class="line"><span class="comment">//缓存中不存在数据  创建查询的sql语句</span></div><div class="line">String sql = statements.getSelectByKey();</div><div class="line">String[] keyArray = <span class="keyword">new</span> String[] &#123; key.toString() &#125;;</div><div class="line">Cursor cursor = db.rawQuery(sql, keyArray);</div><div class="line"><span class="keyword">return</span> loadUniqueAndCloseCursor(cursor);</div></pre></td></tr></table></figure></p>
<p>实现的方法例如，第一次查询时利用LRUCache将数据添加到一个LinkedHashMap中，如果对某个数据表进行过<code>增删改</code>操作则更新这个列表或者是删除列表的相关记录，查询是先从缓存列表中获取，没有时再创建SQL语句并执行查询操作。</p>
<hr>
<h3 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h3><p>GreenDao是一个相对简洁的第三方库，其本质上提高查询效率的办法是直接使用SQLiteStatement和事务，由于其对事务的良好管理和对Android官方提供的API的良好分装，以及使用java程序来生成数据库相关代码，为开发带来很大的便利。而其它框架简化代码的方式是通过注解和反射，对执行效率有着很大的损伤。另外，良好的封装和内存管理也意味着数据库操作引起内存泄漏的可能性降低了。</p>
<h3 id="参考博客"><a href="#参考博客" class="headerlink" title="参考博客"></a>参考博客</h3><ul>
<li><a href="http://blog.csdn.net/wangbole/article/details/43196067" target="_blank" rel="external">Andrioid SQLite 操作与SQLiteStatement关系</a></li>
<li><a href="http://blog.csdn.net/efeics/article/details/18995433" target="_blank" rel="external">Android SQLiteStatement 编译、执行 分析</a></li>
<li><a href="http://www.cnblogs.com/devinzhang/archive/2012/01/16/2323949.html" target="_blank" rel="external">SQLite优化方法</a></li>
</ul>
]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[SQL学习]]></title>
      <url>http://yoursite.com/2016/08/10/SQL%E5%AD%A6%E4%B9%A0/</url>
      <content type="html"><![CDATA[<figure class="highlight gherkin"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div></pre></td><td class="code"><pre><div class="line">数据库支持emoji表情：</div><div class="line">1. mysql版本5.5.3以上</div><div class="line">2. 存储emoji表情的字段选择utf8mb4_general_ci</div><div class="line">3. 数据库连接也需要改为utf8mb4</div><div class="line">mysql&gt; SHOW VARIABLES WHERE Variable_name LIKE 'character\_set\_%' OR Variable_name LIKE 'collation%';  </div><div class="line">+--------------------------+--------------------+  </div><div class="line">|<span class="string"> Variable_name            </span>|<span class="string"> Value              </span>|<span class="string">  </span></div><div class="line">+--------------------------+--------------------+  </div><div class="line">|<span class="string"> character_set_client     </span>|<span class="string"> utf8mb4            </span>|<span class="string">  </span></div><div class="line">|<span class="string"> character_set_connection </span>|<span class="string"> utf8mb4            </span>|<span class="string">  </span></div><div class="line">|<span class="string"> character_set_database   </span>|<span class="string"> utf8mb4            </span>|<span class="string">  </span></div><div class="line">|<span class="string"> character_set_filesystem </span>|<span class="string"> binary             </span>|<span class="string">  </span></div><div class="line">|<span class="string"> character_set_results    </span>|<span class="string"> utf8mb4            </span>|<span class="string">  </span></div><div class="line">|<span class="string"> character_set_server     </span>|<span class="string"> utf8mb4            </span>|<span class="string">  </span></div><div class="line">|<span class="string"> character_set_system     </span>|<span class="string"> utf8               </span>|<span class="string">  </span></div><div class="line">|<span class="string"> collation_connection     </span>|<span class="string"> utf8mb4_unicode_ci </span>|<span class="string">  </span></div><div class="line">|<span class="string"> collation_database       </span>|<span class="string"> utf8mb4_unicode_ci </span>|<span class="string">  </span></div><div class="line">|<span class="string"> collation_server         </span>|<span class="string"> utf8mb4_unicode_ci </span>|<span class="string">  </span></div><div class="line">+--------------------------+--------------------+  </div><div class="line"> rows in set (0.00 sec)</div></pre></td></tr></table></figure>
<p>多级评论：<br><a href="http://www.searchdatabase.com.cn/showcontent_41220.htm" target="_blank" rel="external">嵌套评论的一个数据库设计技巧</a><br><a href="http://edu.51cto.com/course/course_id-4566.html?edu_recommend_adid=99" target="_blank" rel="external">Django实现论坛梯形多级评论楼视频课程</a></p>
<p>SQL全称Structured Query Language(结构化查询语言)。SQL 是关系型数据库系统（Relation Database System）的标准语言。微软的 SQL Server 使用的是 T-SQL，Oracle 使用的是 PL/SQL，微软的 Access 中的 SQL 叫做 JET SQL （本地格式）等等。<br>SQL流程包括查询调度器（Query Dispatcher）、优化引擎（Optimization Engines）、经典查询引擎（Classic Query Engine）和 SQL 查询引擎（SQL Query Engine）等等。经典查询引擎用于处理所有的非 SQL 查询，而 SQL 查询引擎则不处理逻辑文件。<br><img src="http://wiki.jikexueyuan.com/project/sql/images/sql-architecture.jpg" alt=""></p>
<p>SQL 命令<br>SQL不区分大小写。用于与关系型数据库交互的标准 SQL 命令有 CREATE、SELECT、INSERT、UPDATE、DELETE 和 DROP，这些命令按用途分成如下几组：</p>
<p>数据定义语言</p>
<p>命令    描述<br>CREATE    创建新的表、视图或者其他数据库中的对象<br>ALTER    修改现存数据库对象，比如一张表<br>DROP    删除表、视图或者数据库中的其他对象<br>数据操纵语言</p>
<p>命令    描述<br>SELECT    从一张或者多张表中检索特定的数据<br>INSERT    创建一条新记录<br>UPDATE    修改记录<br>DELETE    删除记录<br>数据控制语言</p>
<p>命令    描述<br>GRANT    赋予用户特权<br>REVOKE    收回赋予用户的特权</p>
<p>注意：NULL 值是表中以空白形式出现的值，表示该记录在此字段处没有设值。</p>
<p>SQL 约束：<br>NOT NULL 约束：保证列中数据不能有 NULL 值<br>DEFAULT 约束：提供该列数据未指定时所采用的默认值<br>UNIQUE 约束：保证列中的所有数据各不相同<br>主键：唯一标识数据表中的行/记录<br>外键：唯一标识其他表中的一条行/记录<br>CHECK 约束：此约束保证列中的所有值满足某一条件<br>索引：用于在数据库中快速创建或检索数据</p>
<h2 id="常用命令"><a href="#常用命令" class="headerlink" title="常用命令"></a>常用命令</h2><ul>
<li>mysql -uroot -p回车后输入密码 打开mysql命令行工具</li>
<li>show databases; 显示所有数据库</li>
<li>use mysql; 使用mysql这个数据库</li>
<li>create database Demo; 创建Demo数据库</li>
<li>use Demo; show tables; 显示所有数据表</li>
<li>create table( id INT NOT NULL PRIMARY KEY, name VARCHAR(20) NOT NULL); 创建表，注意括号</li>
<li>insert into test (id,name) values(0,”张三”); 插入数据</li>
<li>desc test; 显示表结构</li>
<li>alter table test modify id int(11) default 0;  设置test表id字段默认值为0，注意alter(不要写为alert)</li>
<li>alter table test alter column id drop default;  删除default约束</li>
<li>alter table test modify id int(11) not null unique; 标识字段的值是独一无二的</li>
<li>alter table test drop primary key;  删除主键</li>
<li>alter table test add primary key (id); 添加id为主键</li>
<li>update test set name=”haha” where id=0; 更新数据</li>
<li>delete from test where id=1; 删除一条记录</li>
<li>select * from test where name like ‘h%’; like匹配记录，百分号（%）匹配0~多个字符，下划线<code>(_)</code>匹配一个字符</li>
<li>SELECT NAME, SUM(SALARY) FROM CUSTOMERS GROUP BY NAME; 将name和salary划分为一组显示TODO</li>
<li>select distinct name from test;  去除所有重复记录，只返回唯一项</li>
<li>show create table test; 显示表结构文件</li>
<li>show variables like ‘character%’; 匹配显示表的各种字符编码</li>
</ul>
<p>子查询：SELECT column_name [, column_name ] FROM   table1 [, table2 ] WHERE  column_name OPERATOR (SELECT column_name [, column_name ] FROM table1 [, table2 ] [WHERE])；</p>
<h2 id="连接"><a href="#连接" class="headerlink" title="连接"></a>连接</h2><ol>
<li>左连接left join，返回左表中的所有记录，加上右表中匹配到的记录，或者是 NULL</li>
<li>内连接inner join，返回满足连接的所有记录</li>
<li>右连接right join，右连接会返回右表中的所有记录，加上左表中匹配到的记录，或者是 NULL</li>
<li>全连接FULL JOIN，将左连接和右连接的结果组合到一起</li>
<li>笛卡尔连接或者交叉连接返回两个或者更多的连接表中记录的笛卡尔乘积。SELECT  ID, NAME, AMOUNT, DATEFROM CUSTOMERS, ORDERS;<br>mysql不支持全连接，可以使用UNION ALL子句来将左连接和右连接结果组合在一起</li>
</ol>
<h2 id="索引"><a href="#索引" class="headerlink" title="索引"></a>索引</h2><p>可以使用别名（Alias）来对数据表或者列进行临时命名，SELECT C.ID, C.NAME, C.AGE, O.AMOUNT FROM CUSTOMERS AS C, ORDERS AS O WHERE  C.ID = O.CUSTOMER_ID;<br>索引是一种特殊的查询表，可以被数据库搜索引擎用来加速数据的检索。CREATE INDEX index_name ON table_name;<br>小的数据表不应当使用索引；<br>需要频繁进行大批量的更新或者插入操作的表；<br>如果列中包含大数或者 NULL 值，不宜创建索引；<br>频繁操作的列不宜创建索引。</p>
<p>RUNCATE TABLE  table_name; 删除现有数据表中的所有数据。</p>
<h2 id="视图"><a href="#视图" class="headerlink" title="视图"></a>视图</h2><p>视图无非就是存储在数据库中并具有名字的 SQL 语句，是一种虚拟的表</p>
<ul>
<li>以用户或者某些类型的用户感觉自然或者直观的方式来组织数据；</li>
<li>限制对数据的访问，从而使得用户仅能够看到或者修改（某些情况下）他们需要的数据；</li>
<li>从多个表中汇总数据，以产生报表。</li>
</ul>
<ol>
<li>创建：CREATE VIEW view_name AS SELECT column1, column2….. FROM table_name WHERE [condition];<br>WHERE age IS NOT NULL WITH CHECK OPTION; 这里WITH CHECK OPTION 使得视图拒绝任何 AGE 字段为 NULL 的条目。</li>
<li>更新：UPDATE CUSTOMERS_VIEW SET AGE = 35 WHERE name=’Ramesh’;</li>
<li>删除视图：DROP VIEW view_name;</li>
</ol>
<h2 id="having子句"><a href="#having子句" class="headerlink" title="having子句"></a>having子句</h2><p>SELECT column1, column2<br>FROM table1, table2<br>WHERE [ conditions ]<br>GROUP BY column1, column2<br>HAVING [ conditions ]<br>ORDER BY column1, column2；<br>HAVING的位置必须是固定的。</p>
<p>SELECT ID, NAME，AGE FROM CUSTOMERS GROUP BY age HAVING COUNT(age) &gt;= 2;</p>
<h2 id="事务"><a href="#事务" class="headerlink" title="事务"></a>事务</h2><ol>
<li>提交更改：<br>DELETE FROM CUSTOMERS WHERE AGE = 25;<br>COMMIT;</li>
<li>回滚：<br>DELETE FROM CUSTOMERS WHERE AGE = 25;<br>ROLLBACK;</li>
<li>保存可以回滚的状态点，而不是将整个事务都撤销：<br>SAVEPOINT SAVEPOINT_NAME;<br>SAVEPOINT SAVEPOINT_NAME;</li>
<li>删除状态点：RELEASE SAVEPOINT SAVEPOINT_NAME;</li>
<li>初始化数据库事务：SET TRANSACTION [ READ WRITE | READ ONLY ];</li>
</ol>
<h2 id="sql临时表"><a href="#sql临时表" class="headerlink" title="sql临时表"></a>sql临时表</h2><p>CREATE TEMPORARY TABLE SALESSUMMARY (…);<br>如果在 PHP 脚本中操作数据库，那么临时表将在脚本执行完毕时被自动销毁。如果是通过 MySQL 的客户端程序连接到 MySQL 数据库服务器的，那么临时表将会存在到关闭客户端或者手动将其删除。</p>
<h2 id="sql注入"><a href="#sql注入" class="headerlink" title="sql注入"></a>sql注入</h2><p>php字符转义：<br><figure class="highlight php"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">if</span> (get_magic_quotes_gpc())</div><div class="line">&#123;</div><div class="line">  $name = stripslashes($name);</div><div class="line">&#125;</div><div class="line">$name = mysql_real_escape_string($name);</div><div class="line">mysql_query(<span class="string">"SELECT * FROM CUSTOMERS WHERE name='&#123;$name&#125;'"</span>);</div></pre></td></tr></table></figure></p>
<p>LIKE 困境：(将用户提供的 ‘%’ 和 <code>_</code> 转换为字面值)<br><figure class="highlight php"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">$sub = addcslashes(mysql_real_escape_string(<span class="string">"%str"</span>), <span class="string">"%_"</span>);</div><div class="line">mysql_query(<span class="string">"SELECT * FROM messages</span></div><div class="line">             WHERE subject LIKE '&#123;$sub&#125;%'");</div></pre></td></tr></table></figure></p>
<h2 id="SQL常用函数"><a href="#SQL常用函数" class="headerlink" title="SQL常用函数"></a>SQL常用函数</h2><p>count(统计记录总数),max,min,avg,sum,sqrt,rand(产生0~1随机数),concat(连接两个字符串)</p>
]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[Android应用差分更新工具bsdiff]]></title>
      <url>http://yoursite.com/2016/08/08/Android%E5%BA%94%E7%94%A8%E5%B7%AE%E5%88%86%E6%9B%B4%E6%96%B0%E5%B7%A5%E5%85%B7bsdiff/</url>
      <content type="html"><![CDATA[<p>增量差分更新即将已安装apk与服务器端最新apk进行二进制对比，得到差分包，用户更新程序时，只需要下载差分包，并在本地使用差分包与已安装apk，合成新版apk安装即可。</p>
<p>apk文件的差分使用bsdiff工具中的bsdiff函数生成，差分包的合成使用bsdiff工具中的bspatch函数生成。</p>
<p>BSDiff通过引入diff string的概念，大大减少了要记录的指针控制字的数目，从而使得patch包更小。<br><img src="http://img.blog.csdn.net/20160424124454898?watermark/2/text/aHR0cDovL2Jsb2cuY3Nkbi5uZXQv/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70/gravity/Center" alt=""></p>
<p>Diff:</p>
<ol>
<li>对old文件中所有子字符串形成一个字典</li>
<li>对比old文件和new文件，产生diff string和extra string</li>
<li>将diff string 和extra string 以及相应的控制字用zip压缩成一个patch包</li>
</ol>
<p>HDiffPatch是一个高效的diff/patch实现,比bsdiff更快(只需1/4时间),占用的内存更小(2/3内存),更容易使用和集成,得到的diff结果压缩后也经常比bsdiff更小或相当(一般小10%以上)!</p>
<p><a href="https://github.com/sisong/HDiffPatch" target="_blank" rel="external">HDiffPatch项目地址</a></p>
<h3 id="参考博客"><a href="#参考博客" class="headerlink" title="参考博客"></a>参考博客</h3><ul>
<li><a href="http://blog.csdn.net/add_ada/article/details/51232889" target="_blank" rel="external">差量更新系列1]BSDiff算法学习笔记</a></li>
<li><a href="https://github.com/cundong/SmartAppUpdates" target="_blank" rel="external">Android应用增量更新 - Smart App Updates</a></li>
</ul>
]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[Android图片加载框架Glide源码浅析TODO]]></title>
      <url>http://yoursite.com/2016/08/01/Glide%E6%BA%90%E7%A0%81%E5%88%86%E6%9E%900721/</url>
      <content type="html"><![CDATA[<p>最简单的获取图片的方式：<br><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">Glide.with(activity).load(<span class="string">"http://www.baidu.com/s.jpg"</span>).into(iv);</div></pre></td></tr></table></figure></p>
<h3 id="主线"><a href="#主线" class="headerlink" title="主线"></a>主线</h3><p>Request(SingleRequest、RequestCoordinator)  -&gt;  Engine(EngineJob、DecodeJob)  -&gt;  GetData(Cache、LocalUriFetche、HttpUrlFetcher)  -&gt;  Data  -&gt;  Resource(decode、transcode、encode)；<br>构建请求  -&gt;  Engine从缓存中获取数据  -&gt;  DecodeJob获取数据并处理  -&gt;  回调到MainThread；</p>
<h3 id="生命周期联动"><a href="#生命周期联动" class="headerlink" title="生命周期联动"></a>生命周期联动</h3><p>Glide.with()方法可以带Activity,Fragment,Context等参数，其提供了了一个LifecycleListener用于表示请求的生命周期，提供有onStart()、onStop()、onDestroy()方法。<br>Glide对于不同的Context有着不同的保证生命周期联动的实现，执行with()方法时会通过RequestManagerRetriever的单例根据不同的Context获取RequestManager。<br><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">public</span> RequestManager <span class="title">get</span><span class="params">(Fragment fragment)</span> </span>&#123;</div><div class="line">        <span class="keyword">if</span> (Util.isOnBackgroundThread()) &#123;</div><div class="line">            <span class="comment">// 方法运行在非UI线程时使用Application这个Context</span></div><div class="line">            <span class="keyword">return</span> get(fragment.getActivity().getApplicationContext());</div><div class="line">        &#125; <span class="keyword">else</span> &#123;</div><div class="line">            .FragmentManager fm = fragment.getChildFragmentManager();</div><div class="line">            <span class="keyword">return</span> fragmentGet(fragment.getActivity(), fm);</div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line"></div><div class="line"><span class="function">RequestManager <span class="title">fragmentGet</span><span class="params">(Context context, FragmentManager fm)</span> </span>&#123;</div><div class="line">        RequestManagerFragment current = getRequestManagerFragment(fm);</div><div class="line">        RequestManager requestManager = current.getRequestManager();</div><div class="line">        <span class="keyword">if</span> (requestManager == <span class="keyword">null</span>) &#123;</div><div class="line">            requestManager = <span class="keyword">new</span> RequestManager(context, current.getLifecycle(), current.getRequestManagerTreeNode());</div><div class="line">            current.setRequestManager(requestManager);</div><div class="line">        &#125;</div><div class="line">        <span class="keyword">return</span> requestManager;</div><div class="line">    &#125;</div></pre></td></tr></table></figure></p>
<p>RequestManagerFragment继承自Fragment，其生命周期方法中有ActivityFragmentLifecycle实现的onStart()、onStop()、onDestroy()方法，ActivityFragmentLifecycle维护了一个LifecycleListener列表，可以通过addListener的方式添加新的LifecycleListener。而LifecycleListener的实现则是在RequestManager中，通过<code>RequestTracker</code>来控制。<br>继而load()方法获得一个DrawableTypeRequest，DrawableTypeRequest继承自DrawableRequestBuilder，追踪到其父类的into方法。<br><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">public</span> &lt;Y extends Target&lt;TranscodeType&gt;&gt; <span class="function">Y <span class="title">into</span><span class="params">(Y target)</span> </span>&#123;</div><div class="line">        Request previous = target.getRequest();</div><div class="line">        <span class="keyword">if</span> (previous != <span class="keyword">null</span>) &#123;</div><div class="line">            previous.clear();</div><div class="line">            requestTracker.removeRequest(previous);</div><div class="line">            previous.recycle();</div><div class="line">        &#125;</div><div class="line"></div><div class="line">        Request request = buildRequest(target);</div><div class="line">        target.setRequest(request);</div><div class="line">        lifecycle.addListener(target);</div><div class="line">        requestTracker.runRequest(request);</div><div class="line"></div><div class="line">        <span class="keyword">return</span> target;</div><div class="line">    &#125;</div></pre></td></tr></table></figure></p>
<p>构造好请求参数后，生成Request，最后用requestTracker执行请求。</p>
<p>TODO:<br>具体请求实现    缓存策略    okhttp接入   线程调度</p>
]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[Android网络请求实现与okhttp源码浅析]]></title>
      <url>http://yoursite.com/2016/08/01/Android%E7%BD%91%E7%BB%9C%E8%AF%B7%E6%B1%82%E5%AE%9E%E7%8E%B0%E5%8F%8Aokhttp%E6%BA%90%E7%A0%81%E6%B5%85%E6%9E%90/</url>
      <content type="html"><![CDATA[<p>一直以来对网络请求框架都停留在一个只会用的阶段，<a href="https://github.com/square/okhttp" target="_blank" rel="external">okhttp</a>是一个相对成熟的网络请求的解决方案，Android4.4的源码中可以看到HttpURLConnection已经替换成OkHttp实现了。现在来捋一捋okhttp的架构和网络请求的实现方案。</p>
<h2 id="使用HttpURLConnection"><a href="#使用HttpURLConnection" class="headerlink" title="使用HttpURLConnection"></a>使用HttpURLConnection</h2><ol>
<li>实例化URL对象，传入链接地址</li>
<li>使用url.openConnection()实例化HttpURLConnection对象</li>
<li><p>设置参数</p>
 <figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line">conn.setDoInput(<span class="keyword">true</span>); <span class="comment">//允许输入流，即允许下载</span></div><div class="line">conn.setDoOutput(<span class="keyword">true</span>); <span class="comment">//允许输出流，即允许上传</span></div><div class="line">conn.setUseCaches(<span class="keyword">false</span>); <span class="comment">//不使用缓冲</span></div><div class="line"> <span class="comment">//application/x-javascript text/xml-&gt;xml数据 application/x-javascript-&gt;json对象 application/x-www-form-urlencoded-&gt;表单数据</span></div><div class="line">conn.setRequestProperty(<span class="string">"Content-Type"</span>, <span class="string">"application/x-javascript; charset="</span>+ encoding);</div><div class="line">conn.setRequestProperty(<span class="string">"Content-Length"</span>, String.valueOf(data.length));</div><div class="line"> conn.setConnectTimeout(<span class="number">5</span>*<span class="number">1000</span>);<span class="comment">//请求超时时间</span></div><div class="line">conn.setRequestMethod(<span class="string">"GET"</span>); <span class="comment">//使用get请求</span></div></pre></td></tr></table></figure>
</li>
<li><p>conn.getInputStream()将阻塞线程等待服务器响应</p>
 <figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div></pre></td><td class="code"><pre><div class="line">is = conn.getInputStream();   <span class="comment">//获取输入流，此时才真正建立链接  </span></div><div class="line">InputStreamReader isr = <span class="keyword">new</span> InputStreamReader(is);  </div><div class="line">BufferedReader bufferReader = <span class="keyword">new</span> BufferedReader(isr);  </div><div class="line">String inputLine  = <span class="string">""</span>;  </div><div class="line"><span class="keyword">while</span>((inputLine = bufferReader.readLine()) != <span class="keyword">null</span>)&#123;  </div><div class="line">    resultData += inputLine + <span class="string">"\n"</span>;  </div><div class="line">&#125;  </div><div class="line"></div><div class="line">---</div><div class="line">或者</div><div class="line"> InputStream is = conn.getInputStream();  </div><div class="line"> bitmap = BitmapFactory.decodeStream(is);</div></pre></td></tr></table></figure>
</li>
</ol>
<p>网络请求不能在UI线程中进行，可通过AsyncTask或者Thread和handler搭配将数据返回UI线程并更新显示。</p>
<hr>
<h2 id="okhttp实现与源码分析"><a href="#okhttp实现与源码分析" class="headerlink" title="okhttp实现与源码分析"></a>okhttp实现与源码分析</h2><ul>
<li>支持HTTP2/SPDY黑科技</li>
<li>socket自动选择最好路线，并支持自动重连</li>
<li>拥有自动维护的socket连接池，减少握手次数</li>
<li>拥有队列线程池，轻松写并发</li>
<li>拥有Interceptors轻松处理请求与响应</li>
<li>基于Headers的缓存策略</li>
</ul>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div></pre></td><td class="code"><pre><div class="line"><span class="comment">//创建okHttpClient对象</span></div><div class="line">OkHttpClient mOkHttpClient = <span class="keyword">new</span> OkHttpClient();</div><div class="line"><span class="comment">//创建一个Request</span></div><div class="line"><span class="keyword">final</span> Request request = <span class="keyword">new</span> Request.Builder()</div><div class="line">                .url(<span class="string">"https://github.com/hongyangAndroid"</span>)</div><div class="line">                .build();</div><div class="line"><span class="comment">//new call</span></div><div class="line">Call call = mOkHttpClient.newCall(request);</div><div class="line"><span class="comment">//请求加入调度</span></div><div class="line">call.enqueue(<span class="keyword">new</span> Callback()&#123;</div><div class="line">            <span class="meta">@Override</span></div><div class="line">            <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">onFailure</span><span class="params">(Request request, IOException e)</span></span>&#123;&#125;</div><div class="line"></div><div class="line">            <span class="meta">@Override</span></div><div class="line">            <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">onResponse</span><span class="params">(<span class="keyword">final</span> Response response)</span> <span class="keyword">throws</span> IOException </span>&#123;</div><div class="line">                    String htmlStr =  response.body().string();</div><div class="line">            &#125;</div><div class="line">        &#125;);</div></pre></td></tr></table></figure>
<p>请求步骤：</p>
<ol>
<li>构造Request对象，通过Request.Builder设置header、method等参数</li>
<li>构造Call对象，将请求封装成任务</li>
<li>call.enquene()将call加入调度队列</li>
</ol>
<h3 id="1-Dispatcher线程分发"><a href="#1-Dispatcher线程分发" class="headerlink" title="1. Dispatcher线程分发"></a>1. Dispatcher线程分发</h3><ul>
<li>runningAsyncCalls  正在运行的任务，仅仅是用来引用正在运行的任务以判断并发量，注意它并不是消费者缓存</li>
<li>readyAsyncCalls     缓存（用数组实现，可自动扩容，无大小限制）</li>
<li>maxRequests = 64: 最大并发请求数为64</li>
<li>maxRequestsPerHost = 5: 每个主机最大请求数为5</li>
</ul>
<p>执行call.enqueue/execute时将Call放到了Dispatcher中</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div></pre></td><td class="code"><pre><div class="line"><span class="meta">@Override</span> <span class="function"><span class="keyword">public</span> Response <span class="title">execute</span><span class="params">()</span> <span class="keyword">throws</span> IOException </span>&#123;</div><div class="line">    <span class="keyword">try</span> &#123;</div><div class="line">      client.dispatcher().executed(<span class="keyword">this</span>); <span class="comment">//将call网络请求事件进行分发</span></div><div class="line">      Response result = getResponseWithInterceptorChain();</div><div class="line">      <span class="keyword">if</span> (result == <span class="keyword">null</span>) <span class="keyword">throw</span> <span class="keyword">new</span> IOException(<span class="string">"Canceled"</span>);</div><div class="line">      <span class="keyword">return</span> result;</div><div class="line">    &#125; <span class="keyword">finally</span> &#123;</div><div class="line">      client.dispatcher().finished(<span class="keyword">this</span>);</div><div class="line">    &#125;</div><div class="line">  &#125;</div></pre></td></tr></table></figure>
<p><img src="http://upload-images.jianshu.io/upload_images/98641-bf59bda54ea07552.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt=""></p>
<p>执行call.execute()是直接将call加入到runningSyncCalls中(普通的同步单线程分发方式)，执行call.enqueue()是使用了队列进行并发任务的分发与回调方式。Call是一个接口类，其具体实现是RealCall。下面看执行并发请求的代码：</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">synchronized</span> <span class="keyword">void</span> <span class="title">enqueue</span><span class="params">(AsyncCall call)</span> </span>&#123;</div><div class="line">    <span class="comment">//先判断正在运行的任务是否超出了最大并发请求数量，主机请求数是否超出了最大允许的主机请求数</span></div><div class="line">    <span class="keyword">if</span> (runningAsyncCalls.size() &lt; maxRequests &amp;&amp; runningCallsForHost(call) &lt; maxRequestsPerHost) &#123;</div><div class="line">        <span class="comment">// 请求数在允许范围内则添加到runningAsyncCalls并执行请求调度</span></div><div class="line">      runningAsyncCalls.add(call);</div><div class="line">      executorService().execute(call);</div><div class="line">    &#125; <span class="keyword">else</span> &#123;</div><div class="line">        <span class="comment">// 线程池满了的时候就放入readyAsyncCalls进行缓存等待</span></div><div class="line">      readyAsyncCalls.add(call);</div><div class="line">    &#125;</div><div class="line">  &#125;</div></pre></td></tr></table></figure>
<h3 id="2-线程池与任务调度"><a href="#2-线程池与任务调度" class="headerlink" title="2. 线程池与任务调度"></a>2. 线程池与任务调度</h3><p>使用Thread+handler的方式来控制线程，其最大的坑在于其生命周期不可预料，容易出现内存泄漏。okhttp采用了线程池，线程池的关键在于线程复用以减少非核心任务的损耗。其核心在于：</p>
<ol>
<li>采用缓存的方式减少CPU闲置的时间，方便控制并发</li>
<li>通过控制线程数量，来控制多线程请求对CPU带来的压力</li>
</ol>
<p>上面的请求用到了executorService().execute(call)，我们来看它的实现：<br><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">synchronized</span> ExecutorService <span class="title">executorService</span><span class="params">()</span> </span>&#123;</div><div class="line">    <span class="keyword">if</span> (executorService == <span class="keyword">null</span>) &#123;</div><div class="line">        <span class="comment">// BlockingQueue&lt;Runnable&gt; workQueue: 工作队列</span></div><div class="line">        <span class="comment">// 当收到10个并发请求时，线程池会创建十个线程(线程数区间[0, Integer.MAX_VALUE])，当工作完成后，线程池会在60s后相继关闭所有线程。</span></div><div class="line">      executorService = <span class="keyword">new</span> ThreadPoolExecutor(<span class="number">0</span>, Integer.MAX_VALUE, <span class="number">60</span>, TimeUnit.SECONDS,</div><div class="line">          <span class="keyword">new</span> SynchronousQueue&lt;Runnable&gt;(), Util.threadFactory(<span class="string">"OkHttp Dispatcher"</span>, <span class="keyword">false</span>));</div><div class="line">    &#125;</div><div class="line">    <span class="keyword">return</span> executorService;</div><div class="line">  &#125;</div></pre></td></tr></table></figure></p>
<p>再来看上面出现的AsyncCall，其继承自Runnable，其复写的run()方法内部调用了execute()方法。<br><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div></pre></td><td class="code"><pre><div class="line"><span class="meta">@Override</span> <span class="function"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title">execute</span><span class="params">()</span> </span>&#123;</div><div class="line">      <span class="keyword">boolean</span> signalledCallback = <span class="keyword">false</span>;  <span class="comment">// 标识是否发生了IO异常导致没有回调任何信息</span></div><div class="line">      <span class="keyword">try</span> &#123;</div><div class="line">          <span class="comment">// getResponseWithInterceptorChain()方法执行网络请求并获取response</span></div><div class="line">        Response response = getResponseWithInterceptorChain();</div><div class="line">        <span class="comment">// 取消call调用onFailure</span></div><div class="line">        <span class="keyword">if</span> (retryAndFollowUpInterceptor.isCanceled()) &#123;</div><div class="line">          signalledCallback = <span class="keyword">true</span>;</div><div class="line">          responseCallback.onFailure(RealCall.<span class="keyword">this</span>, <span class="keyword">new</span> IOException(<span class="string">"Canceled"</span>));</div><div class="line">        &#125; <span class="keyword">else</span> &#123;</div><div class="line">          signalledCallback = <span class="keyword">true</span>;</div><div class="line">          <span class="comment">// 请求成功用onResponse回调Response</span></div><div class="line">          responseCallback.onResponse(RealCall.<span class="keyword">this</span>, response);</div><div class="line">        &#125;</div><div class="line">      &#125; <span class="keyword">catch</span> (IOException e) &#123;</div><div class="line">          responseCallback.onFailure(RealCall.<span class="keyword">this</span>, e);</div><div class="line">      &#125; <span class="keyword">finally</span> &#123;</div><div class="line">          <span class="comment">// 完成请求，从Dispatcher里的runningAsyncCalls里面移除</span></div><div class="line">        client.dispatcher().finished(<span class="keyword">this</span>);</div><div class="line">      &#125;</div><div class="line">    &#125;</div></pre></td></tr></table></figure></p>
<p>关键则在于getResponseWithInterceptorChain()方法，其添加了很多拦截器(Interceptor)，最后使用了RealInterceptorChain.proceed()方法，它先执行拦截器里面的逻辑并判断是否要继续执行拦截器里的内容还是直接进行网络请求。</p>
<h3 id="3-拦截器-Interceptors"><a href="#3-拦截器-Interceptors" class="headerlink" title="3.拦截器 Interceptors"></a>3.拦截器 Interceptors</h3><p>继续看getResponseWithInterceptorChain()的实现代码：<br><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">private</span> Response <span class="title">getResponseWithInterceptorChain</span><span class="params">()</span> <span class="keyword">throws</span> IOException </span>&#123;</div><div class="line">    List&lt;Interceptor&gt; interceptors = <span class="keyword">new</span> ArrayList&lt;&gt;();</div><div class="line">    interceptors.addAll(client.interceptors());</div><div class="line">    interceptors.add(retryAndFollowUpInterceptor);</div><div class="line">    <span class="comment">// ...</span></div><div class="line">    Interceptor.Chain chain = <span class="keyword">new</span> RealInterceptorChain(</div><div class="line">        interceptors, <span class="keyword">null</span>, <span class="keyword">null</span>, <span class="keyword">null</span>, <span class="number">0</span>, originalRequest);</div><div class="line">    <span class="keyword">return</span> chain.proceed(originalRequest);</div><div class="line">  &#125;</div></pre></td></tr></table></figure></p>
<p>拦截器是okhttp中强大的流程装置，它可以用来监控log，修改请求，修改结果等。上面的代码维护了一个Interceptors的List，并通过InterceptorChain进行多次拦截修改操作。<br>调用RealInterceptorChain.proceed()时，其递归调用Interceptors对response进行处理，当全部递归完成后，返回response。<br><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">RealInterceptorChain next = <span class="keyword">new</span> RealInterceptorChain(</div><div class="line">        interceptors, streamAllocation, httpStream, connection, index + <span class="number">1</span>, request);</div><div class="line">Interceptor interceptor = interceptors.get(index);</div><div class="line">Response response = interceptor.intercept(next);</div></pre></td></tr></table></figure></p>
<p>index递增，从interceptors列表中获取interceptor，并继而执行intercept方法。<br>如BridgeInterceptor对Request.Builder进行了进一步的处理；CacheInterceptor则判断是否已经有缓存好的Response以及是否还需要进行网络请求；CallServerIntercepter则是通过Okio封装好RequestBody，然后通过httpStream进行请求(request)、握手(handshake)并获取到response。</p>
<p>各个Interceptor的功能：</p>
<ul>
<li>RetryAndFollowUpInterceptor  负责失败重试以及重定向</li>
<li>BridgeInterceptor  负责把用户构造的请求转换为发送到服务器的请求、把服务器返回的响应转换为用户友好的响应</li>
<li>CacheInterceptor  负责读取缓存直接返回、更新缓存</li>
<li>ConnectInterceptor  负责和服务器建立连接</li>
<li>NetworkInterceptors 配置 OkHttpClient</li>
<li>CallServerInterceptor  负责向服务器发送请求数据、从服务器读取响应数据</li>
</ul>
<h3 id="4-网络请求，建立连接"><a href="#4-网络请求，建立连接" class="headerlink" title="4.网络请求，建立连接"></a>4.网络请求，建立连接</h3><p>继续研究ConnectInterceptor和CallServerInterceptor：<br><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line"><span class="comment">// 负责建立连接的ConnectInterceptor</span></div><div class="line"><span class="meta">@Override</span> <span class="function"><span class="keyword">public</span> Response <span class="title">intercept</span><span class="params">(Chain chain)</span> <span class="keyword">throws</span> IOException </span>&#123;</div><div class="line">    <span class="comment">// ...</span></div><div class="line">    <span class="keyword">boolean</span> doExtensiveHealthChecks = !request.method().equals(<span class="string">"GET"</span>);  <span class="comment">//非GET请求需要安全检查</span></div><div class="line">    HttpStream httpStream = streamAllocation.newStream(client, doExtensiveHealthChecks);</div><div class="line">    RealConnection connection = streamAllocation.connection();<span class="comment">// 用StreamAllocation产生RealConnection</span></div><div class="line">    <span class="keyword">return</span> realChain.proceed(request, streamAllocation, httpStream, connection);</div><div class="line">  &#125;</div></pre></td></tr></table></figure></p>
<p>streamAllocation.newStream()方法中使用findHealthyConnection()方法找到一个可用的连接(RealConnection)，再利用 RealConnection 的输入输出（BufferedSource 和 BufferedSink）创建 HttpStream 对象。<br><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div></pre></td><td class="code"><pre><div class="line"><span class="comment">// 负责发送和接收数据的CallServerInterceptor</span></div><div class="line"><span class="meta">@Override</span> <span class="function"><span class="keyword">public</span> Response <span class="title">intercept</span><span class="params">(Chain chain)</span> <span class="keyword">throws</span> IOException </span>&#123;</div><div class="line">    <span class="comment">// 取到ConnectionInterceptor中得到的HttpStream</span></div><div class="line">    HttpStream httpStream = ((RealInterceptorChain) chain).httpStream();</div><div class="line">    StreamAllocation streamAllocation = ((RealInterceptorChain) chain).streamAllocation();</div><div class="line">    Request request = chain.request();</div><div class="line"></div><div class="line">    <span class="keyword">long</span> sentRequestMillis = System.currentTimeMillis();</div><div class="line">    <span class="comment">// 发送Request Header</span></div><div class="line">    httpStream.writeRequestHeaders(request);</div><div class="line">    <span class="comment">// 有Request Body则创建body请求流并发送   </span></div><div class="line">    <span class="keyword">if</span> (HttpMethod.permitsRequestBody(request.method()) &amp;&amp; request.body() != <span class="keyword">null</span>) &#123;</div><div class="line">      Sink requestBodyOut = httpStream.createRequestBody(request, request.body().contentLength());</div><div class="line">      <span class="comment">// 获取输出</span></div><div class="line">      BufferedSink bufferedRequestBody = Okio.buffer(requestBodyOut);</div><div class="line">      request.body().writeTo(bufferedRequestBody);</div><div class="line">      bufferedRequestBody.close();</div><div class="line">    &#125;</div><div class="line">    httpStream.finishRequest();</div><div class="line"></div><div class="line">    Response response = httpStream.readResponseHeaders()</div><div class="line">        .request(request)</div><div class="line">        .handshake(streamAllocation.connection().handshake())</div><div class="line">        .sentRequestAtMillis(sentRequestMillis)</div><div class="line">        .receivedResponseAtMillis(System.currentTimeMillis())</div><div class="line">        .build();</div><div class="line"></div><div class="line">    <span class="keyword">if</span> (!forWebSocket || response.code() != <span class="number">101</span>) &#123;</div><div class="line">      response = response.newBuilder()</div><div class="line">          .body(httpStream.openResponseBody(response))</div><div class="line">          .build();</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="keyword">if</span> (<span class="string">"close"</span>.equalsIgnoreCase(response.request().header(<span class="string">"Connection"</span>))</div><div class="line">        || <span class="string">"close"</span>.equalsIgnoreCase(response.header(<span class="string">"Connection"</span>))) &#123;</div><div class="line">      streamAllocation.noNewStreams();</div><div class="line">    &#125;</div><div class="line">    <span class="keyword">int</span> code = response.code();</div><div class="line">    <span class="keyword">if</span> ((code == <span class="number">204</span> || code == <span class="number">205</span>) &amp;&amp; response.body().contentLength() &gt; <span class="number">0</span>) &#123;</div><div class="line">     <span class="comment">// throw ProtocolException</span></div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="keyword">return</span> response;</div><div class="line">  &#125;</div><div class="line">  <span class="comment">//  Http2xStream</span></div><div class="line">  <span class="meta">@Override</span> <span class="function"><span class="keyword">public</span> ResponseBody <span class="title">openResponseBody</span><span class="params">(Response response)</span> <span class="keyword">throws</span> IOException </span>&#123;</div><div class="line">    Source source = <span class="keyword">new</span> StreamFinishingSource(stream.getSource());</div><div class="line">    <span class="comment">// 通过okio得到ResponseBody</span></div><div class="line">    <span class="keyword">return</span> <span class="keyword">new</span> RealResponseBody(response.headers(), Okio.buffer(source));</div><div class="line">  &#125;</div></pre></td></tr></table></figure></p>
<p>RealConnection是进行网络连接最核心和最底层的实现，实现了Socket握手连接。RealConnection成功建立后会被添加到ConnectionPool连接池。</p>
<h3 id="5-缓存CacheInterceptor"><a href="#5-缓存CacheInterceptor" class="headerlink" title="5.缓存CacheInterceptor"></a>5.缓存CacheInterceptor</h3><ol>
<li>获取缓存策略</li>
<li><p>根据Request获取Response并作为缓存的候选者</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">Response cacheCandidate = cache != <span class="keyword">null</span> ? cache.get(chain.request()) : <span class="keyword">null</span>;</div></pre></td></tr></table></figure>
</li>
<li><p>InternalCache存在时跟踪Response</p>
</li>
<li>找到Response，更新并返回Response<br>具体的缓存逻辑 OkHttp 内置封装了一个 Cache 类，它利用 DiskLruCache，用磁盘上的有限大小空间进行缓存，按照 LRU 算法进行缓存淘汰。<a href="https://github.com/square/okhttp/blob/master/okhttp/src/main/java/okhttp3/Cache.java" target="_blank" rel="external">查看源代码</a></li>
</ol>
<h3 id="6-线程池具体实现"><a href="#6-线程池具体实现" class="headerlink" title="6.线程池具体实现"></a>6.线程池具体实现</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> Executor executor = <span class="keyword">new</span> ThreadPoolExecutor(<span class="number">0</span> <span class="comment">/* corePoolSize */</span>,  </div><div class="line">      Integer.MAX_VALUE <span class="comment">/* maximumPoolSize */</span>, <span class="number">60L</span> <span class="comment">/* keepAliveTime */</span>, TimeUnit.SECONDS,  </div><div class="line">      <span class="keyword">new</span> SynchronousQueue&lt;Runnable&gt;(), Util.threadFactory(<span class="string">"OkHttp ConnectionPool"</span>, <span class="keyword">true</span>));  </div><div class="line"><span class="comment">//该类跟Dispatcher.class一样创建了一个线程池，用于维护管理RealConnection  </span></div><div class="line"><span class="keyword">final</span> RouteDatabase routeDatabase = <span class="keyword">new</span> RouteDatabase();  </div><div class="line"><span class="comment">//该对象创建一个RouteDataBase对象，是一个路由数据库，该数据库其实很简单，里面维护了一个private final Set&lt;Route&gt; failedRoutes = new LinkedHashSet&lt;&gt;()集合。存放失败的路由数据  </span></div><div class="line"><span class="keyword">private</span> <span class="keyword">final</span> Deque&lt;RealConnection&gt; connections = <span class="keyword">new</span> ArrayDeque&lt;&gt;();  </div><div class="line"><span class="comment">//该集合是ConnectionPool用于存储当前系统经历过三次握手可用的RealConnection</span></div></pre></td></tr></table></figure>
<hr>
<h3 id="SPDY协议"><a href="#SPDY协议" class="headerlink" title="SPDY协议"></a>SPDY协议</h3><p>SPDY 是 Google 开发的基于传输控制协议 (TCP) 的应用层协议，SPDY 协议旨在通过压缩、多路复用和优先级来缩短网页的加载时间和提高安全性。SPDY 的目的是为了加强 HTTP，是对 HTTP 一个更好的实现和支持，且基本上兼容 HTTP 。<br>HTTP协议的不足：</p>
<ul>
<li>单路请求，效率较低   严格FIFO，易阻塞</li>
<li>HTTP只允许由客户端主动发起请求</li>
<li>HTTP头冗余，浪费带宽和资源<br>SPDY协议：</li>
<li>多路复用 请求优化</li>
<li>压缩了HTTP头</li>
<li>强制使用SSL传输协议</li>
<li>支持服务器推送技术<br>目前Google已放弃SPDY，由HTTP2.0取代。</li>
</ul>
<hr>
<h3 id="主干线"><a href="#主干线" class="headerlink" title="主干线"></a>主干线</h3><ul>
<li>OKHttpClient  -&gt;  RequestBody  -&gt;  RealCall  -&gt; Dispatcher  -&gt;  ExecutorService  -&gt;  AsyncCall   -&gt;  Interceptor  -&gt;  InterceptorChain   -&gt; Interceptor  -&gt; … -&gt; Response；</li>
<li>网络请求，数据缓存，IO操作等都是在Interceptor中递归操作；</li>
<li>任务管理，线程引用计数，线程调度都在Dispatcher及ExecutorService中进行；</li>
<li>采用keep-alive connections机制，当客户端需要再次获取数据时，直接使用刚刚空闲下来的连接而不需要再次握手。Okhttp默认支持5个并发，默认链路生命为5分钟；<br><img src="http://blog.piasy.com/img/201607/okhttp_full_process.png" alt=""></li>
</ul>
<h3 id="参考博客"><a href="#参考博客" class="headerlink" title="参考博客"></a>参考博客</h3><ul>
<li><a href="http://www.jianshu.com/p/aad5aacd79bf" target="_blank" rel="external">OkHttp3源码分析</a></li>
<li><a href="http://blog.csdn.net/wk843620202/article/details/51888593" target="_blank" rel="external">拆轮子系列：拆 OkHttp</a></li>
<li><a href="http://blog.csdn.net/hursing/article/details/22785475/" target="_blank" rel="external">SPDY、HTTP/2、QUIC协议</a></li>
</ul>
<p>TODO :<br>缓存策略   线程调度具体实现    连接池复用    网络请求、握手操作    …</p>
]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[Android静态代码检测]]></title>
      <url>http://yoursite.com/2016/08/01/Android%E9%9D%99%E6%80%81%E4%BB%A3%E7%A0%81%E6%A3%80%E6%9F%A520160720/</url>
      <content type="html"><![CDATA[<p>静态代码检测即不涉及代码运行的代码检测过程，其目的是为了发现代码潜在的缺陷和优化改进项，以保障代码的规范性，及时发现表面层次上的bug，防止低级错误的出现。下面简单介绍常用的进行代码质量检测的工具。</p>
<h3 id="1-lint工具"><a href="#1-lint工具" class="headerlink" title="1.lint工具"></a>1.lint工具</h3><p>可以检测：</p>
<ul>
<li>布局性能</li>
<li>未使用到的资源或缺少的资源</li>
<li>国际化问题</li>
<li>图标的问题</li>
<li><p>manifest文件的错误</p>
<p><img src="http://cs.szpt.edu.cn/android/images/tools/lint.png" alt=""></p>
</li>
</ul>
<ol>
<li>在项目目录执行命令gradle lint，则会在项目目录/app/build/outputs/lint-results-debug.html文件，可以用浏览器打开查看。</li>
<li><p>另一种方式是在AS里面projects下选择Analyze -&gt; InspectCode，则会将xml以图形化的方式显示。<br>在Preferences -&gt; Editor -&gt; Inspections下可以自定义Android Lint的检查提示，如需要设置TextSize为dp时以错误显示，则找到相关设置将Severity改为Error即可。</p>
<p><img src="https://mss.sankuai.com/v1/mss_814dc1610cda4b2e8febd6ea2c809db5/image/1468988000592.png" alt=""></p>
</li>
</ol>
<p>代码中禁用Lint的方式：</p>
<ol>
<li>xml文件: tools:ignore=<code>[UnusedResources/NewApi/all]</code></li>
<li>java代码中：@SuppressLint(<code>[NewApi/all]</code>)</li>
</ol>
<hr>
<h3 id="2-findBugs"><a href="#2-findBugs" class="headerlink" title="2.findBugs"></a>2.findBugs</h3><ul>
<li>常见代码错误，序列化错误</li>
<li>可能导致错误的代码，如空指针引用</li>
<li>国际化相关问题：如错误的字符串转换</li>
<li>可能受到的恶意攻击，如访问权限修饰符的定义等</li>
<li>多线程的正确性：如多线程编程时常见的同步，线程调度问题。</li>
<li>运行时性能问题：如由变量定义，方法调用导致的代码低效问题。</li>
</ul>
<p>安装findBugs这个plugin，在项目菜单中可以找到findBugs</p>
<ol>
<li>添加plugin   <code>apply plugin:&#39;findbugs&#39;</code></li>
<li>定义任务，指定输格式<pre><code>task findbugs(type: FindBugs) {
      ignoreFailures = true
      classes = fileTree(&apos;build/intermediates/classes/debug&apos;)
      source = fileTree(&apos;src&apos;)
      classpath = files()
      effort = &apos;max&apos;
      reports {
          xml.enabled = false
          html.enabled = true
        }
   }    
</code></pre></li>
</ol>
<hr>
<h3 id="3-Checkstyle"><a href="#3-Checkstyle" class="headerlink" title="3.Checkstyle"></a>3.Checkstyle</h3><ul>
<li>Javadoc注释</li>
<li>命名约定，代码规范</li>
<li><p>类设计等</p>
<p>它定义了一系列可用的模块，每一个模块提供了严格程度(强制的，可选的…)可配置的检查规则。规则可以触发通知(notification)，警告(warning)和错误(error)。是定制在团队开发中遵守某些编码规范的工具。<br>使用：</p>
</li>
</ul>
<ol>
<li>添加plugin   <code>apply plugin:&#39;checkstyle&#39;</code></li>
<li>设置CheckStyle版本<pre><code>checkstyle {
    toolVersion &apos;6.1.1&apos;
    showViolations true
}    
</code></pre></li>
<li><p>设置配置文件，定义规范</p>
<pre><code>check.dependsOn &apos;checkstyle&apos;

task checkstyle(type: Checkstyle) {
     source &apos;src&apos;
     configFile file(&quot;config/checkstyle.xml&quot;)
     include &apos;**/*.java&apos;
     exclude &apos;**/gen/**&apos;
     ignoreFailures true

     classpath = files()
}
</code></pre></li>
</ol>
<p>规范也可在Preferences -&gt; Editor -&gt; Java 下制定/导入/导出以供使用</p>
<p> <img src="https://mss.sankuai.com/v1/mss_814dc1610cda4b2e8febd6ea2c809db5/image/1468988087626.png" alt=""></p>
]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[文件分片与断点续传原理与具体实现]]></title>
      <url>http://yoursite.com/2016/08/01/%E6%96%87%E4%BB%B6%E5%88%86%E7%89%87%E4%B8%8E%E6%96%AD%E7%82%B9%E7%BB%AD%E4%BC%A0%E5%8E%9F%E7%90%86%E4%B8%8E%E5%85%B7%E4%BD%93%E5%AE%9E%E7%8E%B0/</url>
      <content type="html"><![CDATA[<p>分片上传：将源文件按长度分为N片，一片一片上传。<br>断点续传：文件在传输过程式中被中断后,在重新传输时,可以从上次的断点处开始传输。<br>HTTP1.1协议（RFC2616）中定义了断点续传相关的HTTP头 Range和Content-Range字段，故实现断点续传就是要能提交Content-Range（返回代码是206）</p>
<h3 id="断点续下载"><a href="#断点续下载" class="headerlink" title="断点续下载"></a>断点续下载</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div></pre></td><td class="code"><pre><div class="line"><span class="comment">//断点续传下载文件</span></div><div class="line">        URL url = <span class="keyword">new</span> URL(<span class="string">"http://www.baidu.com/todo.zip"</span>);</div><div class="line">        HttpURLConnection connection = (HttpURLConnection) url.openConnection();</div><div class="line">        <span class="comment">//设置断点续传的范围</span></div><div class="line">        connection.setRequestProperty(<span class="string">"RANGE"</span>, <span class="string">"bytes=0-20000"</span>);</div><div class="line">        <span class="comment">//获得输入流</span></div><div class="line">        InputStream input = connection.getInputStream();</div><div class="line">        RandomAccessFile accessFile = <span class="keyword">new</span> RandomAccessFile(<span class="string">"todo.zip"</span>, <span class="string">"rw"</span>);</div><div class="line">        <span class="comment">//从bytes指定的位置开始存文件</span></div><div class="line">        <span class="keyword">long</span> pos = <span class="number">2000</span>;</div><div class="line">        <span class="comment">//定位到指定位置</span></div><div class="line">        accessFile.seek(pos);</div><div class="line">        <span class="keyword">byte</span>[] b = <span class="keyword">new</span> <span class="keyword">byte</span>[<span class="number">1024</span>];</div><div class="line">        <span class="keyword">int</span> nRead;</div><div class="line">        <span class="comment">//从输入流中读入字节流，然后写到文件中</span></div><div class="line">        <span class="keyword">while</span> ((nRead = input.read(b, <span class="number">0</span>, <span class="number">1024</span>)) &gt; <span class="number">0</span>) &#123;</div><div class="line">            accessFile.write(b, <span class="number">0</span>, nRead);</div><div class="line">        &#125;</div></pre></td></tr></table></figure>
<p>为防止续传时服务器的文件已经发生了变化，续传数据将出现错误，此时需要重新传输。可以使用Lat-Modified来标识文件的最后修改时间，或者使用ETag头来放置文件的唯一标识，如文件的MD5值。</p>
<h2 id="多线程下载"><a href="#多线程下载" class="headerlink" title="多线程下载"></a>多线程下载</h2><p>将源文件分成N块，开辟N个线程，每个线程传输一块，最后合并所有线程文件。<br><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div><div class="line">61</div><div class="line">62</div><div class="line">63</div><div class="line">64</div><div class="line">65</div><div class="line">66</div><div class="line">67</div><div class="line">68</div><div class="line">69</div><div class="line">70</div><div class="line">71</div><div class="line">72</div><div class="line">73</div><div class="line">74</div><div class="line">75</div><div class="line">76</div><div class="line">77</div><div class="line">78</div><div class="line">79</div><div class="line">80</div><div class="line">81</div><div class="line">82</div><div class="line">83</div><div class="line">84</div><div class="line">85</div><div class="line">86</div><div class="line">87</div><div class="line">88</div><div class="line">89</div><div class="line">90</div><div class="line">91</div><div class="line">92</div><div class="line">93</div><div class="line">94</div><div class="line">95</div><div class="line">96</div><div class="line">97</div><div class="line">98</div><div class="line">99</div><div class="line">100</div><div class="line">101</div><div class="line">102</div><div class="line">103</div><div class="line">104</div><div class="line">105</div><div class="line">106</div><div class="line">107</div><div class="line">108</div><div class="line">109</div><div class="line">110</div><div class="line">111</div><div class="line">112</div><div class="line">113</div><div class="line">114</div><div class="line">115</div><div class="line">116</div><div class="line">117</div><div class="line">118</div><div class="line">119</div><div class="line">120</div><div class="line">121</div><div class="line">122</div><div class="line">123</div><div class="line">124</div><div class="line">125</div><div class="line">126</div><div class="line">127</div><div class="line">128</div><div class="line">129</div><div class="line">130</div><div class="line">131</div><div class="line">132</div><div class="line">133</div><div class="line">134</div><div class="line">135</div><div class="line">136</div><div class="line">137</div><div class="line">138</div><div class="line">139</div><div class="line">140</div><div class="line">141</div><div class="line">142</div><div class="line">143</div><div class="line">144</div><div class="line">145</div><div class="line">146</div><div class="line">147</div><div class="line">148</div><div class="line">149</div><div class="line">150</div><div class="line">151</div><div class="line">152</div><div class="line">153</div><div class="line">154</div><div class="line">155</div><div class="line">156</div><div class="line">157</div><div class="line">158</div><div class="line">159</div><div class="line">160</div><div class="line">161</div><div class="line">162</div><div class="line">163</div><div class="line">164</div><div class="line">165</div><div class="line">166</div><div class="line">167</div><div class="line">168</div><div class="line">169</div><div class="line">170</div><div class="line">171</div><div class="line">172</div><div class="line">173</div><div class="line">174</div><div class="line">175</div><div class="line">176</div><div class="line">177</div><div class="line">178</div><div class="line">179</div><div class="line">180</div><div class="line">181</div><div class="line">182</div><div class="line">183</div><div class="line">184</div><div class="line">185</div><div class="line">186</div><div class="line">187</div><div class="line">188</div><div class="line">189</div><div class="line">190</div><div class="line">191</div><div class="line">192</div><div class="line">193</div><div class="line">194</div><div class="line">195</div><div class="line">196</div><div class="line">197</div><div class="line">198</div><div class="line">199</div><div class="line">200</div><div class="line">201</div><div class="line">202</div><div class="line">203</div><div class="line">204</div><div class="line">205</div><div class="line">206</div><div class="line">207</div><div class="line">208</div></pre></td><td class="code"><pre><div class="line"><span class="comment">/**</span></div><div class="line"> * 断点续传文件下载线程</div><div class="line"> */</div><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">BreakDownloadThread</span> <span class="keyword">extends</span> <span class="title">Thread</span> </span>&#123;</div><div class="line"></div><div class="line">    <span class="keyword">long</span>[] startPos, endPos;</div><div class="line">    SplitDownloadThread[] childThreads;</div><div class="line">    <span class="keyword">long</span> fileLength;</div><div class="line">    <span class="keyword">boolean</span> firstDown = <span class="keyword">true</span>;</div><div class="line">    File tempFile;</div><div class="line">    DataOutputStream output;   <span class="comment">//输出到文件的输出流</span></div><div class="line">    String mUrl;</div><div class="line">    String filePath, fileName;</div><div class="line">    <span class="keyword">boolean</span> stopped  =<span class="keyword">false</span>;</div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="title">BreakDownloadThread</span><span class="params">(String url, String filePath, String fileName, <span class="keyword">int</span> splitCount)</span> </span>&#123;</div><div class="line">        <span class="keyword">this</span>.mUrl = url;</div><div class="line">        <span class="keyword">this</span>.filePath = filePath;</div><div class="line">        <span class="keyword">this</span>.fileName = fileName;</div><div class="line"></div><div class="line">        tempFile = <span class="keyword">new</span> File(filePath + File.separator + fileName + <span class="string">".dat"</span>);</div><div class="line">        <span class="keyword">if</span> (tempFile.exists()) &#123;</div><div class="line">            firstDown = <span class="keyword">false</span>;</div><div class="line">            <span class="comment">//读取上次下载到的位置</span></div><div class="line">            readPos();</div><div class="line">        &#125; <span class="keyword">else</span> &#123;</div><div class="line">            startPos = <span class="keyword">new</span> <span class="keyword">long</span>[splitCount];</div><div class="line">            endPos = <span class="keyword">new</span> <span class="keyword">long</span>[splitCount];</div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="meta">@Override</span></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">run</span><span class="params">()</span> </span>&#123;</div><div class="line">        <span class="keyword">try</span> &#123;</div><div class="line">            <span class="keyword">if</span> (firstDown) &#123; <span class="comment">//第一次下载先获取一下文件的大小</span></div><div class="line">                fileLength = getFileSize();</div><div class="line">                <span class="keyword">if</span> (fileLength == -<span class="number">1</span>) &#123;</div><div class="line">                    System.err.println(<span class="string">"File   Length   is   not   known!"</span>);</div><div class="line">                &#125; <span class="keyword">else</span> <span class="keyword">if</span> (fileLength == -<span class="number">2</span>) &#123;</div><div class="line">                    System.err.println(<span class="string">"File   is   not   access!"</span>);</div><div class="line">                &#125; <span class="keyword">else</span> &#123;</div><div class="line">                    <span class="comment">// 设置各段要下载的文件位置</span></div><div class="line">                    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; startPos.length; i++) &#123;</div><div class="line">                        startPos[i] = (<span class="keyword">long</span>) (i * (fileLength / startPos.length));</div><div class="line">                    &#125;</div><div class="line">                    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; endPos.length - <span class="number">1</span>; i++) &#123;</div><div class="line">                        endPos[i] = startPos[i + <span class="number">1</span>];</div><div class="line">                    &#125;</div><div class="line">                    endPos[endPos.length - <span class="number">1</span>] = fileLength;</div><div class="line">                &#125;</div><div class="line">            &#125;</div><div class="line"></div><div class="line">            <span class="comment">//启动子线程</span></div><div class="line">            childThreads = <span class="keyword">new</span> SplitDownloadThread[startPos.length];</div><div class="line">            <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; startPos.length; i++) &#123;</div><div class="line">                <span class="comment">//int threadID, String url, String name, long startPos, long endPos</span></div><div class="line">                childThreads[i] = <span class="keyword">new</span> SplitDownloadThread(i, mUrl, filePath + File.separator + fileName, startPos[i], endPos[i]);</div><div class="line">                childThreads[i].start();</div><div class="line">            &#125;</div><div class="line"></div><div class="line">            <span class="comment">//等待子线程结束</span></div><div class="line">            <span class="comment">//是否结束while循环</span></div><div class="line">            <span class="keyword">boolean</span> breakWhile = <span class="keyword">false</span>;</div><div class="line"></div><div class="line">            <span class="keyword">while</span> (!stopped) &#123;</div><div class="line">                writePos();</div><div class="line"></div><div class="line">                Thread.sleep(<span class="number">500</span>);</div><div class="line">                breakWhile = <span class="keyword">true</span>;</div><div class="line"></div><div class="line"></div><div class="line">                <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; startPos.length; i++) &#123;</div><div class="line">                    <span class="keyword">if</span> (!childThreads[i].downOver) &#123;</div><div class="line">                        breakWhile = <span class="keyword">false</span>;</div><div class="line">                        <span class="keyword">break</span>;</div><div class="line">                    &#125;</div><div class="line">                &#125;</div><div class="line">                <span class="keyword">if</span> (breakWhile)  <span class="keyword">break</span>;</div><div class="line">            &#125;</div><div class="line">            System.out.println(<span class="string">"文件下载结束！"</span>);</div><div class="line">        &#125; <span class="keyword">catch</span> (Exception e) &#123;</div><div class="line">            e.printStackTrace();</div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="comment">//获得文件长度</span></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">long</span> <span class="title">getFileSize</span><span class="params">()</span> </span>&#123;</div><div class="line">        <span class="keyword">int</span> nFileLength = -<span class="number">1</span>;</div><div class="line">        <span class="keyword">try</span> &#123;</div><div class="line">            URL url = <span class="keyword">new</span> URL(mUrl);</div><div class="line">            HttpURLConnection httpConnection = (HttpURLConnection) url.openConnection();</div><div class="line"></div><div class="line">            <span class="keyword">int</span> responseCode = httpConnection.getResponseCode();</div><div class="line">            <span class="keyword">if</span> (responseCode &gt;= <span class="number">400</span>) &#123;</div><div class="line">                <span class="keyword">return</span> -<span class="number">2</span>;</div><div class="line">            &#125;</div><div class="line"></div><div class="line">            String sHeader;</div><div class="line">            <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; ; i++) &#123;</div><div class="line">                sHeader = httpConnection.getHeaderFieldKey(i);</div><div class="line">                <span class="keyword">if</span> (sHeader != <span class="keyword">null</span>) &#123;</div><div class="line">                    <span class="keyword">if</span> (sHeader.equals(<span class="string">"Content-Length"</span>)) &#123;</div><div class="line">                        nFileLength = Integer.parseInt(httpConnection.getHeaderField(sHeader));</div><div class="line">                        <span class="keyword">break</span>;</div><div class="line">                    &#125;</div><div class="line">                &#125; <span class="keyword">else</span></div><div class="line">                    <span class="keyword">break</span>;</div><div class="line">            &#125;</div><div class="line">        &#125; <span class="keyword">catch</span> (IOException e) &#123;</div><div class="line">            e.printStackTrace();</div><div class="line">        &#125; <span class="keyword">catch</span> (Exception e) &#123;</div><div class="line">            e.printStackTrace();</div><div class="line">        &#125;</div><div class="line"></div><div class="line">        <span class="keyword">return</span> nFileLength;</div><div class="line">    &#125;</div><div class="line"></div><div class="line"></div><div class="line">    <span class="comment">//保存下载信息（文件指针位置）</span></div><div class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">writePos</span><span class="params">()</span> </span>&#123;</div><div class="line">        <span class="keyword">try</span> &#123;</div><div class="line">            output = <span class="keyword">new</span> DataOutputStream(<span class="keyword">new</span> FileOutputStream(tempFile));</div><div class="line">            output.writeInt(startPos.length);</div><div class="line">            <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; startPos.length; i++) &#123;</div><div class="line">                output.writeLong(childThreads[i].startPos);</div><div class="line">                output.writeLong(childThreads[i].endPos);</div><div class="line">            &#125;</div><div class="line">            output.close();</div><div class="line">        &#125; <span class="keyword">catch</span> (IOException e) &#123;</div><div class="line">            e.printStackTrace();</div><div class="line">        &#125; <span class="keyword">catch</span> (Exception e) &#123;</div><div class="line">            e.printStackTrace();</div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="comment">//读取保存的下载信息（文件指针位置）</span></div><div class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">readPos</span><span class="params">()</span> </span>&#123;</div><div class="line">        <span class="keyword">try</span> &#123;</div><div class="line">            DataInputStream input = <span class="keyword">new</span> DataInputStream(<span class="keyword">new</span> FileInputStream(tempFile));</div><div class="line">            <span class="keyword">int</span> nCount = input.readInt();</div><div class="line">            startPos = <span class="keyword">new</span> <span class="keyword">long</span>[nCount];</div><div class="line">            endPos = <span class="keyword">new</span> <span class="keyword">long</span>[nCount];</div><div class="line">            <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; startPos.length; i++) &#123;</div><div class="line">                startPos[i] = input.readLong();</div><div class="line">                endPos[i] = input.readLong();</div><div class="line">            &#125;</div><div class="line">            input.close();</div><div class="line">        &#125; <span class="keyword">catch</span> (IOException e) &#123;</div><div class="line">            e.printStackTrace();</div><div class="line">        &#125; <span class="keyword">catch</span> (Exception e) &#123;</div><div class="line">            e.printStackTrace();</div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="comment">//分片下载的小线程</span></div><div class="line">    <span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">SplitDownloadThread</span> <span class="keyword">extends</span> <span class="title">Thread</span> </span>&#123;</div><div class="line">        String mUrl;</div><div class="line">        <span class="keyword">long</span> startPos, endPos;</div><div class="line">        <span class="keyword">int</span> threadID;</div><div class="line">        <span class="keyword">boolean</span> stopped = <span class="keyword">false</span>, downOver = <span class="keyword">false</span>;</div><div class="line"></div><div class="line">        RandomAccessFile accessFile;</div><div class="line"></div><div class="line">        <span class="function"><span class="keyword">public</span> <span class="title">SplitDownloadThread</span><span class="params">(<span class="keyword">int</span> threadID, String url, String name, <span class="keyword">long</span> startPos, <span class="keyword">long</span> endPos)</span> <span class="keyword">throws</span> IOException </span>&#123;</div><div class="line">            <span class="keyword">this</span>.threadID = threadID;</div><div class="line">            <span class="keyword">this</span>.mUrl = url;</div><div class="line">            <span class="keyword">this</span>.startPos = startPos;</div><div class="line">            <span class="keyword">this</span>.endPos = endPos;</div><div class="line">            accessFile = <span class="keyword">new</span> RandomAccessFile(name, <span class="string">"rw"</span>);</div><div class="line">            accessFile.seek(startPos);</div><div class="line">        &#125;</div><div class="line"></div><div class="line">        <span class="meta">@Override</span></div><div class="line">        <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">run</span><span class="params">()</span> </span>&#123;</div><div class="line">            <span class="keyword">while</span> (startPos &lt; endPos &amp;&amp; !stopped) &#123;</div><div class="line">                <span class="keyword">try</span> &#123;</div><div class="line">                    URL url = <span class="keyword">new</span> URL(mUrl);</div><div class="line">                    HttpURLConnection httpConnection = (HttpURLConnection) url.openConnection();</div><div class="line">                    String sProperty = <span class="string">"bytes="</span> + startPos + <span class="string">"-"</span>;</div><div class="line">                    httpConnection.setRequestProperty(<span class="string">"RANGE"</span>, sProperty);</div><div class="line">                    InputStream input = httpConnection.getInputStream();</div><div class="line"></div><div class="line">                    <span class="keyword">byte</span>[] b = <span class="keyword">new</span> <span class="keyword">byte</span>[<span class="number">1024</span>];</div><div class="line">                    <span class="keyword">int</span> nRead;</div><div class="line">                    <span class="comment">//下载到endPos结束该线程</span></div><div class="line">                    <span class="keyword">while</span> ((nRead = input.read(b, <span class="number">0</span>, <span class="number">1024</span>)) &gt; <span class="number">0</span> &amp;&amp; startPos &lt; endPos &amp;&amp; !stopped) &#123;</div><div class="line">                        startPos += write(b, <span class="number">0</span>, nRead);</div><div class="line">                    &#125;</div><div class="line"></div><div class="line">                    downOver = <span class="keyword">true</span>;</div><div class="line">                &#125; <span class="keyword">catch</span> (Exception e) &#123;</div><div class="line">                    e.printStackTrace();</div><div class="line">                &#125;</div><div class="line">            &#125;</div><div class="line">        &#125;</div><div class="line"></div><div class="line">        <span class="function"><span class="keyword">public</span> <span class="keyword">synchronized</span> <span class="keyword">int</span> <span class="title">write</span><span class="params">(<span class="keyword">byte</span>[] b, <span class="keyword">int</span> nStart, <span class="keyword">int</span> nLen)</span> </span>&#123;</div><div class="line">            <span class="keyword">int</span> n = -<span class="number">1</span>;</div><div class="line">            <span class="keyword">try</span> &#123;</div><div class="line">                accessFile.write(b, nStart, nLen);</div><div class="line">                n = nLen;</div><div class="line">            &#125; <span class="keyword">catch</span> (IOException e) &#123;</div><div class="line">                e.printStackTrace();</div><div class="line">            &#125;</div><div class="line">            <span class="keyword">return</span> n;</div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<h3 id="断点续上传"><a href="#断点续上传" class="headerlink" title="断点续上传"></a>断点续上传</h3><p><a href="http://developer.qiniu.com/docs/v6/api/overview/up/chunked-upload.html" target="_blank" rel="external">分片上传（断点续上传）</a></p>
]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[Android进程间通信AIDL]]></title>
      <url>http://yoursite.com/2016/08/01/Android%E8%BF%9B%E7%A8%8B%E9%97%B4%E9%80%9A%E4%BF%A1AIDL(Android%E6%8E%A5%E5%8F%A3%E5%AE%9A%E4%B9%89%E8%AF%AD%E8%A8%80)/</url>
      <content type="html"><![CDATA[<p>AIDL即Android Interface Definition Language，用于实现Android进程间通信(IPC)。</p>
<h2 id="两个App间通信的代码实现"><a href="#两个App间通信的代码实现" class="headerlink" title="两个App间通信的代码实现"></a>两个App间通信的代码实现</h2><h3 id="1-定义AIDL文件"><a href="#1-定义AIDL文件" class="headerlink" title="1.定义AIDL文件"></a>1.定义AIDL文件</h3><p>由于进程之间的通信信息需要双向转换，所以android采用代理类在背后实现了信息的双向转换，代理类由android编译器生成，对开发人员来说是透明的。<br><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line"><span class="comment">// IRemoteService.aidl</span></div><div class="line"><span class="keyword">package</span> com.lcodecore.myapplication;</div><div class="line"></div><div class="line"><span class="class"><span class="keyword">interface</span> <span class="title">IRemoteService</span> </span>&#123;</div><div class="line">    <span class="function"><span class="keyword">void</span> <span class="title">basicTypes</span><span class="params">(<span class="keyword">int</span> anInt, <span class="keyword">long</span> aLong, <span class="keyword">boolean</span> aBoolean, <span class="keyword">float</span> aFloat,</span></span></div><div class="line">            <span class="keyword">double</span> aDouble, String aString);</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<p>对于非基本数据类型，也不是String和CharSequence类型的，需要有方向指示，包括in、out和inout，in表示由客户端设置，out表示由服务端设置，inout是两者均可设置。<br><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line"><span class="class"><span class="keyword">interface</span> <span class="title">IMyService</span> </span>&#123;</div><div class="line">        <span class="function"><span class="keyword">void</span> <span class="title">savePersonInfo</span><span class="params">(in Person person)</span></span>;</div><div class="line">        <span class="function">List&lt;Person&gt; <span class="title">getAllPerson</span><span class="params">()</span></span>;</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<p>编译后会自动生成IRemoteService.java文件。<br>AIDL定义规则：</p>
<ol>
<li>接口名和aidl文件名相同。</li>
<li>接口和方法前不用加访问权限修饰符public,private,protected等,也不能用final,static。</li>
<li>Aidl默认支持的类型包话java基本类型（int、long、boolean等）和（String、List、Map、CharSequence，使用这些类型时不需要import声明。对于List和Map中的元素类型必须是Aidl支持的类型。 如果使用自定义类型作为参数或返回值，自定义类型必须实现Parcelable接口。</li>
<li>自定义类型和AIDL生成的其它接口类型在aidl描述文件中，应该显式import，即便在该类和定义的包在同一个包中。</li>
<li>在aidl文件中所有非Java基本类型参数必须加上in、out、inout标记，<br>以指明参数是输入参数、输出参数还是输入输出参数。</li>
<li>Java原始类型默认的标记为in,不能为其它标记。</li>
</ol>
<h3 id="2-定义Service，在onBind方法中返回IRemoteService-Stub的实现"><a href="#2-定义Service，在onBind方法中返回IRemoteService-Stub的实现" class="headerlink" title="2.定义Service，在onBind方法中返回IRemoteService.Stub的实现"></a>2.定义Service，在onBind方法中返回IRemoteService.Stub的实现</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">DDService</span> <span class="keyword">extends</span> <span class="title">Service</span> </span>&#123;</div><div class="line">    <span class="meta">@Override</span></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">onCreate</span><span class="params">()</span> </span>&#123;</div><div class="line">        <span class="keyword">super</span>.onCreate();</div><div class="line">        System.out.println(<span class="string">"DDService onCreate........"</span> + <span class="string">"Thread: "</span> + Thread.currentThread().getName());</div><div class="line">    &#125;</div><div class="line">    <span class="meta">@Override</span></div><div class="line">    <span class="function"><span class="keyword">public</span> IBinder <span class="title">onBind</span><span class="params">(Intent arg0)</span> </span>&#123;</div><div class="line">        <span class="keyword">return</span> mBinder;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="keyword">private</span> <span class="keyword">final</span> IRemoteService.Stub mBinder = <span class="keyword">new</span> IRemoteService.Stub() &#123;</div><div class="line"></div><div class="line">        <span class="meta">@Override</span></div><div class="line">        <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">basicTypes</span><span class="params">(<span class="keyword">int</span> anInt, <span class="keyword">long</span> aLong, <span class="keyword">boolean</span> aBoolean, <span class="keyword">float</span> aFloat, <span class="keyword">double</span> aDouble, String aString)</span> <span class="keyword">throws</span> RemoteException </span>&#123;</div><div class="line">            System.out.println(<span class="string">"Thread: "</span> + Thread.currentThread().getName());</div><div class="line">            System.out.println(<span class="string">"basicTypes aDouble: "</span> + aDouble +<span class="string">" anInt: "</span> + anInt+<span class="string">" aBoolean "</span> + aBoolean+<span class="string">" aString "</span> + aString);</div><div class="line">        &#125;</div><div class="line">    &#125;;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>Stub继承自Binder，即远程服务特别在返回了实现了AIDL接口的IBinder对象。<br>然后在manifest.xml文件中声明：<br><figure class="highlight xml"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line"><span class="tag">&lt;<span class="name">service</span> <span class="attr">android:name</span>=<span class="string">".DDService"</span> <span class="attr">android:process</span>=<span class="string">":remote"</span>&gt;</span></div><div class="line">            <span class="tag">&lt;<span class="name">intent-filter</span>&gt;</span></div><div class="line">                <span class="tag">&lt;<span class="name">action</span> <span class="attr">android:name</span>=<span class="string">"android.intent.action.AIDLService"</span> /&gt;</span></div><div class="line">                <span class="tag">&lt;<span class="name">category</span> <span class="attr">android:name</span>=<span class="string">"android.intent.category.DEFAULT"</span> /&gt;</span></div><div class="line">            <span class="tag">&lt;/<span class="name">intent-filter</span>&gt;</span></div><div class="line"> <span class="tag">&lt;/<span class="name">service</span>&gt;</span></div></pre></td></tr></table></figure></p>
<p>android:process=”:remote”，代表在应用程序里，当需要该service时，会自动创建新的进程。而如果是android:process=”remote”，没有“:”号的，则创建全局进程，不同的应用程序共享该进程。</p>
<p>服务器端的代码就完成了。</p>
<h3 id="3-新建客户端工程，定义一个与服务器端路径相同的IRemoteService-aidl文件"><a href="#3-新建客户端工程，定义一个与服务器端路径相同的IRemoteService-aidl文件" class="headerlink" title="3.新建客户端工程，定义一个与服务器端路径相同的IRemoteService.aidl文件"></a>3.新建客户端工程，定义一个与服务器端路径相同的IRemoteService.aidl文件</h3><h3 id="4-实现ServiceConnection并连接服务"><a href="#4-实现ServiceConnection并连接服务" class="headerlink" title="4.实现ServiceConnection并连接服务"></a>4.实现ServiceConnection并连接服务</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div></pre></td><td class="code"><pre><div class="line">ServiceConnection conn = <span class="keyword">new</span> ServiceConnection() &#123;</div><div class="line">            <span class="meta">@Override</span></div><div class="line">            <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">onServiceConnected</span><span class="params">(ComponentName name, IBinder service)</span> </span>&#123;</div><div class="line">                IRemoteService remoteService = IRemoteService.Stub.asInterface(service);</div><div class="line">                <span class="keyword">try</span> &#123;</div><div class="line">                    remoteService.basicTypes(<span class="number">1</span>,<span class="number">1</span>,<span class="keyword">true</span>,<span class="number">1f</span>,<span class="number">1</span>d,<span class="string">"测试"</span>);</div><div class="line">                &#125; <span class="keyword">catch</span> (RemoteException e) &#123;</div><div class="line">                    e.printStackTrace();</div><div class="line">                &#125;</div><div class="line">            &#125;</div><div class="line"></div><div class="line">            <span class="meta">@Override</span></div><div class="line">            <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">onServiceDisconnected</span><span class="params">(ComponentName name)</span> </span>&#123;&#125;</div><div class="line">        &#125;;</div><div class="line"></div><div class="line">Intent intent = <span class="keyword">new</span> Intent(android.intent.action.AIDLService); <span class="comment">//此处为隐式调用</span></div><div class="line">bindService(conn);</div></pre></td></tr></table></figure>
<hr>
<h2 id="内部原理"><a href="#内部原理" class="headerlink" title="内部原理"></a>内部原理</h2><p>Android进程间通信需要使用Binder机制，Binder作为一种进程间通信机制，负责提供远程调用的功能（RPC），它的系统组件主要包括四种：Client, Server, ServiceManager, Binder Driver。</p>
<p><img src="http://static.codeceo.com/images/2015/09/7152b353514b827e6bf0dbbc55f2e26a.gif" alt=""></p>
<ul>
<li>Client, Server, ServiceManager运行在系统的用户态，而Binder Driver运行在内核态。</li>
<li>为了完成Client端到Server端的通信任务，用户空间的需要操作Binder Driver提供的/dev/binder文件来完成交互。</li>
<li>ServiceManager负责管理Server并向Client端提供一个Server的代理接口（proxy）。通过代理接口中定义的方法，Client端就可以使用Server端提供的服务了。</li>
</ul>
<p>整个过程为：</p>
<ol>
<li>Client端调用代理接口的方法，将Client的参数打包为parcel对象发送给内核空间中BinderDriver；</li>
<li>Server端读取到BinderDriver中的请求数据，将parcel对象解包并处理；</li>
<li>处理好后，将处理结果打包返回给BinderDriver，再交给Client端。</li>
</ol>
<h2 id="参考博客"><a href="#参考博客" class="headerlink" title="参考博客"></a>参考博客</h2><p><a href="http://www.codeceo.com/article/aidl-android-binder.html" target="_blank" rel="external">从AIDL开始谈Android进程间Binder通信机制</a></p>
]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[Android开发中的6大设计原则]]></title>
      <url>http://yoursite.com/2016/04/06/android%E4%B8%AD%E7%9A%846%E5%A4%A7%E8%AE%BE%E8%AE%A1%E5%8E%9F%E5%88%99/</url>
      <content type="html"><![CDATA[<h2 id="单一职责原理-SRP"><a href="#单一职责原理-SRP" class="headerlink" title="单一职责原理(SRP)"></a>单一职责原理(SRP)</h2><p>应该有且只有一个原因引起类的变更。</p>
<p>对于一个User类，应将用户的信息抽取成一个BO(Bussiness Object 业务对象)和一个Biz(Bussiness Logic 业务逻辑)，如IUserBO和IUserBiz接口，IUserBO负责收集和反馈用户的属性信息，IUserBiz负责用户信息的维护和变更。</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line">IUserInfo userinfo = <span class="keyword">new</span> UserInfo();</div><div class="line">IUserBo userBo = (IUserBO)userinfo;</div><div class="line">userBo.setName(<span class="string">"xiaowang"</span>):</div><div class="line">IUerBiz userBiz = (IUserBiz)userinfo;</div><div class="line">userBiz.deleteUser();</div></pre></td></tr></table></figure>
<p>应保证接口做到单一职责，类的设计尽量保证较少的职责。</p>
<h2 id="里氏替换原则-LSP"><a href="#里氏替换原则-LSP" class="headerlink" title="里氏替换原则(LSP)"></a>里氏替换原则(LSP)</h2><p>所有引用基类的的地方必须能透明地使用子类的对象。(即父类能出现的地方子类都能出现)</p>
<p>避免子类的个性，防止业务的混乱。</p>
<h2 id="依赖倒置原则-DIP"><a href="#依赖倒置原则-DIP" class="headerlink" title="依赖倒置原则(DIP)"></a>依赖倒置原则(DIP)</h2><ul>
<li>高层模块不应依赖于低层模块，两者都应该依赖其抽象(模块间的依赖通过抽象发生，实现类之间不发生直接的依赖关系)</li>
<li>抽象不应依赖于抽象细节(接口不应依赖于实现)</li>
<li>细节应该依赖抽象</li>
</ul>
<p>减少代码及模块间的耦合，提高了系统的稳定性。这个原则真是感觉棒棒哒！</p>
<h2 id="接口隔离原则"><a href="#接口隔离原则" class="headerlink" title="接口隔离原则"></a>接口隔离原则</h2><ul>
<li>接口须细化，客户端不应该依赖它不需要的接口</li>
<li>类间的依赖应该建立在最小的接口上</li>
</ul>
<h2 id="迪米特法则-LoD"><a href="#迪米特法则-LoD" class="headerlink" title="迪米特法则(LoD)"></a>迪米特法则(LoD)</h2><p>一个对象应该对其它对象有最少的了解。其核心观念即类间解耦，弱耦合</p>
<h2 id="开闭原则"><a href="#开闭原则" class="headerlink" title="开闭原则"></a>开闭原则</h2><p>一个软件实体(模块，类，方法)应该通过扩展实现自身变化，而不是通过修改已有的代码</p>
<p>提高复用性和可维护性</p>
]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[android中的设计模式]]></title>
      <url>http://yoursite.com/2016/03/15/android%E4%B8%AD%E7%9A%84%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F/</url>
      <content type="html"><![CDATA[<h2 id="外观模式-facade"><a href="#外观模式-facade" class="headerlink" title="外观模式(facade)"></a>外观模式(facade)</h2><p>要求一个子系统的外部与其内部的通信必须通过一个统一的对象进行。它提供一个高层次的接口，使得子系统更易于使用。</p>
<p>Android源码中Context是一个抽象类，使用了外观模式，它只是定义了抽象接口，真正的实现在ContextImpl类中。<br><a id="more"></a></p>
<ol>
<li>在应用启动时，首先会fork一个子进程，并且调用ActivityThread.main方法启动该进程。ActivityThread又会构建Application对象，然后和Activity、ContextImpl关联起来，然后再调用Activity的onCreate、onStart、onResume函数使Activity运行起来。</li>
<li>Activity启动之后，Android给我们提供了操作系统服务的统一入口，也就是Activity本身。这些工作并不是Activity自己实现的，而是将操作委托给Activity父类ContextThemeWrapper的mBase对象，这个对象的实现类就是ContextImpl。</li>
<li>Activity的ContextImpl中有许多AlarmManager,PowerManager, PackageManager等，并实现了sendBroadcast()、startActivity()等方法。</li>
<li>ContextImpl封装了这些功能，使得用户根本不需要知晓Instrumentation相关的信息，直接使用相关方法即可完成相应的工作</li>
</ol>
<h4 id="优点"><a href="#优点" class="headerlink" title="优点"></a>优点</h4><ul>
<li>使用方便，使用外观模式客户端完全不需要知道子系统的实现过程；</li>
<li>降低客户端与子系统的耦合；</li>
<li>更好的划分访问层次；</li>
</ul>
<h4 id="缺点"><a href="#缺点" class="headerlink" title="缺点"></a>缺点</h4><ul>
<li>减少了可变性和灵活性；</li>
<li>在不引入抽象外观类的情况下，增加新的子系统可能需要修改外观类或客户端的源代码，违背了“开闭原则”；</li>
</ul>
<h2 id="桥接模式-bridge"><a href="#桥接模式-bridge" class="headerlink" title="桥接模式(bridge)"></a>桥接模式(bridge)</h2><p>将抽象部分与实现部分分离，使它们都可以独立的变化。</p>
<p><img src="http://img.blog.csdn.net/20150322120730408" alt="uml"></p>
<h3 id="角色介绍"><a href="#角色介绍" class="headerlink" title="角色介绍"></a>角色介绍</h3><ul>
<li>抽象化(Abstraction)角色：抽象化给出的定义，并保存一个对实现化对象的引用。<br>修正抽象化(Refined Abstraction)角色：扩展抽象化角色，改变和修正父类对抽象化的定义。</li>
<li>实现化(Implementor)角色：这个角色给出实现化角色的接口，但不给出具体的实现。必须指出的是，这个接 口不一定和抽象化角色的接口定义相同，实际上，这两个接口可以非常不一样。实现当只给出底层操作，而抽象化角色应当只给出基于底层操作的更高一化角色应层的操作。</li>
<li>具体实现化(ConcreteImplementor)角色：这个角色给出实现化角色接口的具体实现。</li>
</ul>
<p>ListView和BaseAdpater就是Bridge模式</p>
<p><img src="http://img.blog.csdn.net/20150322120809221" alt="uml"></p>
<p>试想一下，视图的排列方式是无穷尽，是人们每个人开发的视图也是无穷尽的。而Android把最常用用的展现方式全部都封装了出来，而在实现角色通过Adapter模式来应变无穷无尽的视图需要。</p>
<h4 id="优点-1"><a href="#优点-1" class="headerlink" title="优点"></a>优点</h4><p>实现与使用实现的对象解耦，提供了可扩展性，客户对象无需担心操作的实现问题。 如果你采用了bridge模式，在处理新的实现将会非常容易。你只需定义一个新的具体实现类，并且实现它就好了，不需要修改任何其他的东西。但是如果你出现了一个新的具体情况，需要对实现进行修改时，就得先修改抽象的接口，再对其派生类进行修改，但是这种修改只会存在于局部,并且这种修改将变化的英雄控制在局部，并且降低了出现副作用的风险，而且类之间的关系十分清晰，如何实现一目了然。</p>
<h2 id="Builder模式"><a href="#Builder模式" class="headerlink" title="Builder模式"></a>Builder模式</h2><p>将一个复杂对象的构建与它的表示分离，使得同样的构建过程可以创建不同的表示。</p>
<h3 id="模式的使用场景"><a href="#模式的使用场景" class="headerlink" title="模式的使用场景"></a>模式的使用场景</h3><ol>
<li>相同的方法，不同的执行顺序，产生不同的事件结果时；   </li>
<li>多个部件或零件，都可以装配到一个对象中，但是产生的运行结果又不相同时；</li>
<li>产品类非常复杂，或者产品类中的调用顺序不同产生了不同的效能，这个时候使用建造者模式非常合适；</li>
</ol>
<p>AlertDialog使用了Builder模式。通过Builder来设置AlertDialog中的title, message, button等参数， 这些参数都存储在类型为AlertController.AlertParams的成员变量P中，AlertController.AlertParams中包含了与之对应的成员变量。在调用Builder类的create函数时才创建AlertDialog, 并且将Builder成员变量P中保存的参数应用到AlertDialog的mAlert对象中。</p>
<h4 id="优点-2"><a href="#优点-2" class="headerlink" title="优点"></a>优点</h4><ul>
<li>良好的封装性， 使用建造者模式可以使客户端不必知道产品内部组成的细节；</li>
<li>建造者独立，容易扩展；</li>
<li>在对象创建过程中会使用到系统中的一些其它对象，这些对象在产品对象的创建过程中不易得到。</li>
</ul>
<h4 id="缺点-1"><a href="#缺点-1" class="headerlink" title="缺点"></a>缺点</h4><ul>
<li>会产生多余的Builder对象以及Director对象，消耗内存；</li>
<li>对象的构建过程暴露。 </li>
</ul>
<h2 id="责任链模式-chain-of-responsibility"><a href="#责任链模式-chain-of-responsibility" class="headerlink" title="责任链模式(chain of responsibility)"></a>责任链模式(chain of responsibility)</h2><p>一个请求沿着一条“链”传递，直到该“链”上的某个处理者处理它为止。</p>
<p><img src="http://e.hiphotos.baidu.com/baike/c0%3Dbaike80%2C5%2C5%2C80%2C26/sign=962b28214dfbfbedc8543e2d19999c53/b7003af33a87e950f9ae4a7216385343fbf2b477.jpg" alt="UML"></p>
<p>Android中关于责任链模式比较明显的体现就是在事件分发过程中对事件的投递，其实严格来说，事件投递的模式并不是严格的责任链模式，但是其是责任链模式的一种变种体现。</p>
<h4 id="优点-3"><a href="#优点-3" class="headerlink" title="优点"></a>优点</h4><ul>
<li>责任链模式可以对请求者和处理者关系的解耦提高代码的灵活性。</li>
</ul>
<h4 id="缺点-2"><a href="#缺点-2" class="headerlink" title="缺点"></a>缺点</h4><ul>
<li>责任链模式的最大缺点是对链中责任人的遍历，如果责任人太多那么遍历必定会影响性能，特别是在一些递归调用中，要慎重。</li>
</ul>
<h2 id="命令模式-command-（TODO-没看懂）"><a href="#命令模式-command-（TODO-没看懂）" class="headerlink" title="命令模式(command)（TODO 没看懂）"></a>命令模式(command)（TODO 没看懂）</h2><p>将一个请求封装成一个对象，从而使你可用不同的请求对客户进行参数化，对请求排队或记录请求日志，以及支持可撤销的操作。</p>
<h3 id="模式的使用场景-1"><a href="#模式的使用场景-1" class="headerlink" title="模式的使用场景"></a>模式的使用场景</h3><ol>
<li>系统需要将请求调用者和请求接收者解耦，使得调用者和接收者不直接交互。</li>
<li>系统需要在不同的时间指定请求、将请求排队和执行请求。</li>
<li>系统需要支持命令的撤销(Undo)操作和恢复(Redo)操作。</li>
<li>系统需要将一组操作组合在一起，即支持宏命令。</li>
</ol>
<p><img src="http://img.blog.csdn.net/20130612214140046" alt="uml"></p>
<h3 id="角色介绍-1"><a href="#角色介绍-1" class="headerlink" title="角色介绍"></a>角色介绍</h3><ul>
<li><p>命令角色（Command）：定义命令的接口，声明具体命令类需要执行的方法。这是一个抽象角色。</p>
</li>
<li><p>具体命令角色（ConcreteCommand）：命令接口的具体实现对象，通常会持有接收者，并调用接收者的功能来完成命令要执行的操作。</p>
</li>
<li><p>调用者角色（Invoker）：负责调用命令对象执行请求，通常会持有命令对象（可以持有多个命令对象）。Invoker是Client真正触发命令并要求命令执行相应操作的地方（使用命令对象的入口）。</p>
</li>
<li><p>接受者角色（Receiver）：Receiver是真正执行命令的对象。任何类都可能成为一个接收者，只要它能够实现命令要求实现的相应功能。</p>
</li>
<li><p>客户角色（Client）：Client可以创建具体的命令对象，并且设置命令对象的接收者。Tips：不能把Clinet理解为我们平常说的客户端，这里的Client是一个组装命令对象和接受者对象的角色，或者你把它理解为一个装配者。</p>
</li>
</ul>
<p>命令模式其实就是对命令进行封装，将命令请求者和命令执行者的责任分离开来实现松耦合。</p>
<ul>
<li>每一个命令都是一个操作：请求的一方发出请求，要求执行一个操作；接收的一方收到请求，并执行操作。</li>
<li>命令模式允许请求的一方和接收的一方独立开来，使得请求的一方不必知道接收请求的一方的接口，更不必知道请求是怎么被接收，以及操作是否被执行、何时被执行，以及是怎么被执行的。</li>
<li>命令模式使请求本身成为一个对象，这个对象和其他对象一样可以被存储和传递。</li>
<li>命令模式的关键在于引入了抽象命令接口，且发送者针对抽象命令接口编程，只有实现了抽象命令接口的具体命令才能与接收者相关联。</li>
</ul>
<p>Android中的Runnable：客户端只需要new Thread(new Runnable(){}).start()就开始执行一系列相关的请求，这些请求大部分都是实现Runnable接口的匿名类。</p>
<h4 id="优点-4"><a href="#优点-4" class="headerlink" title="优点"></a>优点</h4><ol>
<li>降低对象之间的耦合度。</li>
<li>新的命令可以很容易地加入到系统中。</li>
<li>可以比较容易地设计一个组合命令。</li>
<li>调用同一方法实现不同的功能</li>
</ol>
<h4 id="缺点-3"><a href="#缺点-3" class="headerlink" title="缺点"></a>缺点</h4><p>使用命令模式可能会导致某些系统有过多的具体命令类。因为针对每一个命令都需要设计一个具体命令类，因此某些系统可能需要大量具体命令类，这将影响命令模式的使用。<br>比如上面的PeopleBean的属性增加，Receiver针对PeopleBean一个属性一个执行方法，一个Command的实现可以调用Receiver的一个执行方法，由此得需要设计多少个具体命令类呀！！</p>
<h2 id="组合模式-composite"><a href="#组合模式-composite" class="headerlink" title="组合模式(composite)"></a>组合模式(composite)</h2><p>又叫作部分-整体模式，它使我们树型结构的问题中，模糊了简单元素和复杂元素的概念，客户程序可以向处理简单元素一样来处理复杂元素,从而使得客户程序与复杂元素的内部结构解耦。 GoF在《设计模式》一书中这样定义组合模式：将对象组合成树形结构以表示“部分-整体”的层次结构。使得用户对单个对象和组合对象的使用具有一致性。<br><img src="http://belial.me/wp-content/uploads/2015/03/QQ截图20150318225518.png" alt="组合模式通用类图"></p>
<h3 id="模式的使用场景-2"><a href="#模式的使用场景-2" class="headerlink" title="模式的使用场景"></a>模式的使用场景</h3><ul>
<li>表示对象的部分-整体层次结构。</li>
<li>从一个整体中能够独立出部分模块或功能的场景。</li>
</ul>
<p>Adnroid系统中采用组合模式的组合视图类图。<br><img src="http://belial.me/wp-content/uploads/2015/03/QQ截图20150315115212.png" alt="enter image description here"></p>
<p>使用组合模式组织起来的对象具有出色的层次结构，每当对顶层组合对象执行一个操作的时候，实际上是在对整个结构进行深度优先的节点搜索。但是这些优点都是用操作的代价换取的，比如顶级每执行一次 store.show 实际的操作就是整一颗树形结构的节点均遍历执行一次。</p>
<h4 id="优点-5"><a href="#优点-5" class="headerlink" title="优点"></a>优点</h4><ul>
<li>不破坏封装，整体类与局部类之间松耦合，彼此相对独立 。</li>
<li>具有较好的可扩展性。</li>
<li>支持动态组合。在运行时，整体对象可以选择不同类型的局部对象。</li>
<li>整体类可以对局部类进行包装，封装局部类的接口，提供新的接口。</li>
</ul>
<h4 id="缺点-4"><a href="#缺点-4" class="headerlink" title="缺点"></a>缺点</h4><ul>
<li>整体类不能自动获得和局部类同样的接口。</li>
<li>创建整体类的对象时，需要创建所有局部类的对象 。</li>
</ul>
<h2 id="工厂方法模式-factory-method-TODO-没完"><a href="#工厂方法模式-factory-method-TODO-没完" class="headerlink" title="工厂方法模式(factory method)(TODO 没完)"></a>工厂方法模式(factory method)(TODO 没完)</h2><p>你要什么工厂造给你就是了，你不用管我是怎么造的，造好你拿去用就是了，奏是介么任性。任何需要生成对象的情况都可使用工厂方法替代生成。</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div></pre></td><td class="code"><pre><div class="line"><span class="comment">/**</span></div><div class="line"> * 果农类</div><div class="line"> */</div><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Grower</span> </span>&#123;</div><div class="line">	<span class="keyword">public</span> <span class="keyword">static</span> &lt;T extends Fruits&gt; <span class="function">T <span class="title">getFruits</span><span class="params">(Class&lt;T&gt; clz)</span> </span>&#123;</div><div class="line">		<span class="keyword">try</span> &#123;</div><div class="line">			Fruits fruits = (Fruits) Class.forName(clz.getName()).newInstance();</div><div class="line">			<span class="keyword">return</span> (T) fruits;</div><div class="line">		&#125; <span class="keyword">catch</span> (Exception e) &#123;</div><div class="line">			<span class="keyword">return</span> <span class="keyword">null</span>;</div><div class="line">		&#125;</div><div class="line">	&#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<ul>
<li>简单工厂模式</li>
<li>抽象工厂模式</li>
<li>工厂方法模式</li>
</ul>
<h2 id="享元模式-flyweight"><a href="#享元模式-flyweight" class="headerlink" title="享元模式(flyweight)"></a>享元模式(flyweight)</h2><p>通过共享有效支持大量的细粒度对象，节省系统中重复创建相同内容对象的性能消耗，进而提高应用程序的性能。<br>享元模式可分为单纯享元模式和复合享元模式。</p>
<h3 id="模式的使用场景-3"><a href="#模式的使用场景-3" class="headerlink" title="模式的使用场景"></a>模式的使用场景</h3><p>面向对象编程在某些情况下会创建大量的细粒度对象，它们的产生，存储，销毁都会造成资源和性能上的损耗，可能会在程序运行时形成效率瓶颈，在遇到以下情况时，即可考虑使用享元模式：</p>
<ol>
<li>一个应用程序使用了大量的对象，耗费大量的内存，降低了系统的效率。</li>
<li>这些对象的状态可以分离出内外两部分。</li>
<li>这些对象按照状态分成很多的组，当把删除对象的外部状态时，可以用相对较少的共享对象取代很多组对象。 </li>
<li>应用程序不依赖这些对象的身份，即这些对象是不可分辨的。</li>
</ol>
<p>在一般的开发中享元模式并不常用，其常常应用于系统底层的开发，以便解决系统的性能问题。</p>
<p>将事物的共性共享，同时又保留它的个性。为了做到这点，享元模式中区分了内蕴状态(Internal State)和外蕴状态(External State)。内蕴状态就是共性，外蕴状态就是个性了。内蕴状态存储在享元内部，不会随环境改变而变化，是可以共享的；外蕴状态是不可以共享的，它随环境的改变而变化，通常外蕴状态是由客户端来保持的（因为环境的变化是由客户端引起的）。</p>
<h4 id="优点-6"><a href="#优点-6" class="headerlink" title="优点"></a>优点</h4><ul>
<li>大幅度地降低内存中对象的数量，节省系统资源的开销<h4 id="缺点-5"><a href="#缺点-5" class="headerlink" title="缺点"></a>缺点</h4></li>
<li>为了使对象可以共享，享元模式需要将部分状态外部化，使得系统的逻辑变得复杂。</li>
<li>读取状态外部化的享元对象，影响了系统速度，使运行时间有所加长。</li>
</ul>
<h2 id="迭代器模式-Iterator"><a href="#迭代器模式-Iterator" class="headerlink" title="迭代器模式(Iterator)"></a>迭代器模式(Iterator)</h2><p>迭代器（Iterator）模式，又叫做游标（Cursor）模式。GOF给出的定义为：提供一种方法访问一个容器（container）对象中各个元素，而又不需暴露该对象的内部细节。</p>
<p>对Android来说,集合Collection实现了Iterable接口,就是说,无论是List的一大家子还是Map的一大家子,我们都可以使用Iterator来遍历里面的元素。</p>
<p>一个集合想要实现Iterator很是很简单的,需要注意的是每次需要重新生成一个Iterator来进行遍历.且遍历过程是单方向的,HashMap是通过一个类似HashIterator来实现的。</p>
<h4 id="优点-7"><a href="#优点-7" class="headerlink" title="优点"></a>优点</h4><ul>
<li>面向对象设计原则中的单一职责原则，对于不同的功能,我们要尽可能的把这个功能分解出单一的职责，不同的类去承担不同的职责。Iterator模式就是分离了集合对象的遍历行为，抽象出一个迭代器类来负责，这样不暴露集合的内部结构，又可让外部代码透明的访问集合内部的数据。</li>
</ul>
<h4 id="缺点-6"><a href="#缺点-6" class="headerlink" title="缺点"></a>缺点</h4><ul>
<li>会产生多余的对象，消耗内存；</li>
<li>遍历过程是一个单向且不可逆的遍历</li>
<li>如果你在遍历的过程中,集合发生改变,变多变少,内容变化都是算,就会抛出来ConcurrentModificationException异常.</li>
</ul>
<h2 id="原型模式"><a href="#原型模式" class="headerlink" title="原型模式"></a>原型模式</h2><p>用原型实例指定创建对象的种类，并通过拷贝这些原型创建新的对象。</p>
<h3 id="模式的使用场景-4"><a href="#模式的使用场景-4" class="headerlink" title="模式的使用场景"></a>模式的使用场景</h3><ol>
<li>类初始化需要消化非常多的资源，这个资源包括数据、硬件资源等，通过原型拷贝避免这些消耗；</li>
<li>通过 new 产生一个对象需要非常繁琐的数据准备或访问权限，则可以使用原型模式；</li>
<li>一个对象需要提供给其他对象访问，而且各个调用者可能都需要修改其值时，可以考虑使用原型模式拷贝多个对象供调用者使用，即保护性拷贝。 </li>
</ol>
<p>在Android源码中，以熟悉的Intent来分析源码中的原型模式。</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line"><span class="meta">@Override</span></div><div class="line"><span class="function"><span class="keyword">public</span> Object <span class="title">clone</span><span class="params">()</span> </span>&#123;</div><div class="line">    <span class="keyword">return</span> <span class="keyword">new</span> Intent(<span class="keyword">this</span>);</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>为深拷贝，重新生成了对象，而不是浅拷贝(直接复制引用)</p>
<h4 id="优点-8"><a href="#优点-8" class="headerlink" title="优点"></a>优点</h4><p>原型模式是在内存二进制流的拷贝，要比直接 new 一个对象性能好很多，特别是要在一个循环体内产生大量的对象时，原型模式可以更好地体现其优点。</p>
<h4 id="缺点-7"><a href="#缺点-7" class="headerlink" title="缺点"></a>缺点</h4><p>这既是它的优点也是缺点，直接在内存中拷贝，构造函数是不会执行的，在实际开发当中应该注意这个潜在的问题。优点就是减少了约束，缺点也是减少了约束，需要大家在实际应用时考虑。</p>
<h2 id="代理模式-proxy"><a href="#代理模式-proxy" class="headerlink" title="代理模式(proxy)"></a>代理模式(proxy)</h2><p>代理模式给某一个对象提供一个代理对象，并由代理对象控制对原对象的引用。</p>
<p>直观来说，Binder是Android中的一个类，它继承了IBinder接口。从IPC角度来说，Binder是Android中的一种跨进程通信方式，Binder还可以理解为一种虚拟的物理设备，它的设备驱动是/dev/binder，该通信方式在linux中没有；从Android Framework角度来说，Binder是ServiceManager连接各种Manager（ActivityManager、WindowManager，etc）和相应ManagerService的桥梁；从Android应用层来说，Binder是客户端和服务端进行通信的媒介，当你bindService的时候，服务端会返回一个包含了服务端业务调用的Binder对象，通过这个Binder对象，客户端就可以获取服务端提供的服务或者数据，这里的服务包括普通服务和基于AIDL的服务。</p>
<p>Binder一个很重要的作用是：将客户端的请求参数通过Parcel包装后传到远程服务端，远程服务端解析数据并执行对应的操作，同时客户端线程挂起，当服务端方法执行完毕后，再将返回结果写入到另外一个Parcel中并将其通过Binder传回到客户端，客户端接收到返回数据的Parcel后，Binder会解析数据包中的内容并将原始结果返回给客户端，至此，整个Binder的工作过程就完成了。由此可见，Binder更像一个数据通道，Parcel对象就在这个通道中跨进程传输，至于双方如何通信，这并不负责，只需要双方按照约定好的规范去打包和解包数据即可。</p>
<h4 id="优点-9"><a href="#优点-9" class="headerlink" title="优点"></a>优点</h4><ul>
<li>给对象增加了本地化的扩展性，增加了存取操作控制</li>
</ul>
<h4 id="缺点-8"><a href="#缺点-8" class="headerlink" title="缺点"></a>缺点</h4><ul>
<li>会产生多余的代理类</li>
</ul>
<h2 id="回调模式"><a href="#回调模式" class="headerlink" title="回调模式"></a>回调模式</h2><h2 id="装饰模式"><a href="#装饰模式" class="headerlink" title="装饰模式"></a>装饰模式</h2><h2 id="策略模式"><a href="#策略模式" class="headerlink" title="策略模式"></a>策略模式</h2>]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[Android 安全]]></title>
      <url>http://yoursite.com/2016/03/14/Android-%E5%AE%89%E5%85%A8/</url>
      <content type="html"><![CDATA[<p>作为一个自学了三年的个人开发者，一直照着教程和视频来学习，包括一些入门的Android书籍，都从来对Android的安全问题一概忽略。我们应该有这样一种态度，要做极致的东西，就要每一方面都做好，特别是用户数据的安全。这应该是我们开发者应有的对用户的默许的承诺！</p>
<p>android内核实行了特权分离模式，android操作系统要求每一个应用程序在运行时都提供用户标识（UID）和用户群标识（GID）。这种设计的背后是确保没有应用程序可以读、写其他应用程序、设备用户或者操作系统自身的代码或数据。<br><a id="more"></a><br>两个进程分别在各自的沙盒中运行后，两者之间通信的唯一方式是明确请求数据读取权限。</p>
<p>android采取的安全的解决方法和机制即特权分离、权限和应用代码签名。</p>
<h2 id="间接攻击"><a href="#间接攻击" class="headerlink" title="间接攻击"></a>间接攻击</h2><p>android 2.2版本发现两个漏洞，(JavaScript)攻击者可以不需要权限，甚至在没有任何提示的情况下，复制SD卡上的文件。如果应用把用户信息保存在SD卡，应用的数据就有被盗的风险。</p>
<h2 id="直接攻击"><a href="#直接攻击" class="headerlink" title="直接攻击"></a>直接攻击</h2><p>攻击者会利用应用设计中的弱点来收集用户的敏感信息，或者攻击应用正在通信的服务器。</p>
<h2 id="数据存储"><a href="#数据存储" class="headerlink" title="数据存储"></a>数据存储</h2><ul>
<li>个人信息：如电话号码，邮箱等对自己来说是隐私但可以和其他人分享的信息。</li>
<li>敏感信息：如密码、身份证，其具有较高的价值，在任何时候都应该受到保护。</li>
</ul>
<p>直接保存在SD卡上的数据是不安全的，需要在保存前进行加密。</p>
<p>Android系统中数据存储机制</p>
<table>
<thead>
<tr>
<th>存储方式</th>
<th>数据保密性</th>
</tr>
</thead>
<tbody>
<tr>
<td>用户数据共享(SharedPreference)</td>
<td>4种设置方式：<code>MODE_PRIVATE</code>、<code>MODE_WORLD_READABLE</code>、<code>MODE_WORLD_WRITABLE</code>、<code>MODE_MULTI_PROCESS</code>,默认是<code>MODE_PRIVATE</code></td>
</tr>
<tr>
<td>内部存储</td>
<td>3中设置方式：<code>MODE_PRIVATE</code>、<code>MODE_WORLD_READABLE</code>、<code>MODE_WORLD_WRITABLE</code>,默认是<code>MODE_PRIVATE</code></td>
</tr>
<tr>
<td>外部存储</td>
<td>默认全局可读</td>
</tr>
<tr>
<td>SQLite数据库</td>
<td>对程序内所有的类是可以访问的，对于外部应用程序不可访问</td>
</tr>
<tr>
<td>网络连接</td>
<td>依赖于Web Services设置</td>
</tr>
</tbody>
</table>
<p>尽管Android有多种数据存储机制，我们仍需要对重要的信息进行加密，比如对存储在SQLite里的数据采用AES加密，即使使用固定的密钥或把密钥保存在手机上也可免受直接攻击。</p>
<h3 id="AES加密标准"><a href="#AES加密标准" class="headerlink" title="AES加密标准"></a>AES加密标准</h3><p>公钥加密通过两种不同类型的密钥对数据进行加密或者混淆。每个用户有两类密钥：公钥和私钥。私钥只能用来解密被公钥加密的数据。为非对称加密。</p>
<p>加密和解密数据的为同一个密钥的为对称加密。</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">byte</span>[] encrypt(<span class="keyword">byte</span>[] key,<span class="keyword">byte</span>[] data)&#123;</div><div class="line">        SecretKeySpec keySpec = <span class="keyword">new</span> SecretKeySpec(key,<span class="string">"AES"</span>);</div><div class="line">        Cipher cipher;</div><div class="line">        <span class="keyword">byte</span>[] cipherText = <span class="keyword">null</span>;</div><div class="line">        <span class="keyword">try</span> &#123;</div><div class="line">            cipher = Cipher.getInstance(<span class="string">"AES"</span>);</div><div class="line">            <span class="comment">//使用生成的密钥加密</span></div><div class="line">            cipher.init(Cipher.ENCRYPT_MODE,keySpec);</div><div class="line">            cipherText = cipher.doFinal(data);</div><div class="line">        &#125; <span class="keyword">catch</span> (NoSuchAlgorithmException e) &#123;</div><div class="line">            e.printStackTrace();</div><div class="line">        &#125; <span class="keyword">catch</span> (NoSuchPaddingException e) &#123;</div><div class="line">            e.printStackTrace();</div><div class="line">        &#125; <span class="keyword">catch</span> (InvalidKeyException e) &#123;</div><div class="line">            e.printStackTrace();</div><div class="line">        &#125; <span class="keyword">catch</span> (BadPaddingException e) &#123;</div><div class="line">            e.printStackTrace();</div><div class="line">        &#125; <span class="keyword">catch</span> (IllegalBlockSizeException e) &#123;</div><div class="line">            e.printStackTrace();</div><div class="line">        &#125;</div><div class="line">        <span class="keyword">return</span> cipherText;</div><div class="line">    &#125;</div><div class="line"><span class="comment">//密钥生成器</span></div><div class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">byte</span>[] generateKey(<span class="keyword">byte</span>[] randomNumSeed)&#123;</div><div class="line">        SecretKey secretKey = <span class="keyword">null</span>;</div><div class="line">        <span class="keyword">try</span> &#123;</div><div class="line">            KeyGenerator keyGen = KeyGenerator.getInstance(<span class="string">"AES"</span>);</div><div class="line">            <span class="comment">//使用SHA1编码</span></div><div class="line">            SecureRandom random = SecureRandom.getInstance(<span class="string">"SHA1PRNG"</span>);</div><div class="line">            random.setSeed(randomNumSeed);</div><div class="line">            keyGen.init(<span class="number">256</span>,random);</div><div class="line">            secretKey = keyGen.generateKey();</div><div class="line">        &#125; <span class="keyword">catch</span> (NoSuchAlgorithmException e) &#123;</div><div class="line">            e.printStackTrace();</div><div class="line">        &#125;</div><div class="line">        <span class="keyword">return</span> secretKey.getEncoded();</div><div class="line">    &#125;</div></pre></td></tr></table></figure>
<h2 id="Android安全架构"><a href="#Android安全架构" class="headerlink" title="Android安全架构"></a>Android安全架构</h2><p>APP在执行api调用时，权限验证机制会检查应用是否有调用API的权限，没有授权则会抛出SecurityException。</p>
<p>可自定义权限，对于希望使用该应用的应用，需要在Mainifest文件中配置<uses_permission>标签。</uses_permission></p>
<h2 id="数据存储和密码学"><a href="#数据存储和密码学" class="headerlink" title="数据存储和密码学"></a>数据存储和密码学</h2><h3 id="公钥基础设施（PKI）"><a href="#公钥基础设施（PKI）" class="headerlink" title="公钥基础设施（PKI）"></a>公钥基础设施（PKI）</h3><p>PKI是基于一个受信任的第三方而进行的身份认证。术语：</p>
<ul>
<li>消息发送和接收者：交换敏感信息并遵循PKI规范</li>
<li>攻击者</li>
<li>铭感数据</li>
<li>加密后的信息</li>
<li>公钥：锁</li>
<li>私钥：钥匙</li>
<li>认证授权机构（CA）：可信的第三方</li>
<li>认证授权域：作为活动可信的第三方，保证所有的交易都在同一个上下文中发生</li>
<li>注册授权机构（RA）：核实身份，注册成功后获取自己的公钥和私钥</li>
</ul>
<h3 id="密码学术语"><a href="#密码学术语" class="headerlink" title="密码学术语"></a>密码学术语</h3><ul>
<li>明文</li>
<li>加密</li>
<li>密文</li>
<li>解密</li>
<li>加密算法</li>
<li>密钥</li>
<li>对称密钥：可加密也可解密</li>
<li>非对称密钥：公钥加密，私钥解密</li>
<li>密码分析：破解密文的研究活动</li>
</ul>
<h3 id="android中的密码学"><a href="#android中的密码学" class="headerlink" title="android中的密码学"></a>android中的密码学</h3><p>手机中引入PKI大材小用(也有对于移动领域的轻量级PKI – LPKI)，需要根据情况引入合适的密码技术。</p>
<h4 id="对称加密算法"><a href="#对称加密算法" class="headerlink" title="对称加密算法"></a>对称加密算法</h4><p>AES就属于一种对称加密算法或说是分组密码。一次处理若干数据位，叫做分组密码;一次只处理一个数据位，叫做流密码。一些分组密码：</p>
<p>分组密码 | 分组长度 | 密钥长度<br>| —– | ——  | —–|<br>AES     |  128bit | 0~256<br>Camelia |  128bit | 128,192,256<br>Blowfish|  64bit  | 0~448<br>Twofish |  128bit | 128,192,256</p>
<h4 id="数据填充"><a href="#数据填充" class="headerlink" title="数据填充"></a>数据填充</h4><p>若数据长度小于算法要求的数据长度时，就需要对数据进行填充。</p>
<p>如PKCS5/7填充就是取需要填充的位数作为填充的内容，Android默认使用PKCS5填充方式。</p>
<h4 id="分组密码的几种模式"><a href="#分组密码的几种模式" class="headerlink" title="分组密码的几种模式"></a>分组密码的几种模式</h4><p>分组密码有不同的加密和解密机制。最简单的为电子密码本(ECB)模式 ,其为将一个明文数据块加密成一个密文数据库，下一个明文数据块加密成下一个密文数据块，… 但ECB模式不能为模式识别的密码分析提供保护。一旦模式确定了，就很容易推断出使用了ECB加密，攻击者只需瞄准解决特定的密文数据块即可，而不必解密整个密文。</p>
<ul>
<li>密码分组链接（CBC）：使用初始化向量IV和第一组明文进行异或操作，然后加密，加密后的密文与下一组明文进行异或操作，…保证了每一组密文依赖于它前面所有的明文。</li>
<li>填充密码分组链接（PCBC）:它不仅有初始化向量IV,还包含初始化向量与第一组密文进行异或操作，以及这个结果与下一组进行异或操作。密文中任何一个小的修改都会导致加密和解密流程发生很大的改变。</li>
<li>密码反馈（CFB）:首先对初始化向量加密，再由加密后的初始化向量与明文进行异或操作生成密文，接着再对密文进行加密，然后与下一组明文进行异或操作。</li>
<li>输出反馈（OFB):加密后的初始化向量没有与明文进行异或操作。初始化向量加密后作为第二组明文的输入再与第一组明文进行异或操作。后续的加密操作都发生在异或之前。</li>
</ul>
<p><strong>Android默认使用电子密码本模式进行加密和解密操作。</strong></p>
<h2 id="Android-Web安全"><a href="#Android-Web安全" class="headerlink" title="Android Web安全"></a>Android Web安全</h2><ul>
<li>html：静态页面</li>
<li>web应用：用户可通过网络访问的软件，可动态生成html</li>
<li>web服务：使用某种特定的xml格式来交换数据<ul>
<li>SOAP:由各种mxl载荷而成</li>
<li>RESTFul API：REST(Representational State Transfer)是一种使用无状态的客户端-服务器协议来表述终端web服务的架构，其核心是使用http协议组成URI来描述每一个资源，而不是用那些复杂的协议。</li>
</ul>
</li>
</ul>
<p>典型的Web应用有3层，表现层、逻辑层和数据层。多层结构的优点即系统管理员可以替换、扩充硬件或服务器端配置而不影响其它的层。</p>
<h3 id="OWASP与Web攻击"><a href="#OWASP与Web攻击" class="headerlink" title="OWASP与Web攻击"></a>OWASP与Web攻击</h3><p>OWASP(Open Web Application Security Project)是一个提供安全开发和安全测试指导性原则的非盈利性组织。其有一个针对移动端网络安全的项目<a href="http://www.owasp.org.cn/owasp-project/download/2.TOP10_Beta_V2.pdf" target="_blank" rel="external">点击查看</a>,将会看到：</p>
<ul>
<li>确认并保护设备上的敏感数据</li>
<li>确保密码等身份认证信息的安全</li>
<li>数据传输安全</li>
<li>正确的身份认证、授权与会话管理</li>
<li>保障后端API服务和平台的安全</li>
<li>与第三方应用程序或服务的安全交互</li>
<li>设置用户隐私使用条例</li>
<li>实现对付费资源的授权访问控制</li>
<li>保证移动应用的分布式安全</li>
<li>运行环境中的代码错误检查</li>
</ul>
<h4 id="认证技术"><a href="#认证技术" class="headerlink" title="认证技术"></a>认证技术</h4><p>SSL(Secure Socket Layer)是一种传输协议，它对两台计算机之间传输的数据进行加密。事实上最新的协议是TLS(Transport Layer Secure),SSL和TLS其中的一部分是X.509证书(遵循PKI)的标准，也是其核心。</p>
<ol>
<li>浏览器请求数据安全套接字</li>
<li>服务器响应返回SSL认证</li>
<li>会话密钥种子通过SSL密钥加密并传给服务器</li>
<li>服务器要求之后所有的传输都有加密</li>
<li>服务器和浏览器直接能够发送加密信息</li>
</ol>
<p>SSL的本质是信任，如果能诱导用户相信某个服务器，你就能进行中间人并且截获他发送/接收的所有数据。因此SSL也不是绝对安全的。如2011年一个DigiNotar的CA导致攻击，攻击者拥有了合法证书，最终破产。</p>
<p>有两种方法阻止攻击者窥探通过SSL传输的个人认证信息：</p>
<h5 id="OAuth认证"><a href="#OAuth认证" class="headerlink" title="OAuth认证"></a>OAuth认证</h5><p>OAuth协议允许第三方站点或应用去访问服务提供商的Web应用中的数据。根据用户被赋予访问这些第三方站点的权限，它可以操控相应的数据而不必在现在的站点保存它在第三方站点的用户信息。</p>
<p>OAuth通过request token来工作，一个网站想访问另一个网站的数据，它必须被这个网站授予一个访问token。比如APP上的第三方登录认证过程。</p>
<h5 id="挑战-应答"><a href="#挑战-应答" class="headerlink" title="挑战/应答"></a>挑战/应答</h5><p>挑战方(服务提供方)向被挑战方(用户)发出一个挑战，用户使用选定的加密技术加密一个随机字符串，加密用的密钥就是用户的密码，挑战方使用存在数据库里的该用户的密码来加密那条同样的信息，如果这两个密文匹配，则用户被授权。</p>
]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[算法学习]]></title>
      <url>http://yoursite.com/2016/03/05/%E7%AE%97%E6%B3%95%E5%AD%A6%E4%B9%A0/</url>
      <content type="html"><![CDATA[<h2 id="算法分析思想"><a href="#算法分析思想" class="headerlink" title="算法分析思想"></a>算法分析思想</h2><h3 id="1-迭代法"><a href="#1-迭代法" class="headerlink" title="1.迭代法"></a>1.迭代法</h3><p>是一种不断用旧值递推新值的过程，分精确迭代和近视迭代。是用来求方程和方程组近似根的方法。</p>
<h3 id="2-穷举搜索法"><a href="#2-穷举搜索法" class="headerlink" title="2.穷举搜索法"></a>2.穷举搜索法</h3><p>对可能的解的众多候选按照某种顺序逐一枚举和检验。典型的问题如选择排序和冒泡排序。</p>
<h3 id="3-递归"><a href="#3-递归" class="headerlink" title="3.递归"></a>3.递归</h3><p>递归算法执行过程分 <code>递推</code> 和 <code>回归</code>  两个阶段。在 <code>递推</code> 阶段，将大的问题分解成小的问题；在  <code>回归</code> 阶段，获得最简单问题的解后，逐级返回，依次得到稍微复杂情况的解，知道获得最终的结果</p>
<p>递归运行效率较低，因为有函数调用的开销，递归多次也可能造成栈溢出。</p>
<h3 id="4-贪心算法"><a href="#4-贪心算法" class="headerlink" title="4.贪心算法"></a>4.贪心算法</h3><p>不追求最优解，只找到满意解。</p>
<p>找回零钱问题<br>装箱问题 </p>
<h3 id="5-分治法"><a href="#5-分治法" class="headerlink" title="5.分治法"></a>5.分治法</h3><p>将一个难以直接解决的大问题，分割成一些规模较小的相同问题，各个击破，分而治之。</p>
<p>大整数乘法<br>快速排序<br>归并排序<br>最大子数组和  </p>
<h3 id="6-动态规划DP"><a href="#6-动态规划DP" class="headerlink" title="6.动态规划DP"></a>6.动态规划DP</h3><p>复杂问题不能分解成几个子问题，而分解成一系列子问题；</p>
<p>DP通常基于一个递推公式及一个(或多个)初始状态，当前子问题解由上一次子问题解推出。</p>
<p>动态规划算法的关键在于解决冗余，以空间换时间的技术，需要存储过程中的各种状态。可以看着是<code>分治算法</code>+<code>解决冗余</code></p>
<p>使用动态规划算法的问题的特征是<code>子问题的重叠性</code>，否则动态规划算法不具备优势</p>
<h3 id="7-回溯法"><a href="#7-回溯法" class="headerlink" title="7.回溯法"></a>7.回溯法</h3><p>也叫 <code>试探法</code>。 是一种选优搜索法，按照选优条件搜索，当搜索到某一步，发现原先选择并不优或达不到目标，就退回重新选择。</p>
<ol>
<li>针对问题，定义解空间（ 这时候解空间是一个集合，且包含我们要找的最优解）</li>
<li>组织解空间，确定易于搜索的解空间结构，通常组织成<code>树结构</code> 或 <code>图结构</code></li>
<li>深度优先搜索解空间，搜索过程中用剪枝函数避免无效搜索</li>
</ol>
<p>回溯法求解问题时，一般是一边建树，一边遍历该树；且采用非递归方法。</p>
<p>八皇后问题<br>迷宫问题</p>
<h2 id="数据结构"><a href="#数据结构" class="headerlink" title="数据结构"></a>数据结构</h2><h3 id="1-散列表（哈希表）"><a href="#1-散列表（哈希表）" class="headerlink" title="1.散列表（哈希表）"></a>1.散列表（哈希表）</h3><p>散列表使用某种算法操作(散列函数)将键转化为数组的索引来访问数组中的数据，这样可以通过Key-value的方式来访问数据，达到常数级别的存取效率。现在的nosql数据库都是采用key-value的方式来访问存储数据。</p>
<h4 id="散列函数"><a href="#散列函数" class="headerlink" title="散列函数"></a>散列函数</h4><p>散列函数就是将键转化为数组索引的过程。且这个函数应该易于计算且能够均匀分布所有的键。</p>
<p>散列函数最常用的方法是<code>除留余数法</code>。这时候被除数应该选用<code>素数</code>，这样才能保证键值的均匀散步。</p>
<figure class="highlight c"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">int</span> hash = <span class="number">0</span>;</div><div class="line"><span class="keyword">for</span> (<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;s.length();i++)&#123;</div><div class="line">	hash = (R*hash +s.charAt(i)%M);</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h4 id="解决碰撞-不同关键字散列地址相同为碰撞"><a href="#解决碰撞-不同关键字散列地址相同为碰撞" class="headerlink" title="解决碰撞(不同关键字散列地址相同为碰撞)"></a>解决碰撞(不同关键字散列地址相同为碰撞)</h4><h5 id="拉链法"><a href="#拉链法" class="headerlink" title="拉链法"></a>拉链法</h5><p>将大小为M的数组中的每个元素指向一条链表，链表中的每个节点都存储了散列值为该元素索引的键值对。每条链表的平均长度是N/M，N是键值对的总个数。</p>
<p>添加操作： </p>
<ol>
<li>通过hash函数得到hashCode  </li>
<li>通过hashcode得到index  </li>
<li>如果index处没有链表，建立好新结点，作为新链表的首结点  </li>
<li>如果index处已经有链表，先要遍历看key是否已经存在，如果存在直接返回，如果不存在，加入链表头部  </li>
</ol>
<p><code>TODO 编写代码</code></p>
<p>删除操作： </p>
<ol>
<li>通过hash函数得到hashCode  </li>
<li>通过hashcode得到index  </li>
<li>遍历链表，删除结点  </li>
</ol>
<h5 id="线性探测法"><a href="#线性探测法" class="headerlink" title="线性探测法"></a>线性探测法</h5><p>使用大小为M的数组保存N个键值对，当碰撞发生时，直接检查散列表中的下一个位置。</p>
<h3 id="二叉树"><a href="#二叉树" class="headerlink" title="二叉树"></a>二叉树</h3><p><img src="../assets/blogImg/trees.png" alt=""></p>
<h4 id="二叉查找树"><a href="#二叉查找树" class="headerlink" title="二叉查找树"></a>二叉查找树</h4><ol>
<li>左子树 &lt; 根节点 &lt; 右子树</li>
<li>任意左右子树也为二叉树</li>
<li>没有键值相等的节点</li>
</ol>
<p>删除节点,需要重建排序树</p>
<p> 1) 删除节点是叶子节点（分支为0），结构不破坏<br> 2）删除节点只有一个分支(分支为1)，结构也不破坏<br> 3）删除节点有2个分支，此时删除节点   </p>
<p>n个节点的完全二叉树，其查找，删除的复杂度都是O(logN),但是如果频繁的插入删除，导致二叉树退化成一个n个节点的单链表，也就是<code>插入，查找复杂度趋于O(N)</code>，为了克服这个缺点，出现了很多二叉查找树的变形，如AVL树，红黑树，伸展树(splay tree)。</p>
<h4 id="B树（balance-tree）"><a href="#B树（balance-tree）" class="headerlink" title="B树（balance tree）"></a>B树（balance tree）</h4><p>平衡查找树，一种多路查找树。能保证数据插入和删除情况下，任然保持执行效率。</p>
<p>一个M阶的B树满足：</p>
<ol>
<li>每个节点最多M个子节点</li>
<li>除根节点和叶节点外，其它每个节点至少有M/2个孩子</li>
<li>根节点至少2个节点</li>
<li>所有叶节点在同一层，叶节点不包含任何关键字信息</li>
<li>有k个关键字的页节点包含k+1个孩子(叶子结点的数目正好等于树中所包含的关键字总个数加1)</li>
</ol>
<p>也就是说：<br>根节点到每个叶节点的路径长度都是相同的。</p>
<h4 id="B-树"><a href="#B-树" class="headerlink" title="B+树"></a>B+树</h4><p>mysql索引使用B+树的数据结构</p>
<h4 id="赫夫曼编码"><a href="#赫夫曼编码" class="headerlink" title="赫夫曼编码"></a>赫夫曼编码</h4><p>通过<code>字符出现的频率</code>，<code>优先级</code>，<code>二叉树</code>进行的压缩算法。对一个字符串，计算每个字符出现的次数,把这些字符放到优先队列（priority queue），对这个priority queue转出二叉树</p>
<p>原则：出现频率越多的会在越上层，编码也越短，出现频率越少的在越下层，编码也越长。<br>不存在某一个编码是另一个编码的前缀,字符都在叶节点上，所以不会存在一个编码是另一个编码的前缀<br>二叉树每个节点要么是叶子节点，要么是双分支节点(且左分支编码为0，右分支编码为1)</p>
<h4 id="平衡二叉树"><a href="#平衡二叉树" class="headerlink" title="平衡二叉树"></a>平衡二叉树</h4><h2 id="排序算法"><a href="#排序算法" class="headerlink" title="排序算法"></a>排序算法</h2><h2 id="冒泡排序法"><a href="#冒泡排序法" class="headerlink" title="冒泡排序法"></a>冒泡排序法</h2><p>算法步骤：</p>
<ol>
<li>比较相邻的两个元素，如果第二个比第一个大，就交换它们</li>
<li>对每一对相邻元素执行第一步，第一遍完成后，末尾的元素会是最大值</li>
<li>针对所有的元素重复以上的步骤，除了最后一个</li>
<li>持续每次对越来越少的元素重复上面的步骤，直到没有任何一对数字需要比较</li>
</ol>
<figure class="highlight c"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div></pre></td><td class="code"><pre><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdio.h&gt;</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">define</span> SIZE 8</span></div><div class="line"><span class="comment">//冒泡排序算法</span></div><div class="line"><span class="function"><span class="keyword">void</span> <span class="title">bubble_sort</span><span class="params">(<span class="keyword">int</span> a[], <span class="keyword">int</span> n)</span></span>&#123;</div><div class="line">    <span class="keyword">int</span> i,j,temp,count=<span class="number">0</span>;</div><div class="line">    <span class="keyword">for</span> (j=<span class="number">0</span>; j&lt;n<span class="number">-1</span>; j++) &#123;</div><div class="line">        <span class="comment">//由于每次遍历后最后的位置逐渐由小到大排序，顾减少判断</span></div><div class="line">        <span class="keyword">for</span> (i=<span class="number">0</span>; i&lt;n<span class="number">-1</span>-j; i++) &#123;</div><div class="line">            <span class="keyword">if</span> (a[i]&gt;a[i+<span class="number">1</span>]) &#123;</div><div class="line">                count++;</div><div class="line">                temp = a[i];</div><div class="line">                a[i] = a[i+<span class="number">1</span>];</div><div class="line">                a[i+<span class="number">1</span>] = temp;</div><div class="line">            &#125;</div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line">    <span class="built_in">printf</span>(<span class="string">"共交换了%d次"</span>,count);</div><div class="line">&#125;</div><div class="line"></div><div class="line"></div><div class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">(<span class="keyword">int</span> argc, <span class="keyword">const</span> <span class="keyword">char</span> * argv[])</span> </span>&#123;</div><div class="line">    <span class="comment">// insert code here...</span></div><div class="line">    <span class="built_in">printf</span>(<span class="string">"Hello, World!\n"</span>);</div><div class="line">    <span class="keyword">int</span> arr[SIZE] = &#123;<span class="number">6</span>,<span class="number">7</span>,<span class="number">3</span>,<span class="number">2</span>,<span class="number">5</span>,<span class="number">12</span>,<span class="number">5</span>,<span class="number">11</span>&#125;;</div><div class="line">    </div><div class="line">    bubble_sort(arr,SIZE);</div><div class="line">    <span class="keyword">int</span> i =<span class="number">0</span>;</div><div class="line">    <span class="keyword">for</span> (i = <span class="number">0</span>; i &lt; SIZE; i++)</div><div class="line">    &#123;</div><div class="line">        <span class="built_in">printf</span>(<span class="string">"%d"</span>, arr[i]);</div><div class="line">    &#125;</div><div class="line">    <span class="built_in">printf</span>(<span class="string">"\n"</span>);</div><div class="line">    </div><div class="line">    <span class="keyword">return</span> <span class="number">0</span>;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>最好时间复杂度O(n),最坏时间复杂度O(n^2)</p>
<h2 id="快速排序算法"><a href="#快速排序算法" class="headerlink" title="快速排序算法"></a>快速排序算法</h2><p>在平均状况下，排序 n 个项目要Ο(n log n)次比较</p>
<p>算法步骤：</p>
<p>1 从数列中挑出一个元素，称为 “基准”（pivot），</p>
<p>2 重新排序数列，所有元素比基准值小的摆放在基准前面，所有元素比基准值大的摆在基准的后面（相同的数可以到任一边）。在这个分区退出之后，该基准就处于数列的中间位置。这个称为分区（partition）操作。</p>
<p>3 递归地（recursive）把小于基准值元素的子数列和大于基准值元素的子数列排序。</p>
<p>递归的最底部情形，是数列的大小是零或一，也就是永远都已经被排序好了。虽然一直递归下去，但是这个算法总会退出，因为在每次的迭代（iteration）中，它至少会把一个元素摆到它最后的位置去。<br><img src="../assets/blogImg/quick_sort.gif" alt=""></p>
<figure class="highlight c"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">void</span> <span class="title">quick_sort</span><span class="params">(<span class="keyword">int</span> a[],<span class="keyword">int</span> left,<span class="keyword">int</span> right)</span></span>&#123;</div><div class="line">    <span class="keyword">if</span> (left&gt;=right) &#123;</div><div class="line">        <span class="keyword">return</span>;</div><div class="line">    &#125;</div><div class="line">    <span class="keyword">int</span> i=left,j=right,key=a[left];</div><div class="line">    <span class="keyword">while</span> (i&lt;j) &#123;</div><div class="line">        <span class="keyword">while</span> (i&lt;j &amp;&amp; key&lt;=a[j]) &#123; <span class="comment">//先进行j的从右向左找比key小的值</span></div><div class="line">            j--;</div><div class="line">        &#125;</div><div class="line">        a[i]=a[j];<span class="comment">//找到时放到left索引的位置</span></div><div class="line">        <span class="keyword">while</span> (i&lt;j &amp;&amp; key&gt;=a[i]) &#123;<span class="comment">//i的从左向右找比key大的值</span></div><div class="line">            i++;</div><div class="line">        &#125;</div><div class="line">        a[j]=a[i];</div><div class="line">    &#125;</div><div class="line">    a[i]=key;<span class="comment">//当在当组内找完一遍以后就把中间数key回归</span></div><div class="line">    quick_sort(a, left,i<span class="number">-1</span>);</div><div class="line">    quick_sort(a,i+<span class="number">1</span>, right);</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h2 id="选择排序算法"><a href="#选择排序算法" class="headerlink" title="选择排序算法"></a>选择排序算法</h2><p>它的工作原理是每一次从待排序的数据元素中选出最小（或最大）的一个元素，存放在序列的起始位置，直到全部待排序的数据元素排完。 选择排序是不稳定的排序方法。</p>
<p>最好情况是，已经有序，交换0次；最坏情况交换n-1次，逆序交换n/2次。交换次数比冒泡排序少多了，由于交换所需CPU时间比比较所需的CPU时间多，n值较小时，选择排序比冒泡排序快。</p>
<ul>
<li>树形选择排序</li>
</ul>
<p>利用满二叉树的性质，将输入的数据存放到满二叉树的叶节点，通过比较树中剩余可用节点（从底层的叶节点开始）的大小，每次选择最小的数值（比较复制到二叉树的顶端），并且把最小数值赋给排序数组的前端，把最小数值原来叶节点的位置设置为不可用；依次循环直至最后一个可用叶节点。</p>
<ul>
<li>堆排序</li>
</ul>
<p>堆分为大根堆和小根堆，是完全二叉树。大根堆的要求是每个节点的值都不大于其父节点的值，即A[PARENT[i]] &gt;= A[i]。在数组的非降序排序中，需要使用的就是大根堆，因为根据大根堆的要求可知，最大的值一定在堆顶。</p>
<p>总的比较次数为<br>1 + 2 + 3 + 4 +5 + . . . + n - 1 = n(n-1)/2, 时间复杂度是 O(n^2).</p>
<figure class="highlight c"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div></pre></td><td class="code"><pre><div class="line"><span class="comment">//选择排序算法</span></div><div class="line"><span class="function"><span class="keyword">void</span> <span class="title">select_sort</span><span class="params">(<span class="keyword">int</span> a[],<span class="keyword">int</span> n)</span></span>&#123;</div><div class="line">    <span class="keyword">int</span> i,j,d,temp;</div><div class="line">    <span class="keyword">for</span> (i=<span class="number">0</span>; i&lt;n; ++i) &#123;</div><div class="line">        d=i;</div><div class="line">        <span class="keyword">for</span> (j=i+<span class="number">1</span>; j&lt;n; ++j) &#123;</div><div class="line">            <span class="keyword">if</span>(a[j]&lt;a[d])&#123;</div><div class="line">                d=j;</div><div class="line">            &#125;</div><div class="line">        &#125;</div><div class="line">        <span class="keyword">if</span>(d!=i)&#123;</div><div class="line">            temp=a[d];</div><div class="line">            a[d]=a[i];</div><div class="line">            a[i]=temp;</div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>一是建堆的渗透函数，二是反复调用渗透函数实现排序的函数。</p>
<figure class="highlight c"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">void</span> <span class="title">heapAdjust</span><span class="params">(<span class="keyword">int</span> a[],<span class="keyword">int</span> s,<span class="keyword">int</span> n)</span></span>&#123;</div><div class="line">    <span class="keyword">int</span> temp = a[s];</div><div class="line">    <span class="keyword">int</span> child=<span class="number">2</span>*s+<span class="number">1</span>;<span class="comment">//左孩子结点的位置</span></div><div class="line">    <span class="keyword">while</span> (child&lt;n) &#123;</div><div class="line">        <span class="keyword">if</span> (child+<span class="number">1</span>&lt;n &amp;&amp; a[child]&lt;a[child+<span class="number">1</span>]) &#123;<span class="comment">//右孩子大于左孩子</span></div><div class="line">            ++child;</div><div class="line">        &#125;</div><div class="line">        <span class="keyword">if</span>(a[s]&lt;a[child])&#123;<span class="comment">//子结点大于父结点,替换父结点</span></div><div class="line">            a[s]=a[child];</div><div class="line">            s=child;</div><div class="line">            child=<span class="number">2</span>*s+<span class="number">1</span>;</div><div class="line">        &#125;<span class="keyword">else</span>&#123;</div><div class="line">            <span class="keyword">break</span>;</div><div class="line">        &#125;</div><div class="line">        a[s]=temp; <span class="comment">//当前待调整的结点放到比其大的孩子结点位置上</span></div><div class="line">    &#125;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">void</span> <span class="title">buildHeap</span><span class="params">(<span class="keyword">int</span> a[],<span class="keyword">int</span> n)</span></span>&#123;</div><div class="line">    <span class="keyword">int</span> i;</div><div class="line">    <span class="keyword">for</span> (i=(n<span class="number">-1</span>)/<span class="number">2</span>; i&gt;=<span class="number">0</span>; i--) &#123;</div><div class="line">        heapAdjust(a,i,n);</div><div class="line">    &#125;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">void</span> <span class="title">heap_sort</span><span class="params">(<span class="keyword">int</span> a[],<span class="keyword">int</span> n)</span></span>&#123;</div><div class="line">    buildHeap(a,n);</div><div class="line">    <span class="comment">//从最后一个元素开始对序列进行调整</span></div><div class="line">    <span class="keyword">int</span> i;</div><div class="line">    <span class="keyword">for</span> (i=n<span class="number">-1</span>; i&gt;<span class="number">0</span>; --i) &#123;</div><div class="line">        <span class="comment">//交换堆顶元素H[0]和堆中最后一个元素</span></div><div class="line">        <span class="keyword">int</span> temp = a[i]; a[i] = a[<span class="number">0</span>]; a[<span class="number">0</span>] = temp;</div><div class="line">        <span class="comment">//每次交换堆顶元素和堆中最后一个元素之后，都要对堆进行调整</span></div><div class="line">        heapAdjust(a, <span class="number">0</span>, i);</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h2 id="二分查找算法"><a href="#二分查找算法" class="headerlink" title="二分查找算法"></a>二分查找算法</h2><p>优点是比较次数少，查找速度快，平均性能好；其缺点是要求待查表为有序表，且插入删除困难。适用于不经常变动而查找频繁的有序列表。时间复杂度为O(logn)。</p>
<p>算法步骤：</p>
<ol>
<li>将n个元素分成个数大致相同的两半，取a[n/2]与欲查找的x作比较，如果x=a[n/2]则找到x，算法终止。</li>
<li>如 果x&lt;a[n/2]，则我们只要在数组a的左半部继续搜索x（这里假设数组元素呈升序排列）。</li>
<li>如果x&gt;a[n/2]，则我们只要在数组a的右 半部继续搜索x。</li>
</ol>
<figure class="highlight c"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div></pre></td><td class="code"><pre><div class="line"><span class="comment">//递归法</span></div><div class="line"><span class="function"><span class="keyword">int</span> <span class="title">binary_search</span><span class="params">(<span class="keyword">int</span> a[],<span class="keyword">int</span> value,<span class="keyword">int</span> left,<span class="keyword">int</span> right)</span></span>&#123;</div><div class="line">        <span class="keyword">int</span> mid = (left+right)/<span class="number">2</span>;</div><div class="line">    <span class="keyword">if</span> (left&gt;right) &#123;</div><div class="line">        <span class="keyword">return</span> <span class="number">-1</span>;</div><div class="line">    &#125;</div><div class="line">    <span class="keyword">if</span> (a[mid]==value) &#123;</div><div class="line">        <span class="keyword">return</span> mid;</div><div class="line">    &#125;<span class="keyword">else</span> <span class="keyword">if</span>(a[mid]&gt;value)&#123;</div><div class="line">        <span class="keyword">return</span> binary_search(a, value, left, mid<span class="number">-1</span>);<span class="comment">//注意右边界设为mid-1，不然可能程序找到退出的条件</span></div><div class="line">    &#125;<span class="keyword">else</span>&#123;</div><div class="line">        <span class="keyword">return</span> binary_search(a, value, mid+<span class="number">1</span>, right);</div><div class="line">    &#125;</div><div class="line">&#125;</div><div class="line"><span class="comment">//while循环</span></div><div class="line"><span class="function"><span class="keyword">int</span> <span class="title">binary_search_normal</span><span class="params">(<span class="keyword">int</span> *a,<span class="keyword">int</span> value,<span class="keyword">int</span> n)</span></span>&#123;</div><div class="line">    <span class="keyword">int</span> left=<span class="number">0</span>,right=n<span class="number">-1</span>;</div><div class="line">    <span class="keyword">while</span> (left&lt;=right) &#123;</div><div class="line">        <span class="keyword">int</span> mid = (left+right)/<span class="number">2</span>;</div><div class="line">        <span class="keyword">if</span> (a[mid]==value) &#123;</div><div class="line">            <span class="keyword">return</span> mid;</div><div class="line">        &#125;<span class="keyword">else</span> <span class="keyword">if</span>(a[mid]&gt;value)&#123;</div><div class="line">            right = mid <span class="number">-1</span>;</div><div class="line">        &#125;<span class="keyword">else</span>&#123;</div><div class="line">            left=mid+<span class="number">1</span>;</div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line">    <span class="keyword">return</span> <span class="number">-1</span>;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h2 id="归并排序算法"><a href="#归并排序算法" class="headerlink" title="归并排序算法"></a>归并排序算法</h2><p>采用分治法，将已有序的子序列合并，得到完全有序的序列；即先使每个子序列有序，再使子序列段间有序。速度仅次于快速排序，为稳定排序算法。</p>
<p>算法步骤：</p>
<ol>
<li>申请空间，使其大小为两个已经排序序列之和，该空间用来存放合并后的序列</li>
<li>设定两个指针，最初位置分别为两个已经排序序列的起始位置</li>
<li>比较两个指针所指向的元素，选择相对小的元素放入到合并空间，并移动指针到下一位置</li>
<li>重复步骤3直到某一指针达到序列尾</li>
<li>将另一序列剩下的所有元素直接复制到合并序列尾<br><img src="../assets/blogImg/combine_sort.gif" alt=""><br><code>TODO</code></li>
</ol>
<figure class="highlight c"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div></pre></td><td class="code"><pre><div class="line"><span class="comment">//归并排序算法</span></div><div class="line"><span class="function"><span class="keyword">void</span> <span class="title">Merge</span><span class="params">(<span class="keyword">int</span> sourceArr[],<span class="keyword">int</span> tempArr[], <span class="keyword">int</span> startIndex, <span class="keyword">int</span> midIndex, <span class="keyword">int</span> endIndex)</span></span></div><div class="line">&#123;</div><div class="line">    <span class="keyword">int</span> i = startIndex, j=midIndex+<span class="number">1</span>, k = startIndex;</div><div class="line">    <span class="keyword">while</span>(i!=midIndex+<span class="number">1</span> &amp;&amp; j!=endIndex+<span class="number">1</span>)</div><div class="line">    &#123;</div><div class="line">        <span class="keyword">if</span>(sourceArr[i] &gt;= sourceArr[j])</div><div class="line">            tempArr[k++] = sourceArr[j++];</div><div class="line">        <span class="keyword">else</span></div><div class="line">            tempArr[k++] = sourceArr[i++];</div><div class="line">    &#125;</div><div class="line">    <span class="keyword">while</span>(i != midIndex+<span class="number">1</span>)</div><div class="line">        tempArr[k++] = sourceArr[i++];</div><div class="line">    <span class="keyword">while</span>(j != endIndex+<span class="number">1</span>)</div><div class="line">        tempArr[k++] = sourceArr[j++];</div><div class="line">    <span class="keyword">for</span>(i=startIndex; i&lt;=endIndex; i++)</div><div class="line">        sourceArr[i] = tempArr[i];</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="comment">//内部使用递归</span></div><div class="line"><span class="function"><span class="keyword">void</span> <span class="title">MergeSort</span><span class="params">(<span class="keyword">int</span> sourceArr[], <span class="keyword">int</span> tempArr[], <span class="keyword">int</span> startIndex, <span class="keyword">int</span> endIndex)</span></span></div><div class="line">&#123;</div><div class="line">    <span class="keyword">int</span> midIndex;</div><div class="line">    <span class="keyword">if</span>(startIndex &lt; endIndex)</div><div class="line">    &#123;</div><div class="line">        midIndex = (startIndex + endIndex) / <span class="number">2</span>;</div><div class="line">        MergeSort(sourceArr, tempArr, startIndex, midIndex);</div><div class="line">        MergeSort(sourceArr, tempArr, midIndex+<span class="number">1</span>, endIndex);</div><div class="line">        Merge(sourceArr, tempArr, startIndex, midIndex, endIndex);</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h2 id="插入排序"><a href="#插入排序" class="headerlink" title="插入排序"></a>插入排序</h2><p>有一个已经有序的数据序列，要求在这个已经排好的数据序列中插入一个数，但要求插入后此数据序列仍然有序时可用。法适用于少量数据的排序，时间复杂度为O(n^2)。是稳定的排序方法。</p>
<h3 id="直接插入排序算法"><a href="#直接插入排序算法" class="headerlink" title="直接插入排序算法"></a>直接插入排序算法</h3><ol>
<li>设置监视哨r[0]，将待插入纪录的值赋值给r[0]；</li>
<li>设置开始查找的位置j；</li>
<li>在数组中进行搜索，搜索中将第j个纪录后移，直至r[0].key≥r[j].key为止；</li>
<li>将r[0]插入r[j+1]的位置上。</li>
</ol>
<figure class="highlight c"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">void</span> <span class="title">insert_sort</span><span class="params">(<span class="keyword">int</span> a[],<span class="keyword">int</span> n)</span></span></div><div class="line">&#123;</div><div class="line">    <span class="keyword">int</span> i,j;</div><div class="line">    <span class="keyword">int</span> temp;</div><div class="line">    <span class="keyword">for</span>(i=<span class="number">1</span>;i&lt;n;i++)</div><div class="line">    &#123;</div><div class="line">        temp=a[i];</div><div class="line">        <span class="keyword">for</span>(j=i;j&gt;<span class="number">0</span>&amp;&amp;a[j<span class="number">-1</span>]&gt;temp;j--)</div><div class="line">        &#123;</div><div class="line">            a[j]=a[j<span class="number">-1</span>];</div><div class="line">        &#125;</div><div class="line">        a[j]=temp;</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h2 id="希尔排序算法"><a href="#希尔排序算法" class="headerlink" title="希尔排序算法"></a>希尔排序算法</h2><p>shell排序是不稳定的，希尔排序属于插入类排序,是将整个有序序列分割成若干小的子序列分别进行插入排序。</p>
<p>排序过程：</p>
<ol>
<li>先取一个正整数d1&lt;n，把所有序号相隔d1的数组元素放一组，组内进行直接插入排序；</li>
<li>然后取d2&lt;d1，重复上述分组和排序操作；</li>
<li><p>直至di=1，即所有记录放进一个组中排序为止。</p>
<pre><code>TODO
</code></pre></li>
</ol>
<h2 id="BFPRT-线性查找算法"><a href="#BFPRT-线性查找算法" class="headerlink" title="BFPRT(线性查找算法)"></a>BFPRT(线性查找算法)</h2><p>时间复杂度<br>O(N)</p>
<p>算法步骤：</p>
<ol>
<li><p>将n个元素每5个一组，分成n/5(上界)组。</p>
</li>
<li><p>取出每一组的中位数，任意排序方法，比如插入排序。</p>
</li>
<li><p>递归的调用selection算法查找上一步中所有中位数的中位数，设为x，偶数个中位数的情况下设定为选取中间小的一个。</p>
</li>
<li><p>用x来分割数组，设小于等于x的个数为k，大于x的个数即为n-k。</p>
</li>
<li><p>若i==k，返回x；若i<k，在小于x的元素中递归查找第i小的元素；若i>k，在大于x的元素中递归查找第i-k小的元素。</k，在小于x的元素中递归查找第i小的元素；若i></p>
</li>
</ol>
<p>终止条件：n=1时，返回的即是i小元素。</p>
<h2 id="其它"><a href="#其它" class="headerlink" title="其它"></a>其它</h2><h3 id="二叉查找树-1"><a href="#二叉查找树-1" class="headerlink" title="二叉查找树"></a>二叉查找树</h3><p>左孩子 &lt; 根结点 &lt;= 右孩子</p>
<h3 id="红黑树"><a href="#红黑树" class="headerlink" title="红黑树"></a>红黑树</h3><ul>
<li>根结点必须是黑色，空叶子结点是黑色的，红结点的叶子结点必须是黑色的</li>
<li><p>左旋<br><img src="http://images.cnitblog.com/i/497634/201403/251733282013849.jpg" alt=""></p>
</li>
<li><p>右旋<br><img src="http://images.cnitblog.com/i/497634/201403/251735527958942.jpg" alt=""></p>
</li>
</ul>
<p>被旋转的树，在旋转前是二叉查找树，并且旋转之后仍然是一颗二叉查找树。</p>
<p>对x进行左旋，意味着，将“x的右孩子”设为“x的父亲节点”；对x进行右旋，意味着，将“x的左孩子”设为“x的父亲节点”</p>
<h4 id="红黑树添加"><a href="#红黑树添加" class="headerlink" title="红黑树添加"></a>红黑树添加</h4><ol>
<li>将红黑树作为二叉查找树，插入结点</li>
<li>将插入的结点着色为红色（不会违背 从一个节点到该节点的子孙节点的所有路径上包含相同数目的黑节点 的性质）</li>
<li>通过一系列的旋转或着色等操作，使之重新成为一颗红黑树。</li>
</ol>
<h1 id="十大算法"><a href="#十大算法" class="headerlink" title="十大算法"></a>十大算法</h1><h2 id="1-快速排序算法"><a href="#1-快速排序算法" class="headerlink" title="1 快速排序算法"></a>1 快速排序算法</h2><p>在平均状况下，排序 n 个项目要Ο(n log n)次比较</p>
<p>算法步骤：</p>
<p>1 从数列中挑出一个元素，称为 “基准”（pivot），</p>
<p>2 重新排序数列，所有元素比基准值小的摆放在基准前面，所有元素比基准值大的摆在基准的后面（相同的数可以到任一边）。在这个分区退出之后，该基准就处于数列的中间位置。这个称为分区（partition）操作。</p>
<p>3 递归地（recursive）把小于基准值元素的子数列和大于基准值元素的子数列排序。</p>
<p>递归的最底部情形，是数列的大小是零或一，也就是永远都已经被排序好了。虽然一直递归下去，但是这个算法总会退出，因为在每次的迭代（iteration）中，它至少会把一个元素摆到它最后的位置去。<br><img src="../assets/blogImg/quick_sort.gif" alt=""></p>
<h2 id="2-堆排序算法"><a href="#2-堆排序算法" class="headerlink" title="2 堆排序算法"></a>2 堆排序算法</h2><p>堆排序的平均时间复杂度为Ο(nlogn) </p>
<p>算法步骤：</p>
<p>1.创建一个堆H[0..n-1]</p>
<p>2.把堆首（最大值）和堆尾互换</p>
<p>3.把堆的尺寸缩小1，并调用shift_down(0),目的是把新的数组顶端数据调整到相应位置</p>
<p>4.重复步骤2，直到堆的尺寸为1<br><img src="../assets/blogImg/heap_sort.gif" alt=""></p>
<h2 id="3-归并排序算法"><a href="#3-归并排序算法" class="headerlink" title="3 归并排序算法"></a>3 归并排序算法</h2><p>算法步骤：</p>
<ol>
<li>申请空间，使其大小为两个已经排序序列之和，该空间用来存放合并后的序列</li>
<li>设定两个指针，最初位置分别为两个已经排序序列的起始位置</li>
<li>比较两个指针所指向的元素，选择相对小的元素放入到合并空间，并移动指针到下一位置</li>
<li>重复步骤3直到某一指针达到序列尾</li>
<li>将另一序列剩下的所有元素直接复制到合并序列尾<br><img src="../assets/blogImg/combine_sort.gif" alt=""></li>
</ol>
<h2 id="4-二分查找算法"><a href="#4-二分查找算法" class="headerlink" title="4 二分查找算法"></a>4 二分查找算法</h2><p>　　二分查找算法是一种在有序数组中查找某一特定元素的搜索算法。搜素过程从数组的中间元素开始，如果中间元素正好是要查找的元素，则搜 素过程结束； 如果某一特定元素大于或者小于中间元素，则在数组大于或小于中间元素的那一半中查找，而且跟开始一样从中间元素开始比较。如果在某一步骤数组 为空，则代 表找不到。这种搜索算法每一次比较都使搜索范围缩小一半。折半搜索每次把搜索区域减少一半，时间复杂度为Ο(logn) 。</p>
<h2 id="5-BFPRT-线性查找算法"><a href="#5-BFPRT-线性查找算法" class="headerlink" title="5 BFPRT(线性查找算法)"></a>5 BFPRT(线性查找算法)</h2><p>BFPRT可以保证在最坏情况下仍为线性时间复杂度。算法在最坏情况下，依然能达到o(n)的时间复杂度</p>
<p>算法步骤：</p>
<ol>
<li>将n个元素每5个一组，分成n/5(上界)组。</li>
<li>取出每一组的中位数，任意排序方法，比如插入排序。</li>
<li>递归的调用selection算法查找上一步中所有中位数的中位数，设为x，偶数个中位数的情况下设定为选取中间小的一个。</li>
<li>用x来分割数组，设小于等于x的个数为k，大于x的个数即为n-k。</li>
<li>若i==k，返回x；若i<k，在小于x的元素中递归查找第i小的元素；若i>k，在大于x的元素中递归查找第i-k小的元素。<br>终止条件：n=1时，返回的即是i小元素。<h2 id="6-DFS（深度优先搜索）"><a href="#6-DFS（深度优先搜索）" class="headerlink" title="6 DFS（深度优先搜索）"></a>6 DFS（深度优先搜索）</h2>DFS属于盲目搜索。一般用堆数据结构来辅助实现DFS算法。</k，在小于x的元素中递归查找第i小的元素；若i></li>
</ol>
<p>深度优先遍历图算法步骤：</p>
<ol>
<li>访问顶点v；</li>
<li>依次从v的未被访问的邻接点出发，对图进行深度优先遍历；直至图中和v有路径相通的顶点都被访问；</li>
<li>若此时图中尚有顶点未被访问，则从一个未被访问的顶点出发，重新进行深度优先遍历，直到图中所有顶点均被访问过为止。</li>
</ol>
<h2 id="7-BFS-广度优先搜索"><a href="#7-BFS-广度优先搜索" class="headerlink" title="7 BFS(广度优先搜索)"></a>7 BFS(广度优先搜索)</h2><p>BFS同样属于盲目搜索。一般用队列数据结构来辅助实现BFS算法。</p>
<p>算法步骤：</p>
<ol>
<li>首先将根节点放入队列中。</li>
<li>从队列中取出第一个节点，并检验它是否为目标。<br>如果找到目标，则结束搜寻并回传结果。<br>否则将它所有尚未检验过的直接子节点加入队列中。</li>
<li>若队列为空，表示整张图都检查过了——亦即图中没有欲搜寻的目标。结束搜寻并回传“找不到目标”。</li>
<li>重复步骤2。</li>
</ol>
<p><img src="../assets/blogImg/bfs.gif" alt=""></p>
<h2 id="8-Dijkstra算法"><a href="#8-Dijkstra算法" class="headerlink" title="8 Dijkstra算法"></a>8 Dijkstra算法</h2><p>Dijkstra 算法可以找到 s 到 t的最低权 重路径(例如，最短路径)。这个算法也可以在一个图中，找到从一个顶点 s 到任何其他顶点的最短路径。对于不含负权的有向图，Dijkstra算法是目 前已知的最快的单源最短路径算法。</p>
<p>算法步骤：</p>
<ol>
<li>初始时令 S={V0},T={其余顶点}，T中顶点对应的距离值<br>若存在<v0,vi>，d(V0,Vi)为<v0,vi>弧上的权值<br>若不存在<v0,vi>，d(V0,Vi)为∞</v0,vi></v0,vi></v0,vi></li>
<li>从T中选取一个其距离值为最小的顶点W且不在S中，加入S</li>
<li>对其余T中顶点的距离值进行修改：若加进W作中间顶点，从V0到Vi的距离值缩短，则修改此距离值<br>重复上述步骤2、3，直到S中包含所有顶点，即W=Vi为止</li>
</ol>
<p><img src="../assets/blogImg/Dijkstra.gif" alt=""></p>
<h2 id="9-动态规划算法"><a href="#9-动态规划算法" class="headerlink" title="9 动态规划算法"></a>9 动态规划算法</h2><p>算法步骤：</p>
<ol>
<li>最优子结构性质。如果问题的最优解所包含的子问题的解也是最优的，我们就称该问题具有最优子结构性质（即满足最优化原理）。最优子结构性质为动态规划算法解决问题提供了重要线索。</li>
<li>子问题重叠性质。子问题重叠性质是指在用递归算法自顶向下对问题进行求解时，每次产生的子问题并不总是新问题，有些子问题会被重复计算多 次。 动态规划算法正是利用了这种子问题的重叠性质，对每一个子问题只计算一次，然后将其计算结果保存在一个表格中，当再次需要计算已经计算过的子问题 时，只是 在表格中简单地查看一下结果，从而获得较高的效率。</li>
</ol>
<h2 id="10-朴素贝叶斯分类算法"><a href="#10-朴素贝叶斯分类算法" class="headerlink" title="10 朴素贝叶斯分类算法"></a>10 朴素贝叶斯分类算法</h2><p>朴素贝叶斯分类算法是一种基于贝叶斯定理的简单概率分类算法。贝叶斯分类的基础是概率推理，就是在各种条件的存在不确定，仅知其出现概率的情况 下， 如何完成推理和决策任务。概率推理是与确定性推理相对应的。而朴素贝叶斯分类器是基于独立假设的，即假设样本每个特征与其他特征都不相关。</p>
]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[Android客户端跟服务器交互的安全问题（待续）]]></title>
      <url>http://yoursite.com/2016/03/05/Android%E5%AE%A2%E6%88%B7%E7%AB%AF%E8%B7%9F%E6%9C%8D%E5%8A%A1%E5%99%A8%E4%BA%A4%E4%BA%92%E7%9A%84%E5%AE%89%E5%85%A8%E9%97%AE%E9%A2%98%EF%BC%88%E5%BE%85%E7%BB%AD%EF%BC%89/</url>
      <content type="html"><![CDATA[<p>首先引入两个问题：</p>
<p>1.如何防止在向服务器请求或者发送数据时防止被伪造？</p>
<p>2.截取客户端数据并伪造成客户端发给服务器怎么办？</p>
<a id="more"></a>
<h3 id="1-客户端与服务器端交互的Token"><a href="#1-客户端与服务器端交互的Token" class="headerlink" title="1.客户端与服务器端交互的Token"></a>1.客户端与服务器端交互的Token</h3><p>Token为服务器按照一定加密方式生成的供客户端下次请求时无需带上用户名和密码的令牌。其存在是为了缓解频繁网络请求给服务器带来的压力。</p>
<h4 id="有两种使用方式：（TODO-待考证）"><a href="#有两种使用方式：（TODO-待考证）" class="headerlink" title="有两种使用方式：（TODO:待考证）"></a>有两种使用方式：（TODO:待考证）</h4><p>用设备号/设备mac地址作为Token：客户端在登录的时候获取设备的设备号/mac地址，并将其作为参数传递到服务端。客户端请求时需要带上设备号、mac地址，优点是客户端不需重新登录，只要登录一次以后一直可以使用。</p>
<p>用session值作为Token：当用户登录时，服务器会获取sessionID作为Token返回给客户端，客户端以后只需带上请求数据即可。session过期后，客户端必须重新登录。</p>
<h5 id="使用时，通常会设有refresh-token和access-token，refresh-token的有效期长于access-token。当请求时发现access-token过期了，客户端可以通过refresh-token来获取一个新的access-token，并且refresh-token的有效期也会重新计时。如果refresh-token也过期了，就只能重新登录了。"><a href="#使用时，通常会设有refresh-token和access-token，refresh-token的有效期长于access-token。当请求时发现access-token过期了，客户端可以通过refresh-token来获取一个新的access-token，并且refresh-token的有效期也会重新计时。如果refresh-token也过期了，就只能重新登录了。" class="headerlink" title="使用时，通常会设有refresh_token和access_token，refresh_token的有效期长于access_token。当请求时发现access_token过期了，客户端可以通过refresh_token来获取一个新的access_token，并且refresh_token的有效期也会重新计时。如果refresh_token也过期了，就只能重新登录了。"></a>使用时，通常会设有refresh_token和access_token，refresh_token的有效期长于access_token。当请求时发现access_token过期了，客户端可以通过refresh_token来获取一个新的access_token，并且refresh_token的有效期也会重新计时。如果refresh_token也过期了，就只能重新登录了。</h5><p>可以发现，Token的使用减小了客户端请求对服务器的压力，同时也避免了客户端用户密码暴露的风险。但是这对解决文章开头提出的两个问题无济于事，通过抓包或者其它的方式，客户端发出的数据很容易被利用。</p>
<h3 id="2-MITM攻击"><a href="#2-MITM攻击" class="headerlink" title="2.MITM攻击"></a>2.MITM攻击</h3><p>中文说法叫中间人攻击，它是一种间接的入侵方式，攻击模式是通过各种技术手段将受入侵者控制的一台计算机虚拟放置在网络连接中的两台通信计算机之间，这台计算机就称为“中间人”。</p>
<p><img src="/assets/blogImg/hacker.jpg" alt="黑客"></p>
<h4 id="DNS欺骗"><a href="#DNS欺骗" class="headerlink" title="DNS欺骗"></a>DNS欺骗</h4><p>攻击者通过入侵DNS服务器、控制路由器等方法把受害者要访问的目标机器域名对应的IP解析为攻击者所控制的机器，这样受害者原本要发送给目标机器的数据就发到了攻击者的机器上，这时攻击者就可以监听甚至修改数据，从而收集到大量的信息。</p>
<h4 id="会话劫持"><a href="#会话劫持" class="headerlink" title="会话劫持"></a>会话劫持</h4><p>会话劫持就是在一次正常的通信过程中，攻击者作为第三方参与到其中，或者是在数据里加入其他信息，甚至将双方的通信模式暗中改变，即从直接联系变成有攻击者参与的联系。</p>
<h4 id="代理服务器"><a href="#代理服务器" class="headerlink" title="代理服务器"></a>代理服务器</h4><p>这种利用代理服务器暗渡陈仓的做法简直天衣无缝，攻击者可以自己写一个带有数据记录功能的代理服务程序，它利用的是人们对代理的无条件信任和贪便宜的想法，使得一个又一个“兔子”自动撞了上来，在享受这顿似乎美味的“胡萝卜”的同时却不知道安全正在逐渐远离自己。</p>
<h3 id="3-https与SSL证书"><a href="#3-https与SSL证书" class="headerlink" title="3.https与SSL证书"></a>3.https与SSL证书</h3><p>用过网盾的人都知道，安装驱动进行交易时，它都需要你安装一个该银行的证书，这样才能保证交易的安全。</p>
<p><img src="/assets/blogImg/https.jpg" alt="https"></p>
<p>http的连接很简单，是无状态的。https是一个安全版的超文本传输协议，它由SSL+http协议构建，可进行加密传输，身份认证。</p>
<p>采用https的server必须从CA申请一个用于证明服务器用途类型的证书。服务端和客户端之间的所有通讯，都是加密的。第三方即使截获，也没有任何意义。因为他没有密钥。</p>
<p>SSL是Netscape公司所提出的安全保密协议，，SSL运行在TCP/IP层之上、应用层之下，为应用程序提供加密数据通道，它采用了RC4、MD5 以及RSA等加密算法，使用40 位的密钥，适用于商业信息的加密。</p>
<p>然而，加密和解密过程需要耗费系统大量的开销，严重降低机器的性能，相关测试数据表明使用HTTPS协议传输数据的工作效率只有使用HTTP协议传输的十分之一。因此只需对那些涉及机密数据的交互处理使用HTTPS协议即可。</p>
<h3 id="4-Android实现SSL通讯"><a href="#4-Android实现SSL通讯" class="headerlink" title="4.Android实现SSL通讯"></a>4.Android实现SSL通讯</h3><p>由于购买受信任机构颁发的证书需要交相对较高的费用，产生了自己给自己颁发的证书–自签名证书，其在手机应用中普及率较高。</p>
<p>由于在android操作系统中自己签署的不能通过验证的，所以安卓应用软件将会抛出错误。因此你需要书写自己的代码来检查你的自己签署的证书（<code>此处开发者缺失在密码学的概念的知识</code>）。</p>
<h4 id="创建自签名证书"><a href="#创建自签名证书" class="headerlink" title="创建自签名证书"></a>创建自签名证书</h4><p><strong>1.生成.keystore</strong></p>
<p>前往<a href="http://www.bouncycastle.org/latest_releases.html" target="_blank" rel="external">bouncycastle</a>下载最新jar包,<br>如<a href="http://www.bouncycastle.org/download/bcprov-jdk15on-154.jar" target="_blank" rel="external">http://www.bouncycastle.org/download/bcprov-jdk15on-154.jar</a></p>
<p>输入命令生成.keystore文件</p>
<pre><code>keytool -genkey -alias ssltest -keystore ssltest.keystore -validity 365
</code></pre><p>当要求你录入 Common name 的时候, 要填你的主机名</p>
<p><img src="/assets/blogImg/keystore.png" alt=""></p>
<p>随后将密钥(key)从 .keystore 文件导入 .cer 文件</p>
<pre><code>keytool -export -alias ssltest -keystore ssltest.keystore -file ssltest.cer
</code></pre><p>最后生成.bks文件</p>
<pre><code>keytool -import -alias ssltest -file ssltest.cer -keystore ssltest.bks -storetype BKS -providerClass org.bouncycastle.jce.provider.BouncyCastleProvider -providerpath bcprov-jdk15on-154.jar
</code></pre><p><img src="/assets/blogImg/bks.png" alt=""></p>
<p><strong>2.把.keystore文件复制到项目的/res/raw/目录下</strong></p>
<h2 id="3-使用"><a href="#3-使用" class="headerlink" title="3.使用"></a><strong>3.使用</strong></h2><p>待更新…</p>
<p>推荐阅读<a href="http://www.oschina.net/translate/android-security-implementation-of-self-signed-ssl" target="_blank" rel="external">为你的安卓应用实现自签名的 SSL 证书</a></p>
<p><a href="http://wenku.baidu.com/link?url=sacTUmHr2z_rqyd1wsfjyVIzPrSdLMMaQ_SZAoFN4GYFaR9un91ShhOoaPrv4U2j11qPiIOpS6b5wNhOXokcHqKnrL7GtF3Q94_cVg03uOi" target="_blank" rel="external">http://wenku.baidu.com/link?url=sacTUmHr2z_rqyd1wsfjyVIzPrSdLMMaQ_SZAoFN4GYFaR9un91ShhOoaPrv4U2j11qPiIOpS6b5wNhOXokcHqKnrL7GtF3Q94_cVg03uOi</a></p>
]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[Android Studio2.0 JNI 开发]]></title>
      <url>http://yoursite.com/2016/03/03/Android%20JNI%20%E5%BC%80%E5%8F%91/</url>
      <content type="html"><![CDATA[<h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><p>在当前Android性能不断提高的情况下，Java语言的一些缺陷逐渐被掩盖起来。什么时候使用NDK呢？</p>
<p>当设计的算法要利用Dalvik虚拟机中的所有处理器资源，而且原生运行较为有利，或者你希望的操作拥有尽可能快的处理速度时，就需要使用NDK。</p>
<a id="more"></a>
<p>另一个原因则是方便移植，特别对于OpenGL ES应用程序。</p>
<p>再一个原因就是为安全考虑。</p>
<p>但是Java与原生C语言之间的转换也会增加一些资源开销。</p>
<p>开源C库</p>
<ul>
<li>ffmpeg  音视频解码</li>
<li>opencore 音视频</li>
<li>opencv  图像处理</li>
</ul>
<h2 id="准备工作"><a href="#准备工作" class="headerlink" title="准备工作"></a>准备工作</h2><p><a href="http://developer.android.com/intl/zh-cn/ndk/downloads/index.html" target="_blank" rel="external">Google官网ndk地址</a><br><a href="https://dl.google.com/android/ndk/android-ndk-r10e-darwin-x86_64.bin" target="_blank" rel="external">直接下载ndk r10e最新版</a></p>
<p>以MAC OS系统为为例，打开命令行窗口</p>
<p>1.获取ndk存放目录的权限。</p>
<pre><code>chmod a+x android-ndk-r10c-darwin-x86_64.bin
</code></pre><p>2.解压缩</p>
<pre><code>./android-ndk-r10c-darwin-x86_64.bin  
(或直接把ndk文件拖进命令行)
</code></pre><p>3.配置变量环境</p>
<pre><code>pico .bash_profile
</code></pre><p> 然后进行编辑</p>
<pre><code>export NDK_ROOT=/Volumes/macwork/develop/ndk_r10e
export PATH=${PATH}:$NDK_ROOT
</code></pre><p><img src="/assets/blogImg/ndk_set.png" alt="ndk环境变量配置截图"></p>
<p>4.更新环境变量配置</p>
<pre><code>source .bash_profile
</code></pre><p>然后再进入<code>samples/hello-jni</code>目录，再执行<code>ndk-build</code>目录就可以编译了</p>
<p>5.进入Android studio,由于项目是用Eclipse写的，请选择<code>Import Project</code>导入Hello-jni项目，然后<code>File -&gt; Project Structure</code>配置ndk</p>
<p><img src="/assets/blogImg/as_ndk_set.png" alt="as ndk配置"></p>
<p>若出现<code>NDK integration is deprecated in the current plugin</code>问题，在 gradle.properties 中配置 <strong>android.useDeprecatedNdk=true</strong> 即可。as2.0已支持<code>ctrl + 点击</code>跳转到本地方法的定义c函数，没有定义过的方法也会高亮显示,还能自动导包。还在用eclipse的童鞋，you are drunk!都什么年代了。然后可以运行了。</p>
<h2 id="开动学习啦"><a href="#开动学习啦" class="headerlink" title="开动学习啦"></a>开动学习啦</h2><h3 id="1-build-gradle配置，mk文件配置"><a href="#1-build-gradle配置，mk文件配置" class="headerlink" title="1.build.gradle配置，mk文件配置"></a>1.build.gradle配置，mk文件配置</h3><p>先看app目录下面的build.gradle文件，需要配置jni模块名：</p>
<figure class="highlight nginx"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line"><span class="section">ndk</span> &#123;</div><div class="line">         <span class="attribute">moduleName</span> <span class="string">"hello-jni"</span></div><div class="line">    &#125;</div></pre></td></tr></table></figure>
<p>实际还有更多可以配置</p>
<figure class="highlight dts"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line"><span class="class">ndk </span>&#123;  </div><div class="line">  moduleName <span class="string">"hello-jni"</span>  <span class="comment">//模块名</span></div><div class="line">  cFlags <span class="string">"-DANDROID_NDK -D_DEBUG DNULL=0"</span>   <span class="comment">// 定义一些宏指令（macros） </span></div><div class="line">  ldLibs <span class="string">"EGL"</span>, <span class="string">"GLESv3"</span>, <span class="string">"dl"</span>, <span class="string">"log"</span>       <span class="comment">//  在这里添加你原先在makefile里ldlibs所链接的库</span></div><div class="line">  stl <span class="string">"stlport_shared"</span>                      <span class="comment">// 使用 shared stlport library</span></div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h3 id="2-增加一个sayHello-方法"><a href="#2-增加一个sayHello-方法" class="headerlink" title="2.增加一个sayHello()方法"></a>2.增加一个sayHello()方法</h3><p>1.在hello-jni.c 中增加如下代码</p>
<figure class="highlight c"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line"><span class="function">jstring <span class="title">Java_com_example_hellojni_HelloJni_sayHello</span><span class="params">(JNIEnv *env,jobject thiz)</span></span>&#123;</div><div class="line">    <span class="keyword">return</span> (*env)-&gt;NewStringUTF(env,<span class="string">"hello world"</span>);</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>应该注意开头的<code>J</code>字要大写，随后的为包名<em>类名</em>本地方法名</p>
<p>2.然后在HelloJni.java中写上该方法</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">native</span> String <span class="title">sayHello</span><span class="params">()</span></span>;</div></pre></td></tr></table></figure>
<p>然后就可以调用了。其中使用了闭包来导入了编译好的.so文件</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">static</span> &#123;</div><div class="line">        System.loadLibrary(<span class="string">"hello-jni"</span>);</div><div class="line">    &#125;</div></pre></td></tr></table></figure>
<p>3.或可以使用javah命令直接生成native c头文件<br>进入到hello-jni/app/src/main/java 目录，执行</p>
<figure class="highlight stylus"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">javah -d ../jni com<span class="selector-class">.example</span><span class="selector-class">.hellojni</span><span class="selector-class">.HelloJni</span></div></pre></td></tr></table></figure>
<p>即可生成头文件。</p>
<p>4.运行时as2.0需要关闭<code>instant-run</code>的功能，否则会出现.so文件找不到的错误。c文件的编译也不需要我们费心了，as自动会编译好。</p>
<h3 id="3-C调用Java代码"><a href="#3-C调用Java代码" class="headerlink" title="3.C调用Java代码"></a>3.C调用Java代码</h3><h4 id="C调用logcat打印日志"><a href="#C调用logcat打印日志" class="headerlink" title="C调用logcat打印日志"></a>C调用logcat打印日志</h4><ul>
<li>1.修改build.gradle里ndk节点的内容：</li>
</ul>
<figure class="highlight dts"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line"><span class="class">ndk </span>&#123;</div><div class="line">    moduleName <span class="string">"HelloJNI"</span></div><div class="line">    stl <span class="string">"stlport_static"</span> <span class="comment">//单步调试支持</span></div><div class="line">    ldLibs <span class="string">"log"</span>   <span class="comment">//添加c调用logcat打印日志的支持库</span></div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>然后添加以下代码到buildTypes下：</p>
<figure class="highlight nginx"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line"><span class="section">debug</span> &#123;</div><div class="line">    <span class="attribute">jniDebuggable</span> <span class="literal">true</span></div><div class="line">&#125;</div></pre></td></tr></table></figure>
<ul>
<li>2.引入头文件 <code>#include&lt;android/log.h&gt;</code>,其中包含<code>__android_log_print()</code>方法，为方便使用做个宏定义：</li>
</ul>
<figure class="highlight c"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;android/log.h&gt;</span></span></div><div class="line"></div><div class="line"><span class="meta">#<span class="meta-keyword">define</span> LOG_TAG <span class="meta-string">"clog"</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">define</span> LOGD(...) __android_log_print(ANDROID_LOG_DEBUG,LOG_TAG,__VA_ARGS__);</span></div><div class="line"><span class="meta">#<span class="meta-keyword">define</span> LOGI(...) __android_log_print(ANDROID_LOG_INFO,LOG_TAG,__VA_ARGS__);</span></div><div class="line"><span class="comment">//参数prio在头文件的android_LogPriority枚举中选择</span></div></pre></td></tr></table></figure>
<h4 id="c操作java字符串"><a href="#c操作java字符串" class="headerlink" title="c操作java字符串"></a>c操作java字符串</h4><p>c中没有string类型，故须将java字符串转化为c语言的char数组</p>
<h4 id="c操作java数组"><a href="#c操作java数组" class="headerlink" title="c操作java数组"></a>c操作java数组</h4><figure class="highlight c"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">int</span> length=(*env)-&gt;getArrayLength(env,jarray);</div><div class="line"><span class="keyword">int</span>* <span class="built_in">array</span>=(*env)-&gt;getIntArrayElements(env,jarray,<span class="number">0</span>);</div><div class="line"><span class="comment">//对该数组进行操作，实际操作的都是传进来的jarray,直接返回即可</span></div></pre></td></tr></table></figure>
<h3 id="4-c代码调用java代码"><a href="#4-c代码调用java代码" class="headerlink" title="4.c代码调用java代码"></a>4.c代码调用java代码</h3><p>1.调用自己的方法。env参数指向java虚拟机环境，jobject指向本对象</p>
<figure class="highlight c"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line"><span class="comment">//获取类的字节码文件  </span></div><div class="line">jclass clazz = (*env)-&gt;FindClass(env,<span class="string">"com/example/MainActivity"</span>);</div><div class="line"><span class="comment">//获取方法签名、参数和返回值,可使用javap命令获取方法签名</span></div><div class="line">jmethodID methodId=(*env)-&gt;GetMethodID(env,clazz,<span class="string">"helloFromJava"</span>,<span class="string">"()V"</span>);</div><div class="line">(*env)-&gt;CallVoidMethod(env,jobject,methodId);</div></pre></td></tr></table></figure>
<p>2.当在本对象里调用其它类的方法时，需要创建那个类的对象，方法如下</p>
<figure class="highlight c"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">jobject obj=(*env)-&gt;AllocObject(env,clazz);</div></pre></td></tr></table></figure>
<p>3.调用静态方法</p>
<figure class="highlight c"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">jmethodID methodId=(*env)-&gt;GetStaticMethodID(env,clazz,<span class="string">"methodname"</span>,<span class="string">"()V"</span>);</div><div class="line">(*env)-&gt;CallStaticVoidMethod(clazz,methodId);</div></pre></td></tr></table></figure>
<h2 id="补充知识"><a href="#补充知识" class="headerlink" title="补充知识"></a>补充知识</h2><h3 id="java方法签名"><a href="#java方法签名" class="headerlink" title="java方法签名"></a>java方法签名</h3><h3 id="java和c的比较"><a href="#java和c的比较" class="headerlink" title="java和c的比较"></a>java和c的比较</h3><table>
<thead>
<tr>
<th>java</th>
<th>byte</th>
<th>short</th>
<th>char</th>
<th>int</th>
<th>float</th>
<th>double</th>
<th>long</th>
</tr>
</thead>
<tbody>
<tr>
<td>占用字节数</td>
<td>1</td>
<td>2</td>
<td>2</td>
<td>4</td>
<td>4</td>
<td>8</td>
<td>8</td>
</tr>
</tbody>
</table>
<table>
<thead>
<tr>
<th>c</th>
<th>char</th>
<th>short</th>
<th>long</th>
<th>int</th>
<th>float</th>
<th>double</th>
</tr>
</thead>
<tbody>
<tr>
<td>占用字节数</td>
<td>1</td>
<td>2</td>
<td>4</td>
<td>4</td>
<td>4</td>
<td>8</td>
<td></td>
</tr>
</tbody>
</table>
<ul>
<li>java中int float double short类型可以直接用c中相应类型代替</li>
<li>c中的char可用java中的byte代替</li>
<li>c中的long可用java中int代替</li>
<li>java中的long可用c中的long long代替</li>
<li><code>指针(表示一个地址)，指针变量(变量的值为地址)</code></li>
<li>＊在类型后表示该类型的指针变量，int<em> p=&i; 则</em>p＝i；表示p指向的地址里存的值，p为int型的指针变量，p的值为i的地址</li>
<li>＊在变量前表示该地址里存的值，*p = i</li>
<li>动态分配内存 ＊p=(int＊)malloc(sizeof(int));</li>
<li><p>c语言内存：</p>
<blockquote>
<ul>
<li>.data  常量池</li>
<li>.code  代码段</li>
<li>.stack 所有静态分配的内存都放在栈内存中，连续分配</li>
<li>堆内存  动态分配的内存都放在堆内存中，不连续分配</li>
</ul>
</blockquote>
</li>
<li><p>函数指针</p>
<figure class="highlight c"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">int</span> (*pf)(<span class="keyword">int</span> x,<span class="keyword">int</span> y);</div><div class="line">pf = add;</div><div class="line">pf(x,y);</div></pre></td></tr></table></figure>
</li>
</ul>
<p>–<br>学习中…</p>
]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[RxJava/RxAndroid响应式编程框架简析]]></title>
      <url>http://yoursite.com/2016/03/03/RxJava-RxAndroid%E7%AE%80%E7%94%A8TODO/</url>
      <content type="html"><![CDATA[<h2 id="引言"><a href="#引言" class="headerlink" title="引言"></a>引言</h2><p>谈到RxJava，首先得说一说观察者模式。</p>
<p>在此种模式中，一个目标物件管理所有相依于它的观察者物件，并且在它本身的状态改变时主动发出通知。这通常透过呼叫各观察者所提供的方法来实现。此种模式通常被用来实现事件处理系统。</p>
<a id="more"></a>
<p>例如，按钮的点击事件和事件监听就是一种很常见的观察者模式。<br><img src="/assets/blogImg/observer.png" alt=""></p>
<p>Button作为被观察者(Observable)，OnClickListener作为观察者(Observer)，Button需要注册监听事件，也就是通过setOnclickListener(Subscribe)达成两者的订阅关系。当Button被点击时，Button就会向它的观察者（Button被订阅，所以观察者也相当于订阅者）发送一个<code>广播</code>，随后观察者对事件进行响应。</p>
<p>RxJava利用这种订阅的方式，使得异步操作更加方便，代码逻辑的简洁性大大提高，便于维护，其旨在提供一个更加流畅的应用体验。</p>
<p>总而言之，RxJava是一个利用观察者模式，可方便处理基于事件的异步操作的编程库。</p>
<h2 id="RxJava的使用"><a href="#RxJava的使用" class="headerlink" title="RxJava的使用"></a>RxJava的使用</h2><p>RxJava拥有四个概念，Observable (可观察者，即被观察者)、 Observer (观察者)、 subscribe (订阅)、事件。</p>
<h3 id="1-创建Observer"><a href="#1-创建Observer" class="headerlink" title="1.创建Observer"></a>1.创建Observer</h3><p>Subscriber(订阅者)与Observer的使用方法一致，实际在内部，Observer也是转为Subscriber来使用的。</p>
<h3 id="2-创建Observable"><a href="#2-创建Observable" class="headerlink" title="2.创建Observable"></a>2.创建Observable</h3><h3 id="3-添加Subscribe-订阅"><a href="#3-添加Subscribe-订阅" class="headerlink" title="3.添加Subscribe(订阅)"></a>3.添加Subscribe(订阅)</h3><h2 id="RxAndroid"><a href="#RxAndroid" class="headerlink" title="RxAndroid"></a>RxAndroid</h2><h3 id="AndroidSchedulers"><a href="#AndroidSchedulers" class="headerlink" title="AndroidSchedulers"></a>AndroidSchedulers</h3><p>针对Android的线程调度器</p>
<h3 id="AndroidObservable"><a href="#AndroidObservable" class="headerlink" title="AndroidObservable"></a>AndroidObservable</h3><p>可用于监听Android的生命周期，通过<code>广播</code></p>
<hr>
<p>学习中</p>
]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[Android线程学习]]></title>
      <url>http://yoursite.com/2016/03/01/Android%E7%BA%BF%E7%A8%8B/</url>
      <content type="html"><![CDATA[<ul>
<li><p>在安装android应用程序时，android会为每一个应用程序分配一个linux用户id，除非应用间在manifest.xml中定义了相同的android:sharedUserId属性，其它应用不能访问此应用的数据和资源。</p>
<blockquote>
<p>拥有相同linux id的应用可以运行在同一个进程内，共享同一个java虚拟机</p>
<a id="more"></a></blockquote>
</li>
<li>单线程模型原则：android UI操作不是线程安全的，并且这些操作必须在UI线程中执行</li>
<li><p>UI线程超过5s没有相应用户请求，会弹出对话框提醒用户终止应用。耗时操作需要新开线程，采用Message Quenue机制保证线程间的通信</p>
<blockquote>
<p>Handler可与UI线程通信，Handler把消息传递给Looper，Looper再把消息传递放入队列，Looper也把消息队列里的消息广播给所有Handler，Handler接收到消息后调用handleMessage方法处理</p>
<blockquote>
<ul>
<li>1.使用sendMessage()：通过Handler将消息发送给消息队列</li>
<li>2.在发送消息的时候，使用message.target=this为handler发送的message贴上当前handler的标签</li>
<li>3.开启HandlerThread线程，执行run方法。</li>
<li>4.在HandlerThread类的run方法中开启轮询器进行轮询：调用Looper.loop()方法进行轮询消息队列的消息</li>
<li>5.在消息队列MessageQueue中enqueueMessage(Message msg, long when)方法里，对消息进行入列，即依据传入的时间进行消息入列（排队）</li>
<li>6.轮询消息：与此同时，Looper在不断的轮询消息队列</li>
<li>7.在Looper.loop()方法中，获取到MessageQueue对象后，从中取出消息（Message msg = queue.next()），如果没有消息会堵塞</li>
<li>8.分发消息：从消息队列中取出消息后，调用msg.target.dispatchMessage(msg);进行分发消息</li>
<li>9.将处理好的消息分发给指定的handler处理，即调用了handler的dispatchMessage(msg)方法进行分发消息。</li>
<li>10.在创建handler时，复写的handleMessage方法中进行消息的处理</li>
<li>11.回收消息：在消息使用完毕后，在Looper.loop()方法中调用msg.recycle()，将消息进行回收，即将消息的所有字段恢复为初始状态。</li>
</ul>
</blockquote>
</blockquote>
</li>
<li><p>AsyncTask用于解决handler自己管理线程类的麻烦(<code>TODO:有bug，待补充</code>)</p>
<blockquote>
<p> onPreExecute() 执行后台操作前由UI线程调用<br> doInBackgroud() 在后台线程中处理耗时操作<br> onPostExcute() 后台操作执行完毕后在UI线程中调用</p>
</blockquote>
</li>
</ul>
<h3 id="android-IPC-进程间通信-机制Binder"><a href="#android-IPC-进程间通信-机制Binder" class="headerlink" title="android IPC(进程间通信) 机制Binder"></a>android IPC(进程间通信) 机制Binder</h3><ul>
<li><p>Linux通信机制：管道(Pipe)、信号(Signal)、跟踪(Trace)－－只能用于父子或兄弟进程间通信。后又增加了Named Pipe</p>
</li>
<li><p>在Android的Binder机制中，由Client、Server、Service Manager和Binder驱动程序组成，前三者运行在用户空间，Binder驱动程序运行在内核空间。Binder机制无论从系统开发还是应用开发的角度看，都是android中最重要的组成部分。</p>
<blockquote>
<ul>
<li>Binder驱动程序和Service Manager在Android平台已经实现，开发者只需在用户空间实现Client和Server</li>
<li>Binder驱动程序提供设备文件/dev/binder与用户空间交互，可通过文件操作函数open()和ioctl()与Binder驱动程序通信</li>
<li>Service Manager是一个守护进程，用来管理服务器端，并向客户端提供查询服务器端接口的能力(Binder机制的上下文管理者)</li>
</ul>
</blockquote>
</li>
</ul>
<hr>
<p>学习中</p>
]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[数据结构与算法学习]]></title>
      <url>http://yoursite.com/2016/03/01/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E4%B8%8E%E7%AE%97%E6%B3%95%E5%AD%A6%E4%B9%A0/</url>
      <content type="html"><![CDATA[<ul>
<li>链式存储结构 －－ 线性表插入时，中间留有内存地址都有可能应为地址不够或者造成浪费。解决办法是每个元素多用一个位置来存放指向下一个元素位置的指针，这样各个元素都可以找到下一个元素<a id="more"></a>   
<pre><code>链表中第一个结点的存储位置叫头指针，最后一个结点指针为空。
头结点放在第一个元素的结点之前，其数据域一般无意义(为操作的统一和方便而设立)，头指针指向头结点
</code></pre></li>
</ul>
<h4 id="八皇后问题"><a href="#八皇后问题" class="headerlink" title="八皇后问题"></a>八皇后问题</h4><figure class="highlight"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div><div class="line">61</div><div class="line">62</div><div class="line">63</div><div class="line">64</div><div class="line">65</div><div class="line">66</div><div class="line">67</div><div class="line">68</div><div class="line">69</div><div class="line">70</div><div class="line">71</div><div class="line">72</div><div class="line">73</div><div class="line">74</div><div class="line">75</div><div class="line">76</div><div class="line">77</div><div class="line">78</div><div class="line">79</div><div class="line">80</div><div class="line">81</div><div class="line">82</div><div class="line">83</div><div class="line">84</div><div class="line">85</div><div class="line">86</div><div class="line">87</div></pre></td><td class="code"><pre><div class="line">#include &lt;stdio.h&gt;</div><div class="line"></div><div class="line">int notDanger(int row,int j,int (*chess)[8])&#123;</div><div class="line">  int i,k,flag1=0,flag2=0,flag3=0,flag4=0,flag5=0;</div><div class="line">  //判断列方向</div><div class="line">  for(i;i&lt;8;i++)&#123;</div><div class="line">    if(*(*(chess+i)+j)!=0)&#123;</div><div class="line">      flag1 = 1;</div><div class="line">      break;</div><div class="line">    &#125;</div><div class="line">  &#125;</div><div class="line">  //判断左上方</div><div class="line">  for(i=row,k=j;i&gt;=0&amp;&amp;k&gt;=0;i--,k--)&#123;</div><div class="line">    if (*(*(chess+i)+k)!=0) &#123;</div><div class="line">      flag2=1;</div><div class="line">      break;</div><div class="line">    &#125;</div><div class="line">  &#125;</div><div class="line">  //判断右下方</div><div class="line">  for(i=row,k=j;i&lt;8&amp;&amp;k&lt;8;i++,k++)&#123;</div><div class="line">    if (*(*(chess+i)+k)!=0) &#123;</div><div class="line">      flag3=1;</div><div class="line">      break;</div><div class="line">    &#125;</div><div class="line">  &#125;</div><div class="line">  //判断右上方</div><div class="line">  for(i=row,k=j;i&gt;=0&amp;&amp;k&lt;8;i--,k++)&#123;</div><div class="line">    if (*(*(chess+i)+k)!=0) &#123;</div><div class="line">      flag4=1;</div><div class="line">      break;</div><div class="line">    &#125;</div><div class="line">  &#125;</div><div class="line">  //判断左下方</div><div class="line">  for(i=row,k=j;i&lt;8&amp;&amp;k&gt;=0;i++,k--)&#123;</div><div class="line">    if (*(*(chess+i)+k)!=0) &#123;</div><div class="line">      flag5=1;</div><div class="line">      break;</div><div class="line">    &#125;</div><div class="line">  &#125;</div><div class="line">  if(flag1||flag2||flag3||flag4||flag5)&#123;</div><div class="line">    return 0;</div><div class="line">  &#125;else&#123;</div><div class="line">    return 1;</div><div class="line">  &#125;</div><div class="line">&#125;</div><div class="line">int count=0;</div><div class="line">void eightQueen(int row,int n,int (*chess)[0])&#123;</div><div class="line">  int chess2[8][8],i,j;</div><div class="line"></div><div class="line">  for(i=0;i&lt;8;i++)&#123;</div><div class="line"> 		for(j=0;j&lt;8;j++)&#123;</div><div class="line"> 			chess2[i][j] = 0; //初始化赋0</div><div class="line"> 		&#125;</div><div class="line"> 	&#125;</div><div class="line">  if (0==row) &#123;</div><div class="line">    printf("第%d种\n", count+=1);</div><div class="line">    for(i=0;i&lt;8;i++)&#123;</div><div class="line">   		for(j=0;j&lt;8;j++)&#123;</div><div class="line">   			printf("%d  ",  *(*(chess2+i)+j));</div><div class="line">   		&#125;</div><div class="line">      printf("\n");</div><div class="line">   	&#125;</div><div class="line">    printf("\n");</div><div class="line">  &#125;else&#123;</div><div class="line">    for(j=0;j&lt;n;j++)&#123;</div><div class="line">      if (notDanger(row,j,chess)) &#123;//判断是否危险</div><div class="line">        for(i=0;i&lt;8;i++)&#123;</div><div class="line">          *(*(chess2+row)+i)=0;</div><div class="line">        &#125;</div><div class="line">        *(*(chess2+row)+i)=1;</div><div class="line">        eightQueen(row+1,n,chess2);</div><div class="line">      &#125;</div><div class="line">    &#125;</div><div class="line">  &#125;</div><div class="line">&#125;</div><div class="line"></div><div class="line"> int main()&#123;</div><div class="line"> 	int chess[8][8],i,j;</div><div class="line"> 	for(i=0;i&lt;8;i++)&#123;</div><div class="line"> 		for(j=0;j&lt;8;j++)&#123;</div><div class="line"> 			chess[i][j] = 0; //初始化赋0</div><div class="line"> 		&#125;</div><div class="line"> 	&#125;</div><div class="line">  eightQueen(8,8,chess);</div><div class="line">  printf("总共有%d种解决办法\n", count);</div><div class="line">  return 0;</div><div class="line"> &#125;</div></pre></td></tr></table></figure>
<h4 id="KMP算法－－回溯"><a href="#KMP算法－－回溯" class="headerlink" title="KMP算法－－回溯"></a>KMP算法－－回溯</h4><h4 id="二叉树-Binary-Tree"><a href="#二叉树-Binary-Tree" class="headerlink" title="二叉树 Binary Tree"></a>二叉树 Binary Tree</h4><p>不存在度大于2的结点，二叉树要区分左右，叶子深度相同</p>
<ul>
<li><p>特殊二叉树</p>
<pre><code>斜树
满二叉树 －－所有层都满
完全二叉树 －－叶子只能出现在最下两层，序号连续
</code></pre><p>–<br>学习中…</p>
</li>
</ul>
]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[自定义不占满全屏可左右滑动的卡片]]></title>
      <url>http://yoursite.com/2016/03/01/%E8%87%AA%E5%AE%9A%E4%B9%89%E5%B7%A6%E5%8F%B3%E6%BB%91%E5%8A%A8%E5%8D%A1%E7%89%87%E5%B8%83%E5%B1%80/</url>
      <content type="html"><![CDATA[<h4 id="效果图"><a href="#效果图" class="headerlink" title="效果图"></a>效果图</h4><p><img src="/assets/blogImg/card_slide.png" alt="最终效果"></p>
<h3 id="方案一-修改ViewPager"><a href="#方案一-修改ViewPager" class="headerlink" title="方案一  修改ViewPager"></a>方案一  修改ViewPager</h3><p>实践中发现许多较为关键的类、变量、方法都是私有的，无法进行操作，只好定义SuperViewPager继承自ViewGroup，复制ViewPager里面所有内容并进行修改</p>
<ul>
<li><p>1.定义两个自定义属性，pagerSpace代表两个卡片之间的距离，pageOerlayWidth代表卡片越界布局的宽度</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">public</span> <span class="title">SuperViewPager</span><span class="params">(Context context, AttributeSet attrs)</span> </span>&#123;</div><div class="line">       <span class="keyword">super</span>(context, attrs);</div><div class="line"></div><div class="line">       TypedArray a = context.obtainStyledAttributes(attrs, R.styleable.SuperPager);</div><div class="line">       pagerSpace = a.getDimensionPixelSize(R.styleable.SuperPager_sp_pagerSpace, (<span class="keyword">int</span>) dp2px(<span class="number">20</span>));</div><div class="line">       pageOerlayWidth = a.getDimensionPixelSize(R.styleable.SuperPager_sp_pageOerlayWidth, (<span class="keyword">int</span>) dp2px(<span class="number">12</span>));</div><div class="line">       a.recycle();</div><div class="line"></div><div class="line">       initViewPager();</div><div class="line">   &#125;</div></pre></td></tr></table></figure>
</li>
<li><p>2.修改onLayout()方法</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div><div class="line">61</div><div class="line">62</div><div class="line">63</div><div class="line">64</div><div class="line">65</div><div class="line">66</div><div class="line">67</div><div class="line">68</div><div class="line">69</div><div class="line">70</div><div class="line">71</div><div class="line">72</div><div class="line">73</div><div class="line">74</div><div class="line">75</div><div class="line">76</div><div class="line">77</div><div class="line">78</div><div class="line">79</div><div class="line">80</div><div class="line">81</div><div class="line">82</div><div class="line">83</div><div class="line">84</div><div class="line">85</div><div class="line">86</div><div class="line">87</div><div class="line">88</div><div class="line">89</div><div class="line">90</div><div class="line">91</div><div class="line">92</div><div class="line">93</div><div class="line">94</div><div class="line">95</div></pre></td><td class="code"><pre><div class="line"><span class="meta">@Override</span></div><div class="line">   <span class="function"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title">onLayout</span><span class="params">(<span class="keyword">boolean</span> changed, <span class="keyword">int</span> l, <span class="keyword">int</span> t, <span class="keyword">int</span> r, <span class="keyword">int</span> b)</span> </span>&#123;</div><div class="line">       <span class="keyword">final</span> <span class="keyword">int</span> count = getChildCount();</div><div class="line">       <span class="keyword">int</span> width = r - l;</div><div class="line">       <span class="keyword">int</span> height = b - t;</div><div class="line">       <span class="keyword">int</span> paddingLeft = getPaddingLeft();</div><div class="line">       <span class="keyword">int</span> paddingTop = getPaddingTop();</div><div class="line">       <span class="keyword">int</span> paddingRight = getPaddingRight();</div><div class="line">       <span class="keyword">int</span> paddingBottom = getPaddingBottom();</div><div class="line">       <span class="keyword">final</span> <span class="keyword">int</span> scrollX = getScrollX();</div><div class="line"></div><div class="line">       <span class="keyword">int</span> decorCount = <span class="number">0</span>;</div><div class="line"></div><div class="line">       <span class="comment">// First pass - decor views. We need to do this in two passes so that</span></div><div class="line">       <span class="comment">// we have the proper offsets for non-decor views later.</span></div><div class="line">       <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; count; i++) &#123;</div><div class="line">           <span class="keyword">final</span> View child = getChildAt(i);</div><div class="line">           <span class="keyword">if</span> (child.getVisibility() != GONE) &#123;</div><div class="line">               <span class="keyword">final</span> LayoutParams lp = (LayoutParams) child.getLayoutParams();</div><div class="line">               <span class="keyword">int</span> childLeft = <span class="number">0</span>;</div><div class="line">               <span class="keyword">int</span> childTop = <span class="number">0</span>;</div><div class="line">               <span class="keyword">if</span> (lp.isDecor) &#123;</div><div class="line">                   <span class="keyword">final</span> <span class="keyword">int</span> hgrav = lp.gravity &amp; Gravity.HORIZONTAL_GRAVITY_MASK;</div><div class="line">                   <span class="keyword">final</span> <span class="keyword">int</span> vgrav = lp.gravity &amp; Gravity.VERTICAL_GRAVITY_MASK;</div><div class="line">                   <span class="keyword">switch</span> (hgrav) &#123;</div><div class="line">                       <span class="keyword">default</span>:</div><div class="line">                           childLeft = paddingLeft;</div><div class="line">                           <span class="keyword">break</span>;</div><div class="line">                       <span class="keyword">case</span> Gravity.LEFT:</div><div class="line">                           childLeft = paddingLeft;</div><div class="line">                           paddingLeft += child.getMeasuredWidth();</div><div class="line">                           <span class="keyword">break</span>;</div><div class="line">                       <span class="keyword">case</span> Gravity.CENTER_HORIZONTAL:</div><div class="line">                           childLeft = Math.max((width - child.getMeasuredWidth()) / <span class="number">2</span>,</div><div class="line">                                   paddingLeft);</div><div class="line">                           <span class="keyword">break</span>;</div><div class="line">                       <span class="keyword">case</span> Gravity.RIGHT:</div><div class="line">                           childLeft = width - paddingRight - child.getMeasuredWidth();</div><div class="line">                           paddingRight += child.getMeasuredWidth();</div><div class="line">                           <span class="keyword">break</span>;</div><div class="line">                   &#125;</div><div class="line">                   <span class="keyword">switch</span> (vgrav) &#123;</div><div class="line">                       <span class="keyword">default</span>:</div><div class="line">                           childTop = paddingTop;</div><div class="line">                           <span class="keyword">break</span>;</div><div class="line">                       <span class="keyword">case</span> Gravity.TOP:</div><div class="line">                           childTop = paddingTop;</div><div class="line">                           paddingTop += child.getMeasuredHeight();</div><div class="line">                           <span class="keyword">break</span>;</div><div class="line">                       <span class="keyword">case</span> Gravity.CENTER_VERTICAL:</div><div class="line">                           childTop = Math.max((height - child.getMeasuredHeight()) / <span class="number">2</span>,</div><div class="line">                                   paddingTop);</div><div class="line">                           <span class="keyword">break</span>;</div><div class="line">                       <span class="keyword">case</span> Gravity.BOTTOM:</div><div class="line">                           childTop = height - paddingBottom - child.getMeasuredHeight();</div><div class="line">                           paddingBottom += child.getMeasuredHeight();</div><div class="line">                           <span class="keyword">break</span>;</div><div class="line">                   &#125;</div><div class="line">                   childLeft += scrollX;</div><div class="line">                   child.layout(childLeft, childTop,</div><div class="line">                           childLeft + child.getMeasuredWidth(),</div><div class="line">                           childTop + child.getMeasuredHeight());</div><div class="line">                   decorCount++;</div><div class="line">               &#125;</div><div class="line">           &#125;</div><div class="line">       &#125;</div><div class="line">       <span class="comment">//以下为关键代码</span></div><div class="line">       <span class="keyword">int</span> pageWidth = width - paddingLeft - paddingRight - <span class="number">2</span> * pagerSpace - <span class="number">2</span> * pageOerlayWidth;</div><div class="line">       <span class="comment">// Page views. Do this once we have the right padding offsets from above.</span></div><div class="line">       <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; count; i++) &#123;</div><div class="line">           <span class="keyword">final</span> View child = getChildAt(i);</div><div class="line">           <span class="keyword">if</span> (child.getVisibility() != GONE) &#123;</div><div class="line">               <span class="keyword">final</span> LayoutParams lp = (LayoutParams) child.getLayoutParams();</div><div class="line">               ItemInfo ii;</div><div class="line">               <span class="keyword">if</span> (!lp.isDecor &amp;&amp; (ii = infoForChild(child)) != <span class="keyword">null</span>) &#123;</div><div class="line"></div><div class="line">                   <span class="keyword">int</span> loff = (<span class="keyword">int</span>) ((pageWidth+pagerSpace) * ii.offset);</div><div class="line">                   <span class="keyword">int</span> childLeft = paddingLeft + pageOerlayWidth + pagerSpace + loff;</div><div class="line">                   <span class="keyword">int</span> childTop = paddingTop;</div><div class="line"></div><div class="line">                   child.layout(childLeft, childTop,</div><div class="line">                           childLeft + pageWidth,</div><div class="line">                           childTop + child.getMeasuredHeight());</div><div class="line">               &#125;</div><div class="line">           &#125;</div><div class="line">       &#125;</div><div class="line">       mTopPageBounds = paddingTop;</div><div class="line">       mBottomPageBounds = height - paddingBottom;</div><div class="line">       mDecorChildCount = decorCount;</div><div class="line"></div><div class="line">       <span class="keyword">if</span> (mFirstLayout) &#123;</div><div class="line">           scrollToItem(mCurItem, <span class="keyword">false</span>, <span class="number">0</span>, <span class="keyword">false</span>);</div><div class="line">       &#125;</div><div class="line">       mFirstLayout = <span class="keyword">false</span>;</div><div class="line">   &#125;</div></pre></td></tr></table></figure>
<p>先计算卡片宽度为：viewpager宽度－padding值－两边的pagerSpace－两边的pageOverlayWidth</p>
<p>然后根据child计算左边坐标的偏移量</p>
</li>
<li><p>3.修改scrollToItem(int item, boolean smoothScroll, int velocity,</p>
<pre><code>boolean dispatchSelected)方法
</code></pre><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div></pre></td><td class="code"><pre><div class="line"> <span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">scrollToItem</span><span class="params">(<span class="keyword">int</span> item, <span class="keyword">boolean</span> smoothScroll, <span class="keyword">int</span> velocity,</span></span></div><div class="line">                             <span class="keyword">boolean</span> dispatchSelected) &#123;</div><div class="line">       <span class="keyword">final</span> ItemInfo curInfo = infoForPosition(item);</div><div class="line">       <span class="keyword">int</span> destX = <span class="number">0</span>;</div><div class="line">       <span class="keyword">if</span> (curInfo != <span class="keyword">null</span>) &#123;</div><div class="line">           <span class="keyword">final</span> <span class="keyword">int</span> width = getClientWidth();</div><div class="line">           destX = (<span class="keyword">int</span>) ((width - <span class="number">2</span> * pageOerlayWidth - pagerSpace) * Math.max(mFirstOffset, Math.min(curInfo.offset, mLastOffset)));</div><div class="line">       &#125;</div><div class="line">       <span class="keyword">if</span> (smoothScroll) &#123;</div><div class="line">           smoothScrollTo(destX, <span class="number">0</span>, velocity);</div><div class="line">           <span class="keyword">if</span> (dispatchSelected) &#123;</div><div class="line">               dispatchOnPageSelected(item);</div><div class="line">           &#125;</div><div class="line">       &#125; <span class="keyword">else</span> &#123;</div><div class="line">           <span class="keyword">if</span> (dispatchSelected) &#123;</div><div class="line">               dispatchOnPageSelected(item);</div><div class="line">           &#125;</div><div class="line">           completeScroll(<span class="keyword">false</span>);</div><div class="line">           scrollTo(destX, <span class="number">0</span>);</div><div class="line">           pageScrolled(destX);</div><div class="line">       &#125;</div><div class="line">   &#125;</div><div class="line"></div><div class="line"> ```   </div><div class="line"></div><div class="line"> 修正滚动x坐标的计算，确保滚动后卡片能位于中间</div><div class="line"></div><div class="line">- <span class="number">4</span>.修改滚动动效为回弹效果</div><div class="line"></div><div class="line">  在initViewPager()方法中修改</div><div class="line"></div><div class="line">  ```java</div><div class="line">  mScroller = <span class="keyword">new</span> Scroller(context, <span class="keyword">new</span> OvershootInterpolator(<span class="number">1.5F</span>));</div></pre></td></tr></table></figure>
<p><code>注,ViewPager外部可通过映射的方法访问私有成员mScroller</code></p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">setViewPagerScrollSpeed</span><span class="params">(SuperViewPager viewPager)</span> </span>&#123;</div><div class="line">      <span class="keyword">try</span> &#123;</div><div class="line">          Field field = ViewPager.class.getDeclaredField(<span class="string">"mScroller"</span>);</div><div class="line">          field.setAccessible(<span class="keyword">true</span>);</div><div class="line">          Scroller viewPagerScroller = <span class="keyword">new</span> Scroller(viewPager.getContext(), <span class="keyword">new</span> OvershootInterpolator(<span class="number">1.5F</span>));</div><div class="line">          field.set(viewPager, viewPagerScroller);</div><div class="line">      &#125; <span class="keyword">catch</span> (NoSuchFieldException e) &#123;</div><div class="line">          e.printStackTrace();</div><div class="line">      &#125; <span class="keyword">catch</span> (IllegalAccessException e) &#123;</div><div class="line">          e.printStackTrace();</div><div class="line">      &#125;</div><div class="line">  &#125;</div></pre></td></tr></table></figure>
</li>
<li><p>5.现存bug</p>
<p>页面滚动较困难，需修改touch事件</p>
</li>
</ul>
<h3 id="方案二-自定义ViewPager"><a href="#方案二-自定义ViewPager" class="headerlink" title="方案二  自定义ViewPager"></a>方案二  自定义ViewPager</h3><p>上一个方案主要修改onLayout()方法，该方法主要修改onMeasure()方法，为了及时测量Page宽度，要求必须设置matchChildWidth属性(传入需测量的布局id)<br><img src="/assets/blogImg/multiviewpager.png" alt="multiviewpager截图">  </p>
<ul>
<li>使用方法</li>
</ul>
<figure class="highlight xml"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div></pre></td><td class="code"><pre><div class="line">viewpager布局</div><div class="line"><span class="tag">&lt;<span class="name">com.lcodecore.openlib.MultiViewPager</span></span></div><div class="line">        <span class="attr">android:id</span>=<span class="string">"@+id/card_pager"</span></div><div class="line">        <span class="attr">android:layout_width</span>=<span class="string">"match_parent"</span></div><div class="line">        <span class="attr">android:layout_height</span>=<span class="string">"match_parent"</span></div><div class="line">        <span class="attr">app:matchChildWidth</span>=<span class="string">"@+id/vg_cover"</span>/&gt;</div><div class="line"></div><div class="line">item布局</div><div class="line"><span class="tag">&lt;<span class="name">RelativeLayout</span></span></div><div class="line">            <span class="attr">android:id</span>=<span class="string">"@+id/vg_cover"</span></div><div class="line">            <span class="attr">android:layout_width</span>=<span class="string">"match_parent"</span></div><div class="line">            <span class="attr">android:layout_height</span>=<span class="string">"match_parent"</span></div><div class="line">            <span class="attr">android:layout_marginLeft</span>=<span class="string">"40dp"</span></div><div class="line">            <span class="attr">android:layout_marginRight</span>=<span class="string">"40dp"</span>&gt;</div></pre></td></tr></table></figure>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">java代码需要调用setOffscreenPageLimit()方法</div><div class="line">CardPagerAdapter pagerAdapter = <span class="keyword">new</span> CardPagerAdapter(getFragmentManager(),cards);</div><div class="line">card_pager.setAdapter(pagerAdapter);</div><div class="line">card_pager.setOffscreenPageLimit(<span class="number">8</span>);</div></pre></td></tr></table></figure>
<ul>
<li>代码实现</li>
</ul>
<p>自定义MultiViewPager继承自ViewPager，重写onMeasure()方法</p>
<pre><code class="java"><span class="meta">@Override</span>
    <span class="function"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title">onMeasure</span><span class="params">(<span class="keyword">int</span> widthMeasureSpec, <span class="keyword">int</span> heightMeasureSpec)</span> </span>{
        <span class="comment">//记录测量的宽高</span>
        size.set(MeasureSpec.getSize(widthMeasureSpec),MeasureSpec.getSize(heightMeasureSpec));
        <span class="keyword">if</span> (mMaxWidth &gt;= <span class="number">0</span> || mMaxHeight &gt;= <span class="number">0</span>) {
            <span class="comment">//自定义属性最大宽高</span>
            maxSize.set(mMaxWidth, mMaxHeight);
            <span class="comment">//比较</span>
            constrainTo(size, maxSize);
            widthMeasureSpec = MeasureSpec.makeMeasureSpec(
                    size.x,
                    MeasureSpec.EXACTLY);
            heightMeasureSpec = MeasureSpec.makeMeasureSpec(
                    size.y,
                    MeasureSpec.EXACTLY);
        }
        <span class="keyword">super</span>.onMeasure(widthMeasureSpec, heightMeasureSpec);
        onMeasurePage(widthMeasureSpec, heightMeasureSpec);
    }

    <span class="function"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title">onMeasurePage</span><span class="params">(<span class="keyword">int</span> widthMeasureSpec, <span class="keyword">int</span> heightMeasureSpec)</span> </span>{
        <span class="comment">// Only measure if a measurement pass was scheduled</span>
        <span class="keyword">if</span> (!mNeedsMeasurePage) {
            <span class="keyword">return</span>;
        }
        <span class="keyword">if</span> (mMatchWidthChildResId == <span class="number">0</span>) {
            mNeedsMeasurePage = <span class="keyword">false</span>;
        } <span class="keyword">else</span> <span class="keyword">if</span> (getChildCount() &gt; <span class="number">0</span>) {
            View child = getChildAt(<span class="number">0</span>);
            child.measure(widthMeasureSpec, heightMeasureSpec);
            <span class="keyword">int</span> pageWidth = child.getMeasuredWidth();
            View match = child.findViewById(mMatchWidthChildResId);
            <span class="keyword">if</span> (match == <span class="keyword">null</span>) {
                <span class="keyword">throw</span> <span class="keyword">new</span> NullPointerException(
                        <span class="string">"MatchWithChildResId did not find that ID in the first fragment of the ViewPager; "</span>
                                + <span class="string">"is that view defined in the child view's layout? Note that MultiViewPager "</span>
                                + <span class="string">"only measures the child for index 0."</span>);
            }
            <span class="keyword">int</span> childWidth = match.getMeasuredWidth();
            <span class="comment">// Check that the measurement was successful</span>
            <span class="keyword">if</span> (childWidth &gt; <span class="number">0</span>) {
                mNeedsMeasurePage = <span class="keyword">false</span>;
                <span class="keyword">int</span> difference = pageWidth - childWidth;
                setPageMargin(-difference);
                <span class="keyword">int</span> offscreen = (<span class="keyword">int</span>) Math.ceil((<span class="keyword">float</span>) pageWidth / (<span class="keyword">float</span>) childWidth) + <span class="number">1</span>;
                setOffscreenPageLimit(offscreen);
                requestLayout();
            }
        }
    }
</code></pre>
<h3 id="方案三-修改RecyclerView"><a href="#方案三-修改RecyclerView" class="headerlink" title="方案三  修改RecyclerView"></a>方案三  修改RecyclerView</h3><p>TODO</p>
]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[Activity切换动效]]></title>
      <url>http://yoursite.com/2016/03/01/Activity%E5%88%87%E6%8D%A2%E5%8A%A8%E6%95%88/</url>
      <content type="html"><![CDATA[<h3 id="模糊、水波纹、折叠实现思路"><a href="#模糊、水波纹、折叠实现思路" class="headerlink" title="模糊、水波纹、折叠实现思路"></a>模糊、水波纹、折叠实现思路</h3><ul>
<li>1.通过getWindow().getDecorView()可以获得最顶层的视图，在调用getDrawingCache()方法即可获取Bitmap，再对该Bitmap进行相关的处理并显示在一个ImageView上<a id="more"></a></li>
<li>2.设置Activity切换不展示动画</li>
</ul>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">currActivity.startActivity(intent);</div><div class="line">currActivity.overridePendingTransition(<span class="number">0</span>, <span class="number">0</span>);</div></pre></td></tr></table></figure>
<p>–</p>
<h4 id="模糊"><a href="#模糊" class="headerlink" title="模糊"></a>模糊</h4><p>1.创建一个匹配父窗口的ImageView</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">private</span> ImageView <span class="title">createImageView</span><span class="params">(Activity destActivity, Bitmap bmp)</span> </span>&#123;</div><div class="line">        ImageView imageView = <span class="keyword">new</span> ImageView(destActivity);</div><div class="line">        imageView.setImageBitmap(bmp);</div><div class="line">        imageView.setScaleType(ScaleType.FIT_XY);</div><div class="line">        WindowManager.LayoutParams windowParams = <span class="keyword">new</span> WindowManager.LayoutParams();</div><div class="line">        windowParams.gravity = Gravity.TOP;</div><div class="line">        windowParams.x = <span class="number">0</span>;</div><div class="line">        windowParams.y = top;</div><div class="line">        windowParams.height = bmp.getHeight();</div><div class="line">        windowParams.width = bmp.getWidth();</div><div class="line">        windowParams.flags = WindowManager.LayoutParams.FLAG_LAYOUT_IN_SCREEN;</div><div class="line">        windowParams.format = PixelFormat.TRANSLUCENT;</div><div class="line">        windowParams.windowAnimations = <span class="number">0</span>;</div><div class="line">        destActivity.getWindowManager().addView(imageView, windowParams);</div><div class="line"></div><div class="line">        <span class="keyword">return</span> imageView;</div><div class="line">    &#125;</div></pre></td></tr></table></figure>
<p>2.模糊处理</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">if</span> (VERSION.SDK_INT &gt; <span class="number">16</span>) &#123;</div><div class="line">            Bitmap bitmap = sentBitmap.copy(sentBitmap.getConfig(), <span class="keyword">true</span>);</div><div class="line"></div><div class="line">            <span class="keyword">final</span> RenderScript rs = RenderScript.create(context);</div><div class="line">            <span class="keyword">final</span> Allocation input = Allocation.createFromBitmap(rs, sentBitmap, Allocation.MipmapControl.MIPMAP_NONE,</div><div class="line">                    Allocation.USAGE_SCRIPT);</div><div class="line">            <span class="keyword">final</span> Allocation output = Allocation.createTyped(rs, input.getType());</div><div class="line">            <span class="keyword">final</span> ScriptIntrinsicBlur script = ScriptIntrinsicBlur.create(rs, Element.U8_4(rs));</div><div class="line">            script.setRadius(radius);</div><div class="line">            script.setInput(input);</div><div class="line">            script.forEach(output);</div><div class="line">            output.copyTo(bitmap);</div><div class="line">            <span class="keyword">return</span> bitmap;</div><div class="line">        &#125;</div></pre></td></tr></table></figure>
<p>16以下版本可使用v8包</p>
<hr>
<h4 id="水波纹"><a href="#水波纹" class="headerlink" title="水波纹"></a>水波纹</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div><div class="line">61</div><div class="line">62</div><div class="line">63</div><div class="line">64</div><div class="line">65</div><div class="line">66</div><div class="line">67</div><div class="line">68</div><div class="line">69</div><div class="line">70</div><div class="line">71</div><div class="line">72</div><div class="line">73</div><div class="line">74</div><div class="line">75</div><div class="line">76</div><div class="line">77</div><div class="line">78</div><div class="line">79</div><div class="line">80</div><div class="line">81</div><div class="line">82</div><div class="line">83</div><div class="line">84</div><div class="line">85</div><div class="line">86</div><div class="line">87</div><div class="line">88</div><div class="line">89</div><div class="line">90</div><div class="line">91</div><div class="line">92</div><div class="line">93</div><div class="line">94</div><div class="line">95</div><div class="line">96</div><div class="line">97</div><div class="line">98</div><div class="line">99</div><div class="line">100</div><div class="line">101</div><div class="line">102</div><div class="line">103</div><div class="line">104</div><div class="line">105</div><div class="line">106</div><div class="line">107</div><div class="line">108</div><div class="line">109</div><div class="line">110</div><div class="line">111</div><div class="line">112</div><div class="line">113</div><div class="line">114</div><div class="line">115</div><div class="line">116</div><div class="line">117</div><div class="line">118</div><div class="line">119</div><div class="line">120</div><div class="line">121</div><div class="line">122</div><div class="line">123</div><div class="line">124</div><div class="line">125</div><div class="line">126</div><div class="line">127</div><div class="line">128</div><div class="line">129</div><div class="line">130</div><div class="line">131</div><div class="line">132</div><div class="line">133</div><div class="line">134</div><div class="line">135</div><div class="line">136</div><div class="line">137</div><div class="line">138</div><div class="line">139</div><div class="line">140</div><div class="line">141</div><div class="line">142</div><div class="line">143</div><div class="line">144</div><div class="line">145</div><div class="line">146</div><div class="line">147</div><div class="line">148</div><div class="line">149</div><div class="line">150</div><div class="line">151</div><div class="line">152</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">DrawWaterWaveWithSina</span> <span class="keyword">extends</span> <span class="title">ImageView</span> <span class="keyword">implements</span> <span class="title">Runnable</span> </span>&#123;</div><div class="line">    <span class="keyword">boolean</span> isRunning = <span class="keyword">false</span>;</div><div class="line"></div><div class="line">    <span class="keyword">private</span> <span class="keyword">final</span> <span class="keyword">static</span> <span class="keyword">double</span> TWO_PI = Math.PI * <span class="number">2</span>;</div><div class="line">    <span class="keyword">private</span> <span class="keyword">int</span> width;</div><div class="line"></div><div class="line">    <span class="keyword">private</span> <span class="keyword">int</span> height;</div><div class="line"></div><div class="line">    <span class="keyword">private</span> <span class="keyword">int</span>[] mBitmap2;</div><div class="line"></div><div class="line">    <span class="keyword">private</span> <span class="keyword">int</span>[] mBitmap1;</div><div class="line"></div><div class="line">    <span class="keyword">private</span> <span class="keyword">float</span> wavelength = <span class="number">36</span>;</div><div class="line">    <span class="keyword">private</span> <span class="keyword">float</span> amplitude = <span class="number">10</span>;</div><div class="line">    <span class="keyword">private</span> <span class="keyword">float</span> phase = <span class="number">0</span>;</div><div class="line">    <span class="keyword">private</span> <span class="keyword">int</span> radius = <span class="number">5</span>;</div><div class="line"></div><div class="line">    <span class="keyword">private</span> <span class="keyword">int</span> radius2 = <span class="number">0</span>;</div><div class="line">    <span class="keyword">private</span> <span class="keyword">int</span> icentreX;</div><div class="line">    <span class="keyword">private</span> <span class="keyword">int</span> icentreY;</div><div class="line"></div><div class="line">    <span class="keyword">private</span> <span class="keyword">int</span> alpha = <span class="number">255</span>;</div><div class="line">    <span class="keyword">private</span> Paint mPaint;</div><div class="line">    <span class="keyword">private</span> <span class="keyword">boolean</span> flag = <span class="keyword">true</span>;</div><div class="line">    <span class="keyword">private</span> Activity mActivity;</div><div class="line"></div><div class="line">    <span class="keyword">private</span> <span class="keyword">int</span> SCALE = <span class="number">3</span>;</div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="title">DrawWaterWaveWithSina</span><span class="params">(Activity context, Bitmap bmp)</span> </span>&#123;</div><div class="line">        <span class="keyword">super</span>(context);</div><div class="line">        mPaint = <span class="keyword">new</span> Paint();</div><div class="line">        Bitmap image = bmp;</div><div class="line">        width = image.getWidth() / SCALE;</div><div class="line">        height = image.getHeight() / SCALE;</div><div class="line">        mActivity = context;</div><div class="line">        mBitmap2 = <span class="keyword">new</span> <span class="keyword">int</span>[width * height];</div><div class="line">        mBitmap1 = <span class="keyword">new</span> <span class="keyword">int</span>[width * height];</div><div class="line"></div><div class="line">        Bitmap scaledBitmap = Bitmap.createScaledBitmap(image, width, height, <span class="keyword">false</span>);</div><div class="line"></div><div class="line">        scaledBitmap.getPixels(mBitmap1, <span class="number">0</span>, width, <span class="number">0</span>, <span class="number">0</span>, width, height);</div><div class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; width * height; i++) &#123;</div><div class="line">            mBitmap2[i] = mBitmap1[i];</div><div class="line">        &#125;</div><div class="line">        setImageBitmap(Bitmap.createBitmap(mBitmap2, <span class="number">0</span>, width, width, height, Bitmap.Config.ARGB_8888));</div><div class="line"></div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">boolean</span> <span class="title">transformInverse</span><span class="params">(<span class="keyword">int</span> x, <span class="keyword">int</span> y, <span class="keyword">int</span>[] out)</span> </span>&#123;</div><div class="line">        <span class="keyword">int</span> dx = x - icentreX;</div><div class="line">        <span class="keyword">int</span> dy = y - icentreY;</div><div class="line">        <span class="keyword">int</span> distance2 = dx * dx + dy * dy;</div><div class="line"></div><div class="line">        <span class="keyword">if</span> (distance2 &gt; radius2) &#123;</div><div class="line">            out[<span class="number">0</span>] = x;</div><div class="line">            out[<span class="number">1</span>] = y;</div><div class="line">            out[<span class="number">2</span>] = <span class="number">0</span>;</div><div class="line">            <span class="keyword">return</span> <span class="keyword">false</span>;</div><div class="line">        &#125; <span class="keyword">else</span> &#123;</div><div class="line">            <span class="keyword">float</span> distance = (<span class="keyword">float</span>) Math.sqrt(distance2);</div><div class="line">            <span class="keyword">float</span> amount = amplitude * (<span class="keyword">float</span>) Math.sin(distance / wavelength * TWO_PI - phase / TWO_PI);</div><div class="line">            amount *= (radius - distance) / radius;</div><div class="line">            out[<span class="number">0</span>] = (<span class="keyword">int</span>) (x + dx * amount);</div><div class="line">            out[<span class="number">1</span>] = (<span class="keyword">int</span>) (y + dy * amount);</div><div class="line">            out[<span class="number">2</span>] = (<span class="keyword">int</span>) distance;</div><div class="line">            <span class="keyword">return</span> <span class="keyword">true</span>;</div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">createNextBitmap</span><span class="params">()</span> </span>&#123;</div><div class="line">        <span class="keyword">int</span>[] temp = <span class="keyword">new</span> <span class="keyword">int</span>[<span class="number">3</span>];</div><div class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; width; i++)</div><div class="line">            <span class="keyword">for</span> (<span class="keyword">int</span> j = <span class="number">0</span>; j &lt; height; j++) &#123;</div><div class="line">                <span class="keyword">if</span> (transformInverse(i, j, temp)) &#123;</div><div class="line">                    <span class="keyword">if</span> (temp[<span class="number">0</span>] &gt;= width || temp[<span class="number">1</span>] &gt;= height || temp[<span class="number">0</span>] &lt; <span class="number">0</span> || temp[<span class="number">1</span>] &lt; <span class="number">0</span>) &#123;</div><div class="line">                        mBitmap2[j * width + i] = <span class="number">0x00000000</span>;</div><div class="line">                    &#125; <span class="keyword">else</span> &#123;</div><div class="line">                        mBitmap2[j * width + i] = (mBitmap1[temp[<span class="number">1</span>] * width + temp[<span class="number">0</span>]] &amp; <span class="number">0x00ffffff</span>)</div><div class="line">                                + (alpha &lt;&lt; <span class="number">24</span>);</div><div class="line">                    &#125;</div><div class="line">                &#125; <span class="keyword">else</span> &#123;</div><div class="line">                    <span class="keyword">if</span> (temp[<span class="number">0</span>] &gt;= width || temp[<span class="number">1</span>] &gt;= height || temp[<span class="number">0</span>] &lt; <span class="number">0</span> || temp[<span class="number">1</span>] &lt; <span class="number">0</span>) &#123;</div><div class="line">                        mBitmap2[j * width + i] = <span class="number">0x00000000</span>;</div><div class="line">                    &#125; <span class="keyword">else</span> &#123;</div><div class="line">                        mBitmap2[j * width + i] = mBitmap1[temp[<span class="number">1</span>] * width + temp[<span class="number">0</span>]];</div><div class="line">                    &#125;</div><div class="line">                &#125;</div><div class="line"></div><div class="line">            &#125;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="meta">@Override</span></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">run</span><span class="params">()</span> </span>&#123;</div><div class="line">        isRunning = <span class="keyword">true</span>;</div><div class="line">        <span class="keyword">while</span> (flag) &#123;</div><div class="line">            <span class="keyword">try</span> &#123;</div><div class="line">                Thread.sleep(<span class="number">30</span>);</div><div class="line">            &#125; <span class="keyword">catch</span> (Exception e) &#123;</div><div class="line">            &#125;</div><div class="line">            phase += <span class="number">5</span>;</div><div class="line">            radius += <span class="number">5</span>;</div><div class="line">            amplitude /= <span class="number">1.12</span>;</div><div class="line">            <span class="keyword">if</span> (amplitude &lt; <span class="number">0.01</span>) &#123;</div><div class="line">                stop();</div><div class="line">                <span class="keyword">return</span>;</div><div class="line">            &#125;</div><div class="line">            <span class="keyword">if</span> (alpha &gt; <span class="number">0</span>) &#123;</div><div class="line">                alpha -= <span class="number">5</span>;</div><div class="line">            &#125; <span class="keyword">else</span> &#123;</div><div class="line">                alpha = <span class="number">0</span>;</div><div class="line">            &#125;</div><div class="line">            radius2 = radius * radius;</div><div class="line"></div><div class="line">            <span class="keyword">long</span> start = System.currentTimeMillis();</div><div class="line">            createNextBitmap();</div><div class="line">            post(<span class="keyword">new</span> Runnable() &#123;</div><div class="line"></div><div class="line">                <span class="meta">@Override</span></div><div class="line">                <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">run</span><span class="params">()</span> </span>&#123;</div><div class="line">                    setImageBitmap(Bitmap.createBitmap(mBitmap2, <span class="number">0</span>, width, width, height, Bitmap.Config.ARGB_8888));</div><div class="line"></div><div class="line">                &#125;</div><div class="line">            &#125;);</div><div class="line"></div><div class="line">            System.out.println(<span class="string">"duration:"</span> + (System.currentTimeMillis() - start));</div><div class="line">            postInvalidate();</div><div class="line"></div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">stop</span><span class="params">()</span> </span>&#123;</div><div class="line">        flag = <span class="keyword">false</span>;</div><div class="line">        <span class="keyword">if</span> (<span class="keyword">this</span>.getParent() != <span class="keyword">null</span>) &#123;</div><div class="line">            <span class="keyword">this</span>.post(<span class="keyword">new</span> Runnable() &#123;</div><div class="line"></div><div class="line">                <span class="meta">@Override</span></div><div class="line">                <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">run</span><span class="params">()</span> </span>&#123;</div><div class="line">                    mActivity.getWindowManager().removeView(DrawWaterWaveWithSina.<span class="keyword">this</span>);</div><div class="line">                &#125;</div><div class="line">            &#125;);</div><div class="line">        &#125;</div><div class="line"></div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">start</span><span class="params">(<span class="keyword">int</span> x, <span class="keyword">int</span> y)</span> </span>&#123;</div><div class="line">        icentreX = x / SCALE;</div><div class="line">        icentreY = y / SCALE;</div><div class="line"></div><div class="line">        Thread t = <span class="keyword">new</span> Thread(<span class="keyword">this</span>);</div><div class="line">        t.start();</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h4 id="折叠"><a href="#折叠" class="headerlink" title="折叠"></a>折叠</h4><p>该效果则是在之前的基础上，又增加了手势的操作；像微信那样可以两级Activity联动的效果，可能也是在下层生成了图片，滑动时底层图片也跟随滚动</p>
<hr>
<p>待更新</p>
]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[android开发小记2]]></title>
      <url>http://yoursite.com/2016/03/01/android%E5%BC%80%E5%8F%91%E5%B0%8F%E8%AE%B0/</url>
      <content type="html"><![CDATA[<h4 id="1-FragmentTransaction每次使用时都需要重新创建对象"><a href="#1-FragmentTransaction每次使用时都需要重新创建对象" class="headerlink" title="1.FragmentTransaction每次使用时都需要重新创建对象"></a>1.FragmentTransaction每次使用时都需要重新创建对象</h4><h4 id="2-字符串格式化"><a href="#2-字符串格式化" class="headerlink" title="2.字符串格式化"></a>2.字符串格式化</h4><a id="more"></a>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">String.format(<span class="string">"价格区间：%s"</span>,shopBean.price)</div></pre></td></tr></table></figure>
<h4 id="3-自动匹配波纹效果"><a href="#3-自动匹配波纹效果" class="headerlink" title="3.自动匹配波纹效果"></a>3.自动匹配波纹效果</h4><pre><code>android:foreground=&quot;?android:attr/selectableItemBackground&quot;
</code></pre><h4 id="4-像ListView选中的背景变化"><a href="#4-像ListView选中的背景变化" class="headerlink" title="4.像ListView选中的背景变化"></a>4.像ListView选中的背景变化</h4><pre><code>android:background=&quot;@android:drawable/list_selector_background&quot;
</code></pre><h4 id="5-Theme设置Activity切换动画"><a href="#5-Theme设置Activity切换动画" class="headerlink" title="5.Theme设置Activity切换动画"></a>5.Theme设置Activity切换动画</h4><p>设置窗口不透明，不然没有效果</p>
<figure class="highlight xml"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div></pre></td><td class="code"><pre><div class="line"><span class="comment">&lt;!--theme中设置--&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">item</span> <span class="attr">name</span>=<span class="string">"android:windowIsTranslucent"</span>&gt;</span>false<span class="tag">&lt;/<span class="name">item</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">item</span> <span class="attr">name</span>=<span class="string">"android:windowAnimationStyle"</span>&gt;</span>@style/SlideWindowAnimation<span class="tag">&lt;/<span class="name">item</span>&gt;</span></div><div class="line"></div><div class="line"><span class="tag">&lt;<span class="name">style</span> <span class="attr">name</span>=<span class="string">"SlideWindowAnimation"</span>&gt;</span><span class="xml"></span></div><div class="line">        <span class="tag">&lt;<span class="name">item</span> <span class="attr">name</span>=<span class="string">"android:activityOpenEnterAnimation"</span>&gt;</span>@anim/right_in<span class="tag">&lt;/<span class="name">item</span>&gt;</span></div><div class="line">        <span class="tag">&lt;<span class="name">item</span> <span class="attr">name</span>=<span class="string">"android:activityOpenExitAnimation"</span>&gt;</span>@anim/right_out<span class="tag">&lt;/<span class="name">item</span>&gt;</span></div><div class="line">        <span class="tag">&lt;<span class="name">item</span> <span class="attr">name</span>=<span class="string">"android:activityCloseEnterAnimation"</span>&gt;</span>@anim/left_in<span class="tag">&lt;/<span class="name">item</span>&gt;</span></div><div class="line">        <span class="tag">&lt;<span class="name">item</span> <span class="attr">name</span>=<span class="string">"android:activityCloseExitAnimation"</span>&gt;</span>@anim/left_out<span class="tag">&lt;/<span class="name">item</span>&gt;</span></div><div class="line">    <span class="tag">&lt;/<span class="name">style</span>&gt;</span></div></pre></td></tr></table></figure>
<h4 id="6-当ScrollView里的元素想填满ScrollView时，使用”fill-parent”是不管用的，必需为ScrollView设置：android-fillViewport-”true”"><a href="#6-当ScrollView里的元素想填满ScrollView时，使用”fill-parent”是不管用的，必需为ScrollView设置：android-fillViewport-”true”" class="headerlink" title="6.当ScrollView里的元素想填满ScrollView时，使用”fill_parent”是不管用的，必需为ScrollView设置：android:fillViewport=”true”"></a>6.当ScrollView里的元素想填满ScrollView时，使用”fill_parent”是不管用的，必需为ScrollView设置：android:fillViewport=”true”</h4><h4 id="7-设置toolbar-为箭头按钮"><a href="#7-设置toolbar-为箭头按钮" class="headerlink" title="7.设置toolbar 为箭头按钮"></a>7.设置toolbar 为箭头按钮</h4><pre><code>app:navigationIcon=&quot;?attr/homeAsUpIndicator&quot;
</code></pre><h4 id="8-AuthenticationService-AbstractAccountAuthenticator是一个虚类，它定义处理手机“设置”里“账号与同步”中Account的添加、删除和验证等功能的基本接口"><a href="#8-AuthenticationService-AbstractAccountAuthenticator是一个虚类，它定义处理手机“设置”里“账号与同步”中Account的添加、删除和验证等功能的基本接口" class="headerlink" title="8.AuthenticationService,AbstractAccountAuthenticator是一个虚类，它定义处理手机“设置”里“账号与同步”中Account的添加、删除和验证等功能的基本接口"></a>8.AuthenticationService,AbstractAccountAuthenticator是一个虚类，它定义处理手机“设置”里“账号与同步”中Account的添加、删除和验证等功能的基本接口</h4><h4 id="9-Object和int不可进行比较"><a href="#9-Object和int不可进行比较" class="headerlink" title="9.Object和int不可进行比较"></a>9.Object和int不可进行比较</h4><h4 id="10-修改ViewPager滚动速度"><a href="#10-修改ViewPager滚动速度" class="headerlink" title="10.修改ViewPager滚动速度"></a>10.修改ViewPager滚动速度</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div></pre></td><td class="code"><pre><div class="line"><span class="comment">/**</span></div><div class="line">     * ViewPager 滚动速度设置</div><div class="line">     */</div><div class="line">    <span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ViewPagerScroller</span> <span class="keyword">extends</span> <span class="title">Scroller</span> </span>&#123;</div><div class="line">        <span class="keyword">private</span> <span class="keyword">int</span> mScrollDuration = <span class="number">2000</span>;             <span class="comment">// 滑动速度</span></div><div class="line"></div><div class="line">         <span class="comment">//设置速度</span></div><div class="line">        <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setScrollDuration</span><span class="params">(<span class="keyword">int</span> duration)</span> </span>&#123;</div><div class="line">            <span class="keyword">this</span>.mScrollDuration = duration;</div><div class="line">        &#125;</div><div class="line"></div><div class="line">        <span class="function"><span class="keyword">public</span> <span class="title">ViewPagerScroller</span><span class="params">(Context context)</span> </span>&#123;</div><div class="line">            <span class="keyword">super</span>(context);</div><div class="line">        &#125;</div><div class="line"></div><div class="line">        <span class="function"><span class="keyword">public</span> <span class="title">ViewPagerScroller</span><span class="params">(Context context, Interpolator interpolator)</span> </span>&#123;</div><div class="line">            <span class="keyword">super</span>(context, interpolator);</div><div class="line">        &#125;</div><div class="line"></div><div class="line">        <span class="function"><span class="keyword">public</span> <span class="title">ViewPagerScroller</span><span class="params">(Context context, Interpolator interpolator, <span class="keyword">boolean</span> flywheel)</span> </span>&#123;</div><div class="line">            <span class="keyword">super</span>(context, interpolator, flywheel);</div><div class="line">        &#125;</div><div class="line"></div><div class="line">        <span class="meta">@Override</span></div><div class="line">        <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">startScroll</span><span class="params">(<span class="keyword">int</span> startX, <span class="keyword">int</span> startY, <span class="keyword">int</span> dx, <span class="keyword">int</span> dy, <span class="keyword">int</span> duration)</span> </span>&#123;</div><div class="line">            <span class="keyword">super</span>.startScroll(startX, startY, dx, dy, mScrollDuration);</div><div class="line">        &#125;</div><div class="line"></div><div class="line">        <span class="meta">@Override</span></div><div class="line">        <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">startScroll</span><span class="params">(<span class="keyword">int</span> startX, <span class="keyword">int</span> startY, <span class="keyword">int</span> dx, <span class="keyword">int</span> dy)</span> </span>&#123;</div><div class="line">            <span class="keyword">super</span>.startScroll(startX, startY, dx, dy, mScrollDuration);</div><div class="line">        &#125;</div><div class="line"></div><div class="line">        <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">initViewPagerScroll</span><span class="params">(ViewPager viewPager)</span> </span>&#123;</div><div class="line">            <span class="keyword">try</span> &#123;</div><div class="line">                Field mScroller = ViewPager.class.getDeclaredField(<span class="string">"mScroller"</span>);</div><div class="line">                mScroller.setAccessible(<span class="keyword">true</span>);</div><div class="line">                mScroller.set(viewPager, <span class="keyword">this</span>);</div><div class="line">            &#125; <span class="keyword">catch</span> (Exception e) &#123;</div><div class="line">                e.printStackTrace();</div><div class="line">            &#125;</div><div class="line">        &#125;</div><div class="line">    &#125;</div></pre></td></tr></table></figure>
<h4 id="11-在父布局加上-android-animateLayoutChanges-”true”-后，如果触发了layout方法（比如它的子View设置为GONE），系统就会自动帮你加上布局改变时的动画特效！！"><a href="#11-在父布局加上-android-animateLayoutChanges-”true”-后，如果触发了layout方法（比如它的子View设置为GONE），系统就会自动帮你加上布局改变时的动画特效！！" class="headerlink" title="11.在父布局加上 android:animateLayoutChanges=”true” 后，如果触发了layout方法（比如它的子View设置为GONE），系统就会自动帮你加上布局改变时的动画特效！！"></a>11.在父布局加上 android:animateLayoutChanges=”true” 后，如果触发了layout方法（比如它的子View设置为GONE），系统就会自动帮你加上布局改变时的动画特效！！</h4>]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[android图片缓存简易原理]]></title>
      <url>http://yoursite.com/2016/03/01/android%E5%9B%BE%E7%89%87%E7%BC%93%E5%AD%98/</url>
      <content type="html"><![CDATA[<h3 id="一级：内存缓存"><a href="#一级：内存缓存" class="headerlink" title="一级：内存缓存"></a>一级：内存缓存</h3><p>LRU缓存规则：map元素按照最近使用次数从少到多排列，以便要替换缓存中的元素时可快速遍历出最近使用次数最少的元素</p>
<blockquote>
<p>LinkedHashMap构造方法的最后一个参数true代表这个map里的元素将按照最近使用次数由少到多排列<br> <a id="more"></a></p>
<ul>
<li>获取堆内存：Runtime.getRuntime().maxMemory()</li>
<li>设置默认的缓存限制为堆内存的1/4</li>
<li>获取位图占用的内存：bitmap.getRowBytes() * bitmap.getHeight()</li>
<li>每次添加位图都对占据的内存进行判断，替换使用次数最少的元素</li>
</ul>
</blockquote>
 <figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div><div class="line">61</div><div class="line">62</div><div class="line">63</div><div class="line">64</div><div class="line">65</div><div class="line">66</div><div class="line">67</div><div class="line">68</div><div class="line">69</div><div class="line">70</div><div class="line">71</div><div class="line">72</div><div class="line">73</div><div class="line">74</div><div class="line">75</div><div class="line">76</div><div class="line">77</div><div class="line">78</div><div class="line">79</div><div class="line">80</div><div class="line">81</div><div class="line">82</div><div class="line">83</div><div class="line">84</div><div class="line">85</div></pre></td><td class="code"><pre><div class="line"> <span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">MemoryCache</span> </span>&#123;</div><div class="line"></div><div class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> String TAG = <span class="string">"MemoryCache"</span>;</div><div class="line">    <span class="comment">/**</span></div><div class="line">     *  放入缓存时是个同步操作</div><div class="line">     */</div><div class="line">    <span class="keyword">private</span> Map&lt;String, Bitmap&gt; cache=Collections.synchronizedMap(</div><div class="line">            <span class="keyword">new</span> LinkedHashMap&lt;String, Bitmap&gt;(<span class="number">10</span>,<span class="number">1.5f</span>,<span class="keyword">true</span>));<span class="comment">//Last argument true for LRU ordering</span></div><div class="line">   <span class="comment">/**</span></div><div class="line">    *  缓存中图片所占用的字节，初始0，将通过此变量严格控制缓存所占用的堆内存</div><div class="line">    */</div><div class="line">    <span class="keyword">private</span> <span class="keyword">long</span> size=<span class="number">0</span>;<span class="comment">//current allocated size</span></div><div class="line">    <span class="comment">/**</span></div><div class="line">     *  缓存只能占用的最大堆内存</div><div class="line">     */</div><div class="line">    <span class="keyword">private</span> <span class="keyword">long</span> limit=<span class="number">1000000</span>;<span class="comment">//max memory in bytes</span></div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="title">MemoryCache</span><span class="params">()</span></span>&#123;</div><div class="line">        <span class="comment">//use 25% of available heap size</span></div><div class="line">        setLimit(Runtime.getRuntime().maxMemory()/<span class="number">4</span>);</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setLimit</span><span class="params">(<span class="keyword">long</span> new_limit)</span></span>&#123;</div><div class="line">        limit=new_limit;</div><div class="line">        Log.i(TAG, <span class="string">"MemoryCache will use up to "</span>+limit/<span class="number">1024</span>./<span class="number">1024</span>.+<span class="string">"MB"</span>);</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">public</span> Bitmap <span class="title">get</span><span class="params">(String id)</span></span>&#123;</div><div class="line">        <span class="keyword">try</span>&#123;</div><div class="line">            <span class="keyword">if</span>(!cache.containsKey(id))</div><div class="line">                <span class="keyword">return</span> <span class="keyword">null</span>;</div><div class="line">            <span class="keyword">return</span> cache.get(id);</div><div class="line">        &#125;<span class="keyword">catch</span>(NullPointerException ex)&#123;</div><div class="line">            ex.printStackTrace();</div><div class="line">            <span class="keyword">return</span> <span class="keyword">null</span>;</div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">put</span><span class="params">(String id, Bitmap bitmap)</span></span>&#123;</div><div class="line">        <span class="keyword">try</span>&#123;</div><div class="line">            <span class="keyword">if</span>(cache.containsKey(id))</div><div class="line">                size-=getSizeInBytes(cache.get(id));</div><div class="line">            cache.put(id, bitmap);</div><div class="line">            size+=getSizeInBytes(bitmap);</div><div class="line">            checkSize();</div><div class="line">        &#125;<span class="keyword">catch</span>(Throwable th)&#123;</div><div class="line">            th.printStackTrace();</div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line">    <span class="comment">/**</span></div><div class="line">     *  严格控制堆内存，如果超过将首先替换最近最少使用的那个图片缓存</div><div class="line">     */</div><div class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">checkSize</span><span class="params">()</span> </span>&#123;</div><div class="line">        Log.i(TAG, <span class="string">"cache size="</span>+size+<span class="string">" length="</span>+cache.size());</div><div class="line">        <span class="keyword">if</span>(size&gt;limit)&#123;</div><div class="line">        	  <span class="comment">//先遍历最近最少使用的元素</span></div><div class="line">            Iterator&lt;Entry&lt;String, Bitmap&gt;&gt; iter=cache.entrySet().iterator();</div><div class="line">            <span class="keyword">while</span>(iter.hasNext())&#123;</div><div class="line">                Entry&lt;String, Bitmap&gt; entry=iter.next();</div><div class="line">                size-=getSizeInBytes(entry.getValue());</div><div class="line">                iter.remove();</div><div class="line">                <span class="keyword">if</span>(size&lt;=limit)</div><div class="line">                    <span class="keyword">break</span>;</div><div class="line">            &#125;</div><div class="line">            Log.i(TAG, <span class="string">"Clean cache. New size "</span>+cache.size());</div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">clear</span><span class="params">()</span> </span>&#123;</div><div class="line">        <span class="keyword">try</span>&#123;</div><div class="line">            cache.clear();</div><div class="line">            size=<span class="number">0</span>;</div><div class="line">        &#125;<span class="keyword">catch</span>(NullPointerException ex)&#123;</div><div class="line">            ex.printStackTrace();</div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line">    <span class="comment">/**</span></div><div class="line">     * 图片占用的内存</div><div class="line">     */</div><div class="line">    <span class="function"><span class="keyword">long</span> <span class="title">getSizeInBytes</span><span class="params">(Bitmap bitmap)</span> </span>&#123;</div><div class="line">        <span class="keyword">if</span>(bitmap==<span class="keyword">null</span>)</div><div class="line">            <span class="keyword">return</span> <span class="number">0</span>;</div><div class="line">        <span class="keyword">return</span> bitmap.getRowBytes() * bitmap.getHeight();</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h3 id="二级：文件缓存"><a href="#二级：文件缓存" class="headerlink" title="二级：文件缓存"></a>二级：文件缓存</h3><ul>
<li>有SD卡建缓存目录，无SD卡使用系统默认目录</li>
</ul>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">FileCache</span> </span>&#123;</div><div class="line"></div><div class="line">    <span class="keyword">private</span> File cacheDir;</div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="title">FileCache</span><span class="params">(Context context)</span></span>&#123;</div><div class="line">    	<span class="comment">/**</span></div><div class="line">    	 *  如果有SD卡则在SD卡中建一个LazyList的目录存放缓存的图片</div><div class="line">		    没有SD卡就放在系统的缓存目录中</div><div class="line">    	 */</div><div class="line">        <span class="comment">//Find the dir to save cached images</span></div><div class="line">        <span class="keyword">if</span> (android.os.Environment.getExternalStorageState().equals(android.os.Environment.MEDIA_MOUNTED))</div><div class="line">            cacheDir=<span class="keyword">new</span> File(android.os.Environment.getExternalStorageDirectory(),<span class="string">"LazyList"</span>);</div><div class="line">        <span class="keyword">else</span></div><div class="line">            cacheDir=context.getCacheDir();</div><div class="line">        <span class="keyword">if</span>(!cacheDir.exists())</div><div class="line">            cacheDir.mkdirs();</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">public</span> File <span class="title">getFile</span><span class="params">(String url)</span></span>&#123;</div><div class="line">    	<span class="comment">//将url的hashCode作为缓存的文件名</span></div><div class="line">        <span class="comment">//I identify images by hashcode. Not a perfect solution, good for the demo.</span></div><div class="line">        String filename=String.valueOf(url.hashCode());</div><div class="line">        <span class="comment">//Another possible solution (thanks to grantland)</span></div><div class="line">        <span class="comment">//String filename = URLEncoder.encode(url);</span></div><div class="line">        File f = <span class="keyword">new</span> File(cacheDir, filename);</div><div class="line">        <span class="keyword">return</span> f;</div><div class="line"></div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">clear</span><span class="params">()</span></span>&#123;</div><div class="line">        File[] files=cacheDir.listFiles();</div><div class="line">        <span class="keyword">if</span>(files==<span class="keyword">null</span>)</div><div class="line">            <span class="keyword">return</span>;</div><div class="line">        <span class="keyword">for</span>(File f:files)</div><div class="line">            f.delete();</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h3 id="使用图片"><a href="#使用图片" class="headerlink" title="使用图片"></a>使用图片</h3><p>先从内存中获取，没有再从缓存目录获取，再没有再从网络获取并保存到指定缓存目录<br><code>TODO：可能需要一些图片保证质量的压缩算法</code></p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div><div class="line">61</div><div class="line">62</div><div class="line">63</div><div class="line">64</div><div class="line">65</div><div class="line">66</div><div class="line">67</div><div class="line">68</div><div class="line">69</div><div class="line">70</div><div class="line">71</div><div class="line">72</div><div class="line">73</div><div class="line">74</div><div class="line">75</div><div class="line">76</div><div class="line">77</div><div class="line">78</div><div class="line">79</div><div class="line">80</div><div class="line">81</div><div class="line">82</div><div class="line">83</div><div class="line">84</div><div class="line">85</div><div class="line">86</div><div class="line">87</div><div class="line">88</div><div class="line">89</div><div class="line">90</div><div class="line">91</div><div class="line">92</div><div class="line">93</div><div class="line">94</div><div class="line">95</div><div class="line">96</div><div class="line">97</div><div class="line">98</div><div class="line">99</div><div class="line">100</div><div class="line">101</div><div class="line">102</div><div class="line">103</div><div class="line">104</div><div class="line">105</div><div class="line">106</div><div class="line">107</div><div class="line">108</div><div class="line">109</div><div class="line">110</div><div class="line">111</div><div class="line">112</div><div class="line">113</div><div class="line">114</div><div class="line">115</div><div class="line">116</div><div class="line">117</div><div class="line">118</div><div class="line">119</div><div class="line">120</div><div class="line">121</div><div class="line">122</div><div class="line">123</div><div class="line">124</div><div class="line">125</div><div class="line">126</div><div class="line">127</div><div class="line">128</div><div class="line">129</div><div class="line">130</div><div class="line">131</div><div class="line">132</div><div class="line">133</div><div class="line">134</div><div class="line">135</div><div class="line">136</div><div class="line">137</div><div class="line">138</div><div class="line">139</div><div class="line">140</div><div class="line">141</div><div class="line">142</div><div class="line">143</div><div class="line">144</div><div class="line">145</div><div class="line">146</div><div class="line">147</div><div class="line">148</div><div class="line">149</div><div class="line">150</div><div class="line">151</div><div class="line">152</div><div class="line">153</div><div class="line">154</div><div class="line">155</div><div class="line">156</div><div class="line">157</div><div class="line">158</div><div class="line">159</div><div class="line">160</div><div class="line">161</div><div class="line">162</div><div class="line">163</div><div class="line">164</div><div class="line">165</div><div class="line">166</div><div class="line">167</div><div class="line">168</div><div class="line">169</div><div class="line">170</div><div class="line">171</div><div class="line">172</div><div class="line">173</div><div class="line">174</div><div class="line">175</div><div class="line">176</div><div class="line">177</div><div class="line">178</div><div class="line">179</div><div class="line">180</div><div class="line">181</div><div class="line">182</div><div class="line">183</div><div class="line">184</div><div class="line">185</div><div class="line">186</div><div class="line">187</div><div class="line">188</div><div class="line">189</div><div class="line">190</div><div class="line">191</div><div class="line">192</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ImageLoader</span> </span>&#123;</div><div class="line"></div><div class="line">    MemoryCache memoryCache=<span class="keyword">new</span> MemoryCache();</div><div class="line">    FileCache fileCache;</div><div class="line">    <span class="keyword">private</span> Map&lt;ImageView, String&gt; imageViews=Collections.synchronizedMap(<span class="keyword">new</span> WeakHashMap&lt;ImageView, String&gt;());</div><div class="line">    ExecutorService executorService;</div><div class="line">    Handler handler=<span class="keyword">new</span> Handler();<span class="comment">//handler to display images in UI thread</span></div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="title">ImageLoader</span><span class="params">(Context context)</span></span>&#123;</div><div class="line">        fileCache=<span class="keyword">new</span> FileCache(context);</div><div class="line">        executorService=Executors.newFixedThreadPool(<span class="number">5</span>);</div><div class="line">    &#125;</div><div class="line">    <span class="comment">// 当进入listview时默认的图片，可换成你自己的默认图片</span></div><div class="line">    <span class="keyword">final</span> <span class="keyword">int</span> stub_id=R.drawable.stub;</div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">DisplayImage</span><span class="params">(String url, ImageView imageView)</span></span></div><div class="line">    &#123;</div><div class="line">        imageViews.put(imageView, url);</div><div class="line">        <span class="comment">// 先从内存缓存中查找</span></div><div class="line">        Bitmap bitmap=memoryCache.get(url);</div><div class="line">        <span class="keyword">if</span>(bitmap!=<span class="keyword">null</span>)</div><div class="line">            imageView.setImageBitmap(bitmap);</div><div class="line">        <span class="keyword">else</span></div><div class="line">        &#123;</div><div class="line">        	 <span class="comment">// 若没有的话则开启新线程加载图片</span></div><div class="line">            queuePhoto(url, imageView);</div><div class="line">            imageView.setImageResource(stub_id);</div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">queuePhoto</span><span class="params">(String url, ImageView imageView)</span></span></div><div class="line">    &#123;</div><div class="line">        PhotoToLoad p=<span class="keyword">new</span> PhotoToLoad(url, imageView);</div><div class="line">        executorService.submit(<span class="keyword">new</span> PhotosLoader(p));</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">private</span> Bitmap <span class="title">getBitmap</span><span class="params">(String url)</span></span></div><div class="line">    &#123;</div><div class="line">        File f=fileCache.getFile(url);</div><div class="line">        <span class="comment">/**</span></div><div class="line">         * 先从文件缓存中查找是否有</div><div class="line">         */</div><div class="line">        Bitmap b = decodeFile(f);</div><div class="line">        <span class="keyword">if</span>(b!=<span class="keyword">null</span>)</div><div class="line">            <span class="keyword">return</span> b;</div><div class="line">        <span class="comment">/**</span></div><div class="line">         *  最后从指定的url中下载图片</div><div class="line">         */</div><div class="line">        <span class="keyword">try</span> &#123;</div><div class="line">            Bitmap bitmap=<span class="keyword">null</span>;</div><div class="line">            URL imageUrl = <span class="keyword">new</span> URL(url);</div><div class="line">            HttpURLConnection conn = (HttpURLConnection)imageUrl.openConnection();</div><div class="line">            conn.setConnectTimeout(<span class="number">30000</span>);</div><div class="line">            conn.setReadTimeout(<span class="number">30000</span>);</div><div class="line">            conn.setInstanceFollowRedirects(<span class="keyword">true</span>);</div><div class="line">            InputStream is=conn.getInputStream();</div><div class="line">            OutputStream os = <span class="keyword">new</span> FileOutputStream(f);</div><div class="line">            copyStream(is, os);</div><div class="line">            os.close();</div><div class="line">            conn.disconnect();</div><div class="line">            bitmap = decodeFile(f);</div><div class="line">            <span class="keyword">return</span> bitmap;</div><div class="line">        &#125; <span class="keyword">catch</span> (Throwable ex)&#123;</div><div class="line">           ex.printStackTrace();</div><div class="line">           <span class="keyword">if</span>(ex <span class="keyword">instanceof</span> OutOfMemoryError)</div><div class="line">               memoryCache.clear();</div><div class="line">           <span class="keyword">return</span> <span class="keyword">null</span>;</div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line">    <span class="comment">/**</span></div><div class="line">     *  decode这个图片并且按比例缩放以减少内存消耗，虚拟机对每张图片的缓存大小也是有限制的</div><div class="line">     */</div><div class="line">    <span class="comment">//decodes image and scales it to reduce memory consumption</span></div><div class="line">    <span class="function"><span class="keyword">private</span> Bitmap <span class="title">decodeFile</span><span class="params">(File f)</span></span>&#123;</div><div class="line">        <span class="keyword">try</span> &#123;</div><div class="line">            <span class="comment">//decode image size</span></div><div class="line">            BitmapFactory.Options o = <span class="keyword">new</span> BitmapFactory.Options();</div><div class="line">            o.inJustDecodeBounds = <span class="keyword">true</span>;</div><div class="line">            FileInputStream stream1=<span class="keyword">new</span> FileInputStream(f);</div><div class="line">            BitmapFactory.decodeStream(stream1,<span class="keyword">null</span>,o);</div><div class="line">            stream1.close();</div><div class="line"></div><div class="line">            <span class="comment">//Find the correct scale value. It should be the power of 2.</span></div><div class="line">            <span class="keyword">final</span> <span class="keyword">int</span> REQUIRED_SIZE=<span class="number">70</span>;</div><div class="line">            <span class="keyword">int</span> width_tmp=o.outWidth, height_tmp=o.outHeight;</div><div class="line">            <span class="keyword">int</span> scale=<span class="number">1</span>;</div><div class="line">            <span class="keyword">while</span>(<span class="keyword">true</span>)&#123;</div><div class="line">                <span class="keyword">if</span>(width_tmp/<span class="number">2</span>&lt;REQUIRED_SIZE || height_tmp/<span class="number">2</span>&lt;REQUIRED_SIZE)</div><div class="line">                    <span class="keyword">break</span>;</div><div class="line">                width_tmp/=<span class="number">2</span>;</div><div class="line">                height_tmp/=<span class="number">2</span>;</div><div class="line">                scale*=<span class="number">2</span>;</div><div class="line">            &#125;</div><div class="line"></div><div class="line">            <span class="comment">//decode with inSampleSize</span></div><div class="line">            BitmapFactory.Options o2 = <span class="keyword">new</span> BitmapFactory.Options();</div><div class="line">            o2.inSampleSize=scale;</div><div class="line">            FileInputStream stream2=<span class="keyword">new</span> FileInputStream(f);</div><div class="line">            Bitmap bitmap=BitmapFactory.decodeStream(stream2, <span class="keyword">null</span>, o2);</div><div class="line">            stream2.close();</div><div class="line">            <span class="keyword">return</span> bitmap;</div><div class="line">        &#125; <span class="keyword">catch</span> (FileNotFoundException e) &#123;</div><div class="line">        &#125;</div><div class="line">        <span class="keyword">catch</span> (IOException e) &#123;</div><div class="line">            e.printStackTrace();</div><div class="line">        &#125;</div><div class="line">        <span class="keyword">return</span> <span class="keyword">null</span>;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="comment">//Task for the queue</span></div><div class="line">    <span class="keyword">private</span> <span class="class"><span class="keyword">class</span> <span class="title">PhotoToLoad</span></span></div><div class="line">    &#123;</div><div class="line">        <span class="keyword">public</span> String url;</div><div class="line">        <span class="keyword">public</span> ImageView imageView;</div><div class="line">        <span class="function"><span class="keyword">public</span> <span class="title">PhotoToLoad</span><span class="params">(String u, ImageView i)</span></span>&#123;</div><div class="line">            url=u;</div><div class="line">            imageView=i;</div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="class"><span class="keyword">class</span> <span class="title">PhotosLoader</span> <span class="keyword">implements</span> <span class="title">Runnable</span> </span>&#123;</div><div class="line">        PhotoToLoad photoToLoad;</div><div class="line">        PhotosLoader(PhotoToLoad photoToLoad)&#123;</div><div class="line">            <span class="keyword">this</span>.photoToLoad=photoToLoad;</div><div class="line">        &#125;</div><div class="line"></div><div class="line">        <span class="meta">@Override</span></div><div class="line">        <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">run</span><span class="params">()</span> </span>&#123;</div><div class="line">            <span class="keyword">try</span>&#123;</div><div class="line">                <span class="keyword">if</span>(imageViewReused(photoToLoad))</div><div class="line">                    <span class="keyword">return</span>;</div><div class="line">                Bitmap bmp=getBitmap(photoToLoad.url);</div><div class="line">                memoryCache.put(photoToLoad.url, bmp);</div><div class="line">                <span class="keyword">if</span>(imageViewReused(photoToLoad))</div><div class="line">                    <span class="keyword">return</span>;</div><div class="line">                BitmapDisplayer bd=<span class="keyword">new</span> BitmapDisplayer(bmp, photoToLoad);</div><div class="line">                handler.post(bd);</div><div class="line">            &#125;<span class="keyword">catch</span>(Throwable th)&#123;</div><div class="line">                th.printStackTrace();</div><div class="line">            &#125;</div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line">    <span class="comment">/**</span></div><div class="line">     * 防止图片错位</div><div class="line">     * <span class="doctag">@param</span> photoToLoad</div><div class="line">     */</div><div class="line">    <span class="function"><span class="keyword">boolean</span> <span class="title">imageViewReused</span><span class="params">(PhotoToLoad photoToLoad)</span></span>&#123;</div><div class="line">        String tag=imageViews.get(photoToLoad.imageView);</div><div class="line">        <span class="keyword">if</span>(tag==<span class="keyword">null</span> || !tag.equals(photoToLoad.url))</div><div class="line">            <span class="keyword">return</span> <span class="keyword">true</span>;</div><div class="line">        <span class="keyword">return</span> <span class="keyword">false</span>;</div><div class="line">    &#125;</div><div class="line">    <span class="comment">/**</span></div><div class="line">     *  用于在UI线程中更新界面</div><div class="line">     */</div><div class="line">    <span class="class"><span class="keyword">class</span> <span class="title">BitmapDisplayer</span> <span class="keyword">implements</span> <span class="title">Runnable</span></span></div><div class="line">    &#123;</div><div class="line">        Bitmap bitmap;</div><div class="line">        PhotoToLoad photoToLoad;</div><div class="line">        <span class="function"><span class="keyword">public</span> <span class="title">BitmapDisplayer</span><span class="params">(Bitmap b, PhotoToLoad p)</span></span>&#123;bitmap=b;photoToLoad=p;&#125;</div><div class="line">        <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">run</span><span class="params">()</span></span></div><div class="line">        &#123;</div><div class="line">            <span class="keyword">if</span>(imageViewReused(photoToLoad))</div><div class="line">                <span class="keyword">return</span>;</div><div class="line">            <span class="keyword">if</span>(bitmap!=<span class="keyword">null</span>)</div><div class="line">                photoToLoad.imageView.setImageBitmap(bitmap);</div><div class="line">            <span class="keyword">else</span></div><div class="line">                photoToLoad.imageView.setImageResource(stub_id);</div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">clearCache</span><span class="params">()</span> </span>&#123;</div><div class="line">        memoryCache.clear();</div><div class="line">        fileCache.clear();</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">copyStream</span><span class="params">(InputStream is, OutputStream os)</span></span></div><div class="line">    &#123;</div><div class="line">        <span class="keyword">final</span> <span class="keyword">int</span> buffer_size=<span class="number">1024</span>;</div><div class="line">        <span class="keyword">try</span></div><div class="line">        &#123;</div><div class="line">            <span class="keyword">byte</span>[] bytes=<span class="keyword">new</span> <span class="keyword">byte</span>[buffer_size];</div><div class="line">            <span class="keyword">for</span>(;;)</div><div class="line">            &#123;</div><div class="line">              <span class="keyword">int</span> count=is.read(bytes, <span class="number">0</span>, buffer_size);</div><div class="line">              <span class="keyword">if</span>(count==-<span class="number">1</span>)</div><div class="line">                  <span class="keyword">break</span>;</div><div class="line">              os.write(bytes, <span class="number">0</span>, count);</div><div class="line">            &#125;</div><div class="line">        &#125;</div><div class="line">        <span class="keyword">catch</span>(Exception ex)&#123;&#125;</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[自定义支持展开的TextView]]></title>
      <url>http://yoursite.com/2016/03/01/%E6%94%AF%E6%8C%81%E5%B1%95%E5%BC%80%E7%9A%84TextView/</url>
      <content type="html"><![CDATA[<p> 参考开源项目ExpendableTextView，原项目使用LinearLayout包装TextView和Button的做法，需要保证id的一致，，文本内容需要在代码中设置，操作较为复杂，故修改继承自TextView，保留TextView特性，简化操作。<br> <a id="more"></a><br> //TODO 转为gif</p>
<p> <img src="/assets/blogImg/ExpandTextView.gif" alt="效果图"></p>
<h4 id="1-定义一些属性"><a href="#1-定义一些属性" class="headerlink" title="1.定义一些属性"></a>1.定义一些属性</h4><ul>
<li>animDuration   textview展开的动效时长</li>
<li>animAlphaStart  透明度渐变初始值</li>
<li>expandDrawable  指示可以展开的小箭头图标</li>
<li>collapseDrawable  指示可以折叠的小箭头图标</li>
<li><p><code>maxCollapsedLines</code> 开始折叠的起始行数</p>
<figure class="highlight xml"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line"><span class="tag">&lt;<span class="name">declare-styleable</span> <span class="attr">name</span>=<span class="string">"ExpandableTextView"</span>&gt;</span></div><div class="line">       <span class="tag">&lt;<span class="name">attr</span> <span class="attr">name</span>=<span class="string">"maxCollapsedLines"</span> <span class="attr">format</span>=<span class="string">"integer"</span>/&gt;</span></div><div class="line">       <span class="tag">&lt;<span class="name">attr</span> <span class="attr">name</span>=<span class="string">"animDuration"</span> <span class="attr">format</span>=<span class="string">"integer"</span>/&gt;</span></div><div class="line">       <span class="tag">&lt;<span class="name">attr</span> <span class="attr">name</span>=<span class="string">"animAlphaStart"</span> <span class="attr">format</span>=<span class="string">"float"</span>/&gt;</span></div><div class="line">       <span class="tag">&lt;<span class="name">attr</span> <span class="attr">name</span>=<span class="string">"expandDrawable"</span> <span class="attr">format</span>=<span class="string">"reference"</span>/&gt;</span></div><div class="line">       <span class="tag">&lt;<span class="name">attr</span> <span class="attr">name</span>=<span class="string">"collapseDrawable"</span> <span class="attr">format</span>=<span class="string">"reference"</span>/&gt;</span></div><div class="line">   <span class="tag">&lt;/<span class="name">declare-styleable</span>&gt;</span></div></pre></td></tr></table></figure>
</li>
</ul>
<h4 id="2-设置点击事件"><a href="#2-设置点击事件" class="headerlink" title="2.设置点击事件"></a>2.设置点击事件</h4><p>  点击时，行数不足，不响应点击事件，行数足够，开始展开／折叠 动画</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div></pre></td><td class="code"><pre><div class="line"><span class="meta">@Override</span></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">onClick</span><span class="params">(View v)</span> </span>&#123;</div><div class="line">        <span class="keyword">if</span>(!needCollapse)&#123;</div><div class="line">            <span class="keyword">return</span>;<span class="comment">//行数不足,不响应点击事件</span></div><div class="line">        &#125;</div><div class="line">        mCollapsed = !mCollapsed;</div><div class="line"></div><div class="line">        <span class="keyword">if</span> (mCollapsedStatus != <span class="keyword">null</span>) &#123;</div><div class="line">            mCollapsedStatus.put(mPosition, mCollapsed);</div><div class="line">        &#125;</div><div class="line"></div><div class="line">        <span class="comment">// 标志是否正在进行动画，动画是不重复进行</span></div><div class="line">        mAnimating = <span class="keyword">true</span>;</div><div class="line"></div><div class="line">        Animation animation;</div><div class="line">        <span class="keyword">if</span> (mCollapsed) &#123;</div><div class="line">            animation = <span class="keyword">new</span> ExpandCollapseAnimation(<span class="keyword">this</span>, getHeight(), mCollapsedHeight);</div><div class="line">        &#125; <span class="keyword">else</span> &#123;</div><div class="line">            animation = <span class="keyword">new</span> ExpandCollapseAnimation(<span class="keyword">this</span>, getHeight(),mTextHeightWithMaxLines);</div><div class="line">        &#125;</div><div class="line"></div><div class="line">        animation.setFillAfter(<span class="keyword">true</span>);</div><div class="line">        animation.setAnimationListener(<span class="keyword">new</span> Animation.AnimationListener() &#123;</div><div class="line">            <span class="meta">@Override</span></div><div class="line">            <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">onAnimationStart</span><span class="params">(Animation animation)</span> </span>&#123;</div><div class="line">                applyAlphaAnimation(ExpandTextView.<span class="keyword">this</span>, mAnimAlphaStart);</div><div class="line">            &#125;</div><div class="line">            <span class="meta">@Override</span></div><div class="line">            <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">onAnimationEnd</span><span class="params">(Animation animation)</span> </span>&#123;</div><div class="line">                <span class="comment">// clear animation here to avoid repeated applyTransformation() calls</span></div><div class="line">                clearAnimation();</div><div class="line">                <span class="comment">// clear the animation flag</span></div><div class="line">                mAnimating = <span class="keyword">false</span>;</div><div class="line"></div><div class="line">                <span class="comment">// notify the listener</span></div><div class="line">                <span class="keyword">if</span> (mListener != <span class="keyword">null</span>) &#123;</div><div class="line">                    mListener.onExpandStateChanged(ExpandTextView.<span class="keyword">this</span>, !mCollapsed);</div><div class="line">                &#125;</div><div class="line">            &#125;</div><div class="line">            <span class="meta">@Override</span></div><div class="line">            <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">onAnimationRepeat</span><span class="params">(Animation animation)</span> </span>&#123; &#125;</div><div class="line">        &#125;);</div><div class="line"></div><div class="line">        clearAnimation();</div><div class="line">        startAnimation(animation);</div><div class="line">    &#125;</div></pre></td></tr></table></figure>
<h4 id="3-重写onMeasure-方法"><a href="#3-重写onMeasure-方法" class="headerlink" title="3.重写onMeasure()方法"></a>3.重写onMeasure()方法</h4><ul>
<li>先取消对TextView显示行数的限制，调用super.onMeasure()方法计算出TextView的总高度；</li>
<li>然后判断TextView的行数满不满足折叠条件，满足时致needCollapse为true；</li>
<li>使用setMaxLines()方法设置TextView能显示的最大行数，并重新使用super.onMeasure()方法计算出此时TextView的高度，以方便做动效</li>
</ul>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div></pre></td><td class="code"><pre><div class="line"><span class="meta">@Override</span></div><div class="line">    <span class="function"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title">onMeasure</span><span class="params">(<span class="keyword">int</span> widthMeasureSpec, <span class="keyword">int</span> heightMeasureSpec)</span> </span>&#123;</div><div class="line">        <span class="keyword">if</span>(getVisibility()==GONE)&#123;</div><div class="line">            <span class="keyword">super</span>.onMeasure(widthMeasureSpec, heightMeasureSpec);</div><div class="line">            <span class="keyword">return</span>;</div><div class="line">        &#125;</div><div class="line"></div><div class="line">        setMaxLines(Integer.MAX_VALUE);</div><div class="line">        <span class="keyword">super</span>.onMeasure(widthMeasureSpec, heightMeasureSpec);</div><div class="line">        System.out.println(<span class="string">"行数:"</span>+getLineCount());</div><div class="line">        <span class="keyword">if</span> (getLineCount() &lt;= mMaxCollapsedLines) &#123;</div><div class="line">            <span class="comment">//不需要折叠</span></div><div class="line">            needCollapse = <span class="keyword">false</span>;</div><div class="line">            <span class="keyword">return</span>;</div><div class="line">        &#125;</div><div class="line"></div><div class="line">        needCollapse = <span class="keyword">true</span>;</div><div class="line"></div><div class="line">        mTextHeightWithMaxLines = getRealTextViewHeight(<span class="keyword">this</span>);</div><div class="line">        <span class="keyword">if</span> (mCollapsed) &#123;</div><div class="line">            setMaxLines(mMaxCollapsedLines);</div><div class="line">        &#125;</div><div class="line"></div><div class="line">        <span class="comment">//设置完成后重新测量</span></div><div class="line">        <span class="keyword">super</span>.onMeasure(widthMeasureSpec, heightMeasureSpec);</div><div class="line">        <span class="keyword">if</span> (mCollapsed) &#123;</div><div class="line">            mCollapsedHeight = getMeasuredHeight();</div><div class="line">        &#125;</div><div class="line">    &#125;</div></pre></td></tr></table></figure>
<h4 id="3-重写onDraw-方法，在合适的位置绘制展开／折叠-箭头"><a href="#3-重写onDraw-方法，在合适的位置绘制展开／折叠-箭头" class="headerlink" title="3.重写onDraw()方法，在合适的位置绘制展开／折叠 箭头"></a>3.重写onDraw()方法，在合适的位置绘制展开／折叠 箭头</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div></pre></td><td class="code"><pre><div class="line"><span class="meta">@Override</span></div><div class="line">    <span class="function"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title">onDraw</span><span class="params">(Canvas canvas)</span> </span>&#123;</div><div class="line">        <span class="keyword">super</span>.onDraw(canvas);</div><div class="line"></div><div class="line">        <span class="keyword">if</span>(needCollapse)&#123;</div><div class="line">            <span class="keyword">if</span>(mCollapsed)&#123;</div><div class="line">                <span class="keyword">int</span> right = getRight()-getTotalPaddingRight()-sp2dp(<span class="number">16</span>);</div><div class="line">                <span class="keyword">int</span> left = right-mExpandDrawable.getIntrinsicWidth();</div><div class="line">                <span class="keyword">int</span> bottom = getBottom() - getTotalPaddingBottom()-sp2dp(<span class="number">16</span>);</div><div class="line">                <span class="keyword">int</span> top = bottom - mExpandDrawable.getIntrinsicHeight();</div><div class="line"></div><div class="line">                canvas.translate(left,top);</div><div class="line">                mExpandDrawable.setBounds(<span class="number">0</span>,<span class="number">0</span>,mExpandDrawable.getIntrinsicWidth(),mExpandDrawable.getIntrinsicHeight());</div><div class="line">                mExpandDrawable.draw(canvas);</div><div class="line">            &#125;<span class="keyword">else</span>&#123;</div><div class="line">                <span class="keyword">int</span> right = getRight()-getTotalPaddingRight()-sp2dp(<span class="number">16</span>);</div><div class="line">                <span class="keyword">int</span> left = right-mCollapseDrawable.getIntrinsicWidth();</div><div class="line">                <span class="keyword">int</span> bottom = getBottom() - getTotalPaddingBottom()-sp2dp(<span class="number">16</span>);</div><div class="line">                <span class="keyword">int</span> top = bottom - mCollapseDrawable.getIntrinsicHeight();</div><div class="line"></div><div class="line">                canvas.translate(left,top);</div><div class="line">                mCollapseDrawable.setBounds(<span class="number">0</span>,<span class="number">0</span>,mCollapseDrawable.getIntrinsicWidth(),mCollapseDrawable.getIntrinsicHeight());</div><div class="line">                mCollapseDrawable.draw(canvas);</div><div class="line">            &#125;</div><div class="line">        &#125;</div><div class="line">    &#125;</div></pre></td></tr></table></figure>
<h4 id="4-动效"><a href="#4-动效" class="headerlink" title="4.动效"></a>4.动效</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div></pre></td><td class="code"><pre><div class="line"><span class="class"><span class="keyword">class</span> <span class="title">ExpandCollapseAnimation</span> <span class="keyword">extends</span> <span class="title">Animation</span> </span>&#123;</div><div class="line">        <span class="keyword">private</span> <span class="keyword">final</span> View mTargetView;</div><div class="line">        <span class="keyword">private</span> <span class="keyword">final</span> <span class="keyword">int</span> mStartHeight;</div><div class="line">        <span class="keyword">private</span> <span class="keyword">final</span> <span class="keyword">int</span> mEndHeight;</div><div class="line"></div><div class="line">        <span class="function"><span class="keyword">public</span> <span class="title">ExpandCollapseAnimation</span><span class="params">(View view, <span class="keyword">int</span> startHeight, <span class="keyword">int</span> endHeight)</span> </span>&#123;</div><div class="line">            mTargetView = view;</div><div class="line">            mStartHeight = startHeight;</div><div class="line">            mEndHeight = endHeight;</div><div class="line">            setDuration(mAnimationDuration);</div><div class="line">        &#125;</div><div class="line"></div><div class="line">        <span class="meta">@Override</span></div><div class="line">        <span class="function"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title">applyTransformation</span><span class="params">(<span class="keyword">float</span> interpolatedTime, Transformation t)</span> </span>&#123;</div><div class="line">            <span class="keyword">final</span> <span class="keyword">int</span> newHeight = (<span class="keyword">int</span>)((mEndHeight - mStartHeight) * interpolatedTime + mStartHeight);</div><div class="line">            setMaxHeight(newHeight);</div><div class="line">            <span class="keyword">if</span> (Float.compare(mAnimAlphaStart, <span class="number">1.0f</span>) != <span class="number">0</span>) &#123;</div><div class="line">                applyAlphaAnimation(ExpandTextView.<span class="keyword">this</span>, mAnimAlphaStart + interpolatedTime * (<span class="number">1.0f</span> - mAnimAlphaStart));</div><div class="line">            &#125;</div><div class="line">            mTargetView.getLayoutParams().height = newHeight;</div><div class="line">            mTargetView.requestLayout();</div><div class="line">        &#125;</div><div class="line"></div><div class="line">        <span class="meta">@Override</span></div><div class="line">        <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">initialize</span><span class="params">( <span class="keyword">int</span> width, <span class="keyword">int</span> height, <span class="keyword">int</span> parentWidth, <span class="keyword">int</span> parentHeight )</span> </span>&#123;</div><div class="line">            <span class="keyword">super</span>.initialize(width, height, parentWidth, parentHeight);</div><div class="line">        &#125;</div><div class="line"></div><div class="line">        <span class="meta">@Override</span></div><div class="line">        <span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">willChangeBounds</span><span class="params">( )</span> </span>&#123;</div><div class="line">            <span class="keyword">return</span> <span class="keyword">true</span>;</div><div class="line">        &#125;</div><div class="line">    &#125;;</div></pre></td></tr></table></figure>
<h4 id="5-当前存在的bug"><a href="#5-当前存在的bug" class="headerlink" title="5.当前存在的bug"></a>5.当前存在的bug</h4><ul>
<li>onDraw()方法中，小箭头的绘制位置的计算还有问题，TextView的padding值的计算需要</li>
</ul>
]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[属性动画-估值器]]></title>
      <url>http://yoursite.com/2016/03/01/%E5%B1%9E%E6%80%A7%E5%8A%A8%E7%94%BB-%E4%BC%B0%E5%80%BC%E5%99%A8/</url>
      <content type="html"><![CDATA[<h3 id="1-属性动画"><a href="#1-属性动画" class="headerlink" title="1.属性动画"></a>1.属性动画</h3><p>public static ObjectAnimator ofObject(Object target, String propertyName,<br>            TypeEvaluator evaluator, Object… values)<br><a id="more"></a></p>
<ul>
<li>target 对象其属性需要执行动画，如有一属性name，则需要有setName()方法</li>
<li>propertyName 属性名</li>
<li>evaluator   估值函数</li>
<li>values   动画执行值</li>
</ul>
<h3 id="2-类型估值器接口TypeEvaluator"><a href="#2-类型估值器接口TypeEvaluator" class="headerlink" title="2.类型估值器接口TypeEvaluator"></a>2.类型估值器接口TypeEvaluator</h3><ul>
<li>ValueAnimator#setEvaluator(TypeEvaluator),动画时进行属性值计算</li>
<li><p>public T evaluate(float fraction, T startValue, T endValue)  </p>
<ul>
<li>fraction  计算参数</li>
<li>startValue  起始值</li>
<li>endValue  终值</li>
</ul>
<p>默认使用线性插值器计算</p>
</li>
</ul>
<hr>
<p>待更新…</p>
]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[学习笔记3]]></title>
      <url>http://yoursite.com/2016/03/01/android%E9%A1%B9%E7%9B%AE%E6%9E%B6%E6%9E%84/</url>
      <content type="html"><![CDATA[<h3 id="1-MCV模式"><a href="#1-MCV模式" class="headerlink" title="1.MCV模式"></a>1.MCV模式</h3><ul>
<li><p>网络层</p>
<a id="more"></a>
<blockquote>
<ul>
<li>网络封装</li>
<li>编写通信工具</li>
</ul>
</blockquote>
<ol>
<li><p>http</p>
<ul>
<li>HttpClient比HttpURLConnection稳定性好很多</li>
</ul>
</li>
<li><p>socket</p>
</li>
</ol>
</li>
<li><p>业务层</p>
<blockquote>
<ul>
<li>公共信息处理</li>
<li>用户业务处理</li>
<li>降低层与层之间的耦合度</li>
</ul>
</blockquote>
</li>
<li><p>视图层</p>
<blockquote>
<ul>
<li>统一界面的管理</li>
</ul>
</blockquote>
</li>
</ul>
<h3 id="2-服务器推送方案"><a href="#2-服务器推送方案" class="headerlink" title="2.服务器推送方案"></a>2.服务器推送方案</h3><p> 使用最多的是xmpp开源项目，支持的服务器较多，如用于聊天的openfire服务器，用于推送的androidpn服务器</p>
<ul>
<li>1.轮询，定期到检查是否有新消息(常用，但较消耗资源)</li>
<li>2.socket的长连接</li>
</ul>
<h3 id="3-内存溢出的处理"><a href="#3-内存溢出的处理" class="headerlink" title="3.内存溢出的处理"></a>3.内存溢出的处理</h3><ul>
<li>1.在内存上做些处理，如使用软引用，强化引用，弱引用</li>
<li><p>2.在内存中加载图片的时候直接在内存中做处理，如边界的压缩</p>
<blockquote>
<p>大图缓存导致内存溢出的解决办法:</p>
</blockquote>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line"><span class="comment">//分别保存包名到Bitmap的强引用的映射和软引用的映射</span></div><div class="line"><span class="keyword">private</span> <span class="keyword">static</span> LinkedHashMap&lt;String, Bitmap&gt; hardManager;  <span class="keyword">private</span> <span class="keyword">static</span> ConcurrentHashMap&lt;String, SoftReference&lt;Bitmap&gt;&gt; softManager;</div><div class="line"></div><div class="line"><span class="comment">//在通过包名获取bitmap时，首先在hardManager中判断是否包含该包名，如果有，直接取出；如果没有，则在softManager中判断，有则取出，没有就通过下面方法获取</span></div><div class="line"><span class="function"><span class="keyword">private</span> <span class="keyword">static</span> Bitmap <span class="title">readBitMap</span><span class="params">(Context context, <span class="keyword">int</span> resId)</span> </span>&#123;  	 BitmapFactory.Options opt = <span class="keyword">new</span> BitmapFactory.Options();   opt.inPreferredConfig = Bitmap.Config.RGB_565;   opt.inPurgeable = <span class="keyword">true</span>;   opt.inInputShareable = <span class="keyword">true</span>;   <span class="comment">// 获取资源图片</span> InputStream is = context.getResources().openRawResource(resId);   <span class="keyword">return</span> BitmapFactory.decodeStream(is, <span class="keyword">null</span>, opt);  &#125;</div><div class="line"><span class="comment">//获取之后插入到hardManager中，在插入时，做判断只保证hardManager的容量为10，如果大于10，就将最早插入的删除，这样就保证了我们使用大图片时不会造成内存溢出这个问题</span></div></pre></td></tr></table></figure>
</li>
<li><p>3.动态的回收内存</p>
</li>
<li>4.优化Dalvik虚拟机堆内存的分配</li>
<li>5.自定义堆内存大小</li>
</ul>
<h3 id="4-适配0px设置法"><a href="#4-适配0px设置法" class="headerlink" title="4.适配0px设置法"></a>4.适配0px设置法</h3><pre><code>layout_height=0px，结合layout_weight，却可以使控件成正比例显示
</code></pre>]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[android图片模糊处理]]></title>
      <url>http://yoursite.com/2016/03/01/%E5%9B%BE%E7%89%87%E6%A8%A1%E7%B3%8A%E6%95%88%E6%9E%9C/</url>
      <content type="html"><![CDATA[<h3 id="需要使用v8库"><a href="#需要使用v8库" class="headerlink" title="需要使用v8库"></a>需要使用v8库</h3><p><img src="/assets/blogImg/imageblur.png" alt="模糊效果"></p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> Drawable <span class="title">createBlurredImageFromBitmap</span><span class="params">(Bitmap bitmap, Context context, <span class="keyword">int</span> inSampleSize)</span> </span>&#123;</div><div class="line"></div><div class="line">        RenderScript rs = RenderScript.create(context);</div><div class="line">        <span class="keyword">final</span> BitmapFactory.Options options = <span class="keyword">new</span> BitmapFactory.Options();</div><div class="line">        options.inSampleSize = inSampleSize;</div><div class="line"></div><div class="line">        ByteArrayOutputStream stream = <span class="keyword">new</span> ByteArrayOutputStream();</div><div class="line">        bitmap.compress(Bitmap.CompressFormat.JPEG, <span class="number">100</span>, stream);</div><div class="line">        <span class="keyword">byte</span>[] imageInByte = stream.toByteArray();</div><div class="line">        ByteArrayInputStream bis = <span class="keyword">new</span> ByteArrayInputStream(imageInByte);</div><div class="line">        Bitmap blurTemplate = BitmapFactory.decodeStream(bis, <span class="keyword">null</span>, options);</div><div class="line"></div><div class="line">        <span class="keyword">final</span> android.support.v8.renderscript.Allocation input = android.support.v8.renderscript.Allocation.createFromBitmap(rs, blurTemplate);</div><div class="line">        <span class="keyword">final</span> android.support.v8.renderscript.Allocation output = android.support.v8.renderscript.Allocation.createTyped(rs, input.getType());</div><div class="line">        <span class="keyword">final</span> android.support.v8.renderscript.ScriptIntrinsicBlur script = android.support.v8.renderscript.ScriptIntrinsicBlur.create(rs, android.support.v8.renderscript.Element.U8_4(rs));</div><div class="line">        script.setRadius(<span class="number">8f</span>);</div><div class="line">        script.setInput(input);</div><div class="line">        script.forEach(output);</div><div class="line">        output.copyTo(blurTemplate);</div><div class="line"></div><div class="line">        <span class="keyword">return</span> <span class="keyword">new</span> BitmapDrawable(context.getResources(), blurTemplate);</div><div class="line">    &#125;</div></pre></td></tr></table></figure>
<p>较耗时，使用异步操作</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">private</span> <span class="class"><span class="keyword">class</span> <span class="title">setBlurredAlbumArt</span> <span class="keyword">extends</span> <span class="title">AsyncTask</span>&lt;<span class="title">Bitmap</span>, <span class="title">Void</span>, <span class="title">Drawable</span>&gt; </span>&#123;</div><div class="line"></div><div class="line">        <span class="meta">@Override</span></div><div class="line">        <span class="function"><span class="keyword">protected</span> Drawable <span class="title">doInBackground</span><span class="params">(Bitmap... loadedImage)</span> </span>&#123;</div><div class="line">            Drawable drawable = <span class="keyword">null</span>;</div><div class="line">            <span class="keyword">try</span> &#123;</div><div class="line">                drawable = ImageUtils.createBlurredImageFromBitmap(loadedImage[<span class="number">0</span>], getActivity(), <span class="number">6</span>);</div><div class="line">            &#125; <span class="keyword">catch</span> (Exception e) &#123;</div><div class="line">                e.printStackTrace();</div><div class="line">            &#125;</div><div class="line">            <span class="keyword">return</span> drawable;</div><div class="line">        &#125;</div><div class="line"></div><div class="line">        <span class="meta">@Override</span></div><div class="line">        <span class="function"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title">onPostExecute</span><span class="params">(Drawable result)</span> </span>&#123;</div><div class="line">            <span class="keyword">if</span> (result != <span class="keyword">null</span>) &#123;</div><div class="line">                <span class="keyword">if</span> (mBlurredArt.getDrawable() != <span class="keyword">null</span>) &#123;</div><div class="line">                    <span class="keyword">final</span> TransitionDrawable td =</div><div class="line">                            <span class="keyword">new</span> TransitionDrawable(<span class="keyword">new</span> Drawable[]&#123;</div><div class="line">                                    mBlurredArt.getDrawable(),</div><div class="line">                                    result</div><div class="line">                            &#125;);</div><div class="line">                    mBlurredArt.setImageDrawable(td);</div><div class="line">                    td.startTransition(<span class="number">200</span>);</div><div class="line"></div><div class="line">                &#125; <span class="keyword">else</span> &#123;</div><div class="line">                    mBlurredArt.setImageDrawable(result);</div><div class="line">                &#125;</div><div class="line">            &#125;</div><div class="line">        &#125;</div><div class="line"></div><div class="line">        <span class="meta">@Override</span></div><div class="line">        <span class="function"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title">onPreExecute</span><span class="params">()</span> </span>&#123;</div><div class="line">        &#125;</div><div class="line">    &#125;</div></pre></td></tr></table></figure>
]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[python学习]]></title>
      <url>http://yoursite.com/2016/03/01/python%E5%AD%A6%E4%B9%A0/</url>
      <content type="html"><![CDATA[<h4 id="1-开头设置编码"><a href="#1-开头设置编码" class="headerlink" title="1.开头设置编码"></a>1.开头设置编码</h4><pre><code>#coding=utf-8
</code></pre><p>各国的编码规范混在一起，容易出现乱码的现象。Unicode标准统一了编码，但较浪费空间，因而出现了“可变长编码”的utf-8<br><a id="more"></a></p>
<ul>
<li>计算机系统通用的字符编码工作方式：<br><img src="/assets/blogImg/unicode.png" alt="文本存取"><br><img src="/assets/blogImg/browser.png" alt="浏览网页"></li>
</ul>
<figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line"><span class="comment">#获取字符的整数表示值</span></div><div class="line">print(ord(<span class="string">'A'</span>))</div><div class="line"><span class="comment">#获取对应字符</span></div><div class="line">print(chr(<span class="number">66</span>))</div><div class="line"><span class="comment">#对str,len()函数计算字符数,对bytes,len()函数计算字节数</span></div><div class="line">len(<span class="string">'中文'</span>) <span class="comment">#2</span></div><div class="line">len(<span class="string">'中文'</span>.encode(<span class="string">'utf-8'</span>)) <span class="comment">#6</span></div></pre></td></tr></table></figure>
<h4 id="2-声明变量-不用声明类型"><a href="#2-声明变量-不用声明类型" class="headerlink" title="2.声明变量  不用声明类型"></a>2.声明变量  <code>不用声明类型</code></h4><pre><code>a=10
b=5
</code></pre><h4 id="3-条件语句"><a href="#3-条件语句" class="headerlink" title="3. 条件语句"></a>3. 条件语句</h4><figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line">score = <span class="number">90</span></div><div class="line"><span class="keyword">if</span> score&lt;<span class="number">80</span> :</div><div class="line">    <span class="comment">#print前面必须要有缩进</span></div><div class="line">    print(<span class="string">"优秀"</span>)</div><div class="line"><span class="keyword">elif</span> score&gt;<span class="number">60</span> :</div><div class="line">    print(<span class="string">"及格"</span>)</div><div class="line"><span class="keyword">else</span> :</div><div class="line">    print(<span class="string">"不及格"</span>)</div></pre></td></tr></table></figure>
<h4 id="4-循环语句"><a href="#4-循环语句" class="headerlink" title="4.循环语句"></a>4.循环语句</h4><figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">for</span> i <span class="keyword">in</span> range(<span class="number">1</span>,<span class="number">100</span>,<span class="number">4</span>):</div><div class="line">    <span class="comment">#python特有的字符串拼接方式</span></div><div class="line">    print(<span class="string">"数字&#123;0&#125;,&#123;1&#125;"</span>.format(i,<span class="string">"hello python"</span>))</div><div class="line">    print(<span class="string">'%s,现在的数字是%d'</span> % (<span class="string">'python'</span>,i))</div></pre></td></tr></table></figure>
<h4 id="5-数据类型list和元组，字典dict和key集合set"><a href="#5-数据类型list和元组，字典dict和key集合set" class="headerlink" title="5.数据类型list和元组，字典dict和key集合set"></a>5.数据类型list和元组，字典dict和key集合set</h4><figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div></pre></td><td class="code"><pre><div class="line">fruits = [<span class="string">'apple'</span>, <span class="string">'peal'</span>, <span class="string">'orange'</span>]<span class="comment">#中间逗号后需有空格</span></div><div class="line"><span class="comment">#python可倒叙遍历</span></div><div class="line">print(fruits[<span class="number">-1</span>]) <span class="comment">#orange</span></div><div class="line">fruits.append(<span class="string">'banana'</span>)</div><div class="line">fruits.insert(<span class="number">2</span>, <span class="string">'watermelon'</span>)</div><div class="line"><span class="comment">#删除list末尾的元素</span></div><div class="line">fruits.pop()</div><div class="line"><span class="comment">#list元素也可以是另一个list</span></div><div class="line">s = [<span class="string">'python'</span>, <span class="string">'java'</span>, [<span class="string">'asp'</span>, <span class="string">'php'</span>], <span class="string">'scheme'</span>]</div><div class="line">len(s) <span class="comment">#4</span></div><div class="line"><span class="comment">#元组</span></div><div class="line">classmates = (<span class="string">'Michael'</span>, <span class="string">'Bob'</span>, <span class="string">'Tracy'</span>)</div><div class="line"></div><div class="line"><span class="comment">#dict,拥有较快查找速度，占空间大</span></div><div class="line"><span class="comment">#要保证hash的正确性，作为key的对象就不能变。在Python中，字符串、整数等都是不可变的，因此，可以放心地作为key。而list是可变的，就不能作为key</span></div><div class="line">d = &#123;<span class="string">'Michael'</span>: <span class="number">95</span>, <span class="string">'Bob'</span>: <span class="number">75</span>, <span class="string">'Tracy'</span>: <span class="number">85</span>&#125;</div><div class="line">d[<span class="string">'Adam'</span>] = <span class="number">67</span></div><div class="line"></div><div class="line"><span class="comment">#set中key不能重复，不存储value</span></div></pre></td></tr></table></figure>
<h4 id="6-函数定义"><a href="#6-函数定义" class="headerlink" title="6.函数定义"></a>6.函数定义</h4><figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">def</span> <span class="title">max</span><span class="params">(a,b)</span>:</span></div><div class="line">    <span class="keyword">if</span> a&gt;b:print(a)</div><div class="line">    <span class="keyword">else</span>:print(b)</div><div class="line"></div><div class="line">max(<span class="number">3</span>,<span class="number">5</span>)</div></pre></td></tr></table></figure>
<h4 id="7-高级特性"><a href="#7-高级特性" class="headerlink" title="7.高级特性"></a>7.高级特性</h4><ul>
<li>切片 －－ 简化list截取操作</li>
</ul>
<figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line">L = [<span class="string">'Michael'</span>, <span class="string">'Sarah'</span>, <span class="string">'Tracy'</span>, <span class="string">'Bob'</span>, <span class="string">'Jack'</span>]</div><div class="line"><span class="comment">#截取从0到3的list(不包括3)</span></div><div class="line">M = L[<span class="number">0</span>:<span class="number">3</span>] <span class="comment">#['Michael', 'Sarah', 'Tracy']</span></div><div class="line"><span class="comment">#字符串也可使用切片</span></div><div class="line">s = <span class="string">'ABCDEFG'</span>[::<span class="number">2</span>] <span class="comment">#'ACEG'</span></div></pre></td></tr></table></figure>
<ul>
<li>迭代</li>
</ul>
<figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">for</span> x, y <span class="keyword">in</span> [(<span class="number">1</span>, <span class="number">1</span>), (<span class="number">2</span>, <span class="number">4</span>), (<span class="number">3</span>, <span class="number">9</span>)]:</div><div class="line">  print(x, y)</div></pre></td></tr></table></figure>
<ul>
<li><p>函数式编程</p>
<ul>
<li><p>map/reduce</p>
<figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line"> <span class="function"><span class="keyword">def</span> <span class="title">f</span><span class="params">(x)</span>:</span></div><div class="line"><span class="keyword">return</span> x * x</div><div class="line"></div><div class="line"> <span class="comment">#map(f,Iterator)</span></div><div class="line"> r = map(f, [<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>, <span class="number">5</span>, <span class="number">6</span>, <span class="number">7</span>, <span class="number">8</span>, <span class="number">9</span>])</div><div class="line"> list(r) <span class="comment">#[1, 4, 9, 16, 25, 36, 49, 64, 81]</span></div><div class="line"> list(map(str, [<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>, <span class="number">5</span>, <span class="number">6</span>, <span class="number">7</span>, <span class="number">8</span>, <span class="number">9</span>]))<span class="comment">#['1', '2', '3', '4', '5', '6', '7', '8', '9']</span></div><div class="line"> <span class="comment">#reduce(f, [x1, x2, x3, x4]) = f(f(f(x1, x2), x3), x4)</span></div></pre></td></tr></table></figure>
</li>
</ul>
<ul>
<li><p>filter</p>
 <figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line">    <span class="comment">#filter()把传入的函数依次作用于每个元素</span></div><div class="line">    <span class="function"><span class="keyword">def</span> <span class="title">not_empty</span><span class="params">(s)</span>:</span></div><div class="line">    <span class="keyword">return</span> s <span class="keyword">and</span> s.strip()</div><div class="line"></div><div class="line">	 list(filter(not_empty, [<span class="string">'A'</span>, <span class="string">''</span>, <span class="string">'B'</span>, <span class="keyword">None</span>, <span class="string">'C'</span>, <span class="string">'  '</span>]))</div><div class="line"><span class="comment"># 结果: ['A', 'B', 'C']</span></div></pre></td></tr></table></figure>
</li>
<li><p>sorted 排序函数</p>
 <figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div></pre></td><td class="code"><pre><div class="line">    sorted([<span class="number">36</span>, <span class="number">5</span>, <span class="number">-12</span>, <span class="number">9</span>, <span class="number">-21</span>], key=abs) <span class="comment">#key定义排序方式，此处为按绝对值大小，[5, 9, -12, -21, 36]</span></div><div class="line">    sorted([<span class="string">'bob'</span>, <span class="string">'about'</span>, <span class="string">'Zoo'</span>, <span class="string">'Credit'</span>]) <span class="comment">#['Credit', 'Zoo', 'about', 'bob'],默认按照ASCII的大小顺序排列</span></div><div class="line">    sorted([<span class="string">'bob'</span>, <span class="string">'about'</span>, <span class="string">'Zoo'</span>, <span class="string">'Credit'</span>], key=str.lower, reverse=<span class="keyword">True</span>) <span class="comment">#['Zoo', 'Credit', 'bob', 'about']</span></div><div class="line">   ```    </div><div class="line">- 返回函数和闭包</div><div class="line"></div><div class="line">    ```python</div><div class="line">    <span class="function"><span class="keyword">def</span> <span class="title">calc_sum</span><span class="params">(*args)</span>:</span></div><div class="line">      <span class="function"><span class="keyword">def</span> <span class="title">sum</span><span class="params">()</span>:</span></div><div class="line">       ax=<span class="number">0</span></div><div class="line">       <span class="keyword">for</span> n <span class="keyword">in</span> args:</div><div class="line">           ax = ax + n</div><div class="line">       <span class="keyword">return</span> ax</div><div class="line">   <span class="keyword">return</span> sum   </div><div class="line">   f = calc_sum(<span class="number">1</span>, <span class="number">3</span>, <span class="number">5</span>, <span class="number">7</span>, <span class="number">9</span>) <span class="comment">#返回sum函数,且该函数并未执行</span></div><div class="line">   f()</div></pre></td></tr></table></figure>
</li>
<li><p>匿名函数</p>
 <figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div></pre></td><td class="code"><pre><div class="line">     f = <span class="keyword">lambda</span> x: x * x <span class="comment">#关键字lambda表示匿名函数</span></div><div class="line">     f(<span class="number">5</span>)</div><div class="line">     <span class="comment">#也可以把匿名函数作为返回值返回</span></div><div class="line">     <span class="function"><span class="keyword">def</span> <span class="title">build</span><span class="params">(x, y)</span>:</span></div><div class="line">        <span class="keyword">return</span> <span class="keyword">lambda</span>: x * x + y * y</div><div class="line">     ```    </div><div class="line"></div><div class="line"><span class="comment">#### 8.面向对象   支持多重继承(实际与java的接口类类似)</span></div><div class="line">```python</div><div class="line"><span class="class"><span class="keyword">class</span> <span class="title">Animal</span>:</span></div><div class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__init__</span><span class="params">(self,name)</span>:</span></div><div class="line">        self._name=name</div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">def</span> <span class="title">say</span><span class="params">(self)</span>:</span></div><div class="line">        print(<span class="string">"发出声音"</span>)</div><div class="line"><span class="comment">#实例的变量以`__`开头则表示一个私有变量，外部不能访问，如 __name</span></div><div class="line"><span class="comment">#Cat类继承自Animal</span></div><div class="line"><span class="class"><span class="keyword">class</span> <span class="title">Cat</span><span class="params">(Animal)</span>:</span></div><div class="line">    <span class="comment">#覆写父类的构造方法</span></div><div class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__int__</span><span class="params">(self,name)</span>:</span></div><div class="line">        Animal.__init__(self,name)</div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">def</span> <span class="title">say</span><span class="params">(self)</span>:</span></div><div class="line">        print(<span class="string">"&#123;0&#125;---喵~~"</span>.format(self._name))</div><div class="line"></div><div class="line">cat = Cat(<span class="string">"Cancy"</span>)</div><div class="line">cat.say()</div></pre></td></tr></table></figure>
</li>
</ul>
</li>
<li><p>可以给实例绑定一个方法，但给一个实例绑定的方法对另一个实例是没作用的</p>
</li>
<li>使用<strong>slots</strong>来限制可以绑定的属性</li>
<li><p>type()函数可以查看一个类型或变量的类型，可以创建出新的类型</p>
<figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line"><span class="class"><span class="keyword">class</span> <span class="title">Student</span><span class="params">(object)</span>:</span></div><div class="line">   __slots__ = (<span class="string">'name'</span>, <span class="string">'age'</span>) <span class="comment"># 用tuple定义允许绑定的属性名称</span></div></pre></td></tr></table></figure>
</li>
<li><p>Python内置的@property装饰器负责把一个方法变成属性调用的，可用以防止属性被随意修改</p>
<figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">def</span> <span class="title">fn</span><span class="params">(self, name=<span class="string">'world'</span>)</span>:</span> <span class="comment"># 先定义函数</span></div><div class="line">       print(<span class="string">'Hello, %s.'</span> % name)</div><div class="line"></div><div class="line"> Hello = type(<span class="string">'Hello'</span>, (object,), dict(hello=fn)) <span class="comment"># 创建Hello class</span></div><div class="line"></div><div class="line"> <span class="comment">#要创建一个class对象，type()函数依次传入3个参数：</span></div><div class="line"></div><div class="line"> <span class="comment">#1.class的名称；</span></div><div class="line"> <span class="comment">#2.继承的父类集合，注意Python支持多重继承，如果只有一个父类，别忘了tuple的单元素写法；</span></div><div class="line"> <span class="comment">#3.class的方法名称与函数绑定，这里我们把函数fn绑定到方法名hello上。</span></div></pre></td></tr></table></figure>
</li>
</ul>
<h4 id="9-引入py文件"><a href="#9-引入py文件" class="headerlink" title="9.引入py文件"></a>9.引入py文件</h4><figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">import</span> mylib</div><div class="line"></div><div class="line">h = mylib.hello()</div><div class="line">h.sayHello()</div><div class="line"></div><div class="line"><span class="keyword">from</span> mylib <span class="keyword">import</span> Hello</div><div class="line"></div><div class="line">h = Hello()</div><div class="line">h.sayHello()</div></pre></td></tr></table></figure>
<h4 id="10-I-O操作"><a href="#10-I-O操作" class="headerlink" title="10.I/O操作"></a>10.I/O操作</h4><h5 id="读写文件"><a href="#读写文件" class="headerlink" title="读写文件"></a>读写文件</h5><figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">try</span>:</div><div class="line">    f = open(<span class="string">'/path/to/file'</span>, <span class="string">'r'</span>)</div><div class="line">    print(f.read())</div><div class="line"><span class="keyword">finally</span>:</div><div class="line">    <span class="keyword">if</span> f:</div><div class="line">        f.close()</div><div class="line"><span class="comment">#Python引入了with语句来自动帮我们调用close()方法,上面可改为：</span></div><div class="line"><span class="keyword">with</span> open(<span class="string">'/path/to/file'</span>, <span class="string">'r'</span>) <span class="keyword">as</span> f:</div><div class="line">    print(f.read())</div></pre></td></tr></table></figure>
<h5 id="StringIO-在内存中读写str-BytesIO-在内存中读写bytes"><a href="#StringIO-在内存中读写str-BytesIO-在内存中读写bytes" class="headerlink" title="StringIO(在内存中读写str), BytesIO(在内存中读写bytes)"></a>StringIO(在内存中读写str), BytesIO(在内存中读写bytes)</h5><figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div></pre></td><td class="code"><pre><div class="line"><span class="comment">#StringIO</span></div><div class="line"><span class="keyword">from</span> io <span class="keyword">import</span> StringIO</div><div class="line">f = StringIO()</div><div class="line"><span class="comment">#写</span></div><div class="line">f.write(<span class="string">'hello'</span>)</div><div class="line"><span class="comment">#读</span></div><div class="line">f = StringIO(<span class="string">'Hello!\nHi!\nGoodbye!'</span>)</div><div class="line"><span class="keyword">while</span> <span class="keyword">True</span>:</div><div class="line">    s = f.readline()</div><div class="line">    <span class="keyword">if</span> s == <span class="string">''</span>:</div><div class="line">        <span class="keyword">break</span></div><div class="line">    print(s.strip())</div><div class="line"></div><div class="line"><span class="comment">#BytesIO</span></div><div class="line"><span class="keyword">from</span> io <span class="keyword">import</span> BytesIO</div><div class="line">f = BytesIO()</div><div class="line">f.write(<span class="string">'中文'</span>.encode(<span class="string">'utf-8'</span>))</div></pre></td></tr></table></figure>
<p>–<br>学习中…</p>
]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[android实现圆形图片]]></title>
      <url>http://yoursite.com/2016/03/01/%E5%9C%86%E5%BD%A2%E5%9B%BE%E7%89%87/</url>
      <content type="html"><![CDATA[<h3 id="方案1"><a href="#方案1" class="headerlink" title="方案1"></a>方案1</h3><p>处理Bitmap为圆形，再给ImageView设置该Bitmap<br><a id="more"></a><br><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div><div class="line">61</div><div class="line">62</div><div class="line">63</div><div class="line">64</div><div class="line">65</div><div class="line">66</div><div class="line">67</div><div class="line">68</div><div class="line">69</div><div class="line">70</div><div class="line">71</div><div class="line">72</div><div class="line">73</div><div class="line">74</div><div class="line">75</div><div class="line">76</div><div class="line">77</div><div class="line">78</div><div class="line">79</div><div class="line">80</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Util</span> </span>&#123;</div><div class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="keyword">int</span> STROKE_WIDTH = <span class="number">4</span>;</div><div class="line"></div><div class="line">    <span class="comment">//从assets资源中获取图片</span></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> Bitmap <span class="title">getBitmap</span><span class="params">(Context context, String filename)</span> </span>&#123;</div><div class="line"></div><div class="line"></div><div class="line">        Bitmap image = <span class="keyword">null</span>;</div><div class="line">        AssetManager am = context.getResources().getAssets();</div><div class="line">        <span class="keyword">try</span> &#123;</div><div class="line"></div><div class="line">            InputStream is = am.open(filename);</div><div class="line">            image = BitmapFactory.decodeStream(is);</div><div class="line">            is.close();</div><div class="line">        &#125; <span class="keyword">catch</span> (IOException e) &#123;</div><div class="line">            e.printStackTrace();</div><div class="line">        &#125;</div><div class="line">        <span class="keyword">return</span> image;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> Bitmap <span class="title">toRoundBitmap</span><span class="params">(Context context, String filename)</span> </span>&#123;</div><div class="line">        Bitmap bitmap = getBitmap(context, filename);</div><div class="line">        <span class="keyword">int</span> width = bitmap.getWidth();</div><div class="line">        <span class="keyword">int</span> height = bitmap.getHeight();</div><div class="line">        <span class="keyword">float</span> roundPx;</div><div class="line">        <span class="keyword">float</span> left, top, right, bottom, dst_left, dst_top, dst_right, dst_bottom;</div><div class="line">        <span class="keyword">if</span> (width &lt;= height) &#123;</div><div class="line">            roundPx = width / <span class="number">2</span>;</div><div class="line">            top = <span class="number">0</span>;</div><div class="line">            left = <span class="number">0</span>;</div><div class="line">            bottom = width;</div><div class="line">            right = width;</div><div class="line">            height = width;</div><div class="line">            dst_left = <span class="number">0</span>;</div><div class="line">            dst_top = <span class="number">0</span>;</div><div class="line">            dst_right = width;</div><div class="line">            dst_bottom = width;</div><div class="line">        &#125; <span class="keyword">else</span> &#123;</div><div class="line">            roundPx = height / <span class="number">2</span>;</div><div class="line">            <span class="keyword">float</span> clip = (width - height) / <span class="number">2</span>;</div><div class="line">            left = clip;</div><div class="line">            right = width - clip;</div><div class="line">            top = <span class="number">0</span>;</div><div class="line">            bottom = height;</div><div class="line">            width = height;</div><div class="line">            dst_left = <span class="number">0</span>;</div><div class="line">            dst_top = <span class="number">0</span>;</div><div class="line">            dst_right = height;</div><div class="line">            dst_bottom = height;</div><div class="line">        &#125;</div><div class="line"></div><div class="line">        Bitmap output = Bitmap.createBitmap(width,</div><div class="line">                height, Config.ARGB_8888);</div><div class="line">        Canvas canvas = <span class="keyword">new</span> Canvas(output);</div><div class="line"></div><div class="line">        <span class="keyword">final</span> <span class="keyword">int</span> color = <span class="number">0xff424242</span>;</div><div class="line">        <span class="keyword">final</span> Paint paint = <span class="keyword">new</span> Paint();</div><div class="line">        <span class="keyword">final</span> Rect src = <span class="keyword">new</span> Rect((<span class="keyword">int</span>) left, (<span class="keyword">int</span>) top, (<span class="keyword">int</span>) right, (<span class="keyword">int</span>) bottom);</div><div class="line">        <span class="keyword">final</span> Rect dst = <span class="keyword">new</span> Rect((<span class="keyword">int</span>) dst_left, (<span class="keyword">int</span>) dst_top, (<span class="keyword">int</span>) dst_right, (<span class="keyword">int</span>) dst_bottom);</div><div class="line">        <span class="keyword">final</span> RectF rectF = <span class="keyword">new</span> RectF(dst);</div><div class="line"></div><div class="line">        paint.setAntiAlias(<span class="keyword">true</span>);</div><div class="line"></div><div class="line">        canvas.drawARGB(<span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>);</div><div class="line">        paint.setColor(Color.WHITE);</div><div class="line">        paint.setStrokeWidth(<span class="number">4</span>);</div><div class="line">        canvas.drawRoundRect(rectF, roundPx, roundPx, paint);</div><div class="line">        paint.setXfermode(<span class="keyword">new</span> PorterDuffXfermode(Mode.SRC_IN));</div><div class="line">        canvas.drawBitmap(bitmap, src, dst, paint);</div><div class="line"></div><div class="line">        <span class="comment">//画白色圆圈</span></div><div class="line">        paint.reset();</div><div class="line">        paint.setColor(Color.WHITE);</div><div class="line">        paint.setStyle(Paint.Style.STROKE);</div><div class="line">        paint.setStrokeWidth(STROKE_WIDTH);</div><div class="line">        paint.setAntiAlias(<span class="keyword">true</span>);</div><div class="line">        canvas.drawCircle(width / <span class="number">2</span>, width / <span class="number">2</span>, width / <span class="number">2</span> - STROKE_WIDTH / <span class="number">2</span>, paint);</div><div class="line">        <span class="keyword">return</span> output;</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<h3 id="方案2"><a href="#方案2" class="headerlink" title="方案2"></a>方案2</h3><p>自定义View继承自ImageView,在setImageDrawable()方法中把BitamapDrawable转为RoundedBitmapDrawable</p>
<p><code>bug ColorDrawable不能转化，需获取bitmap</code></p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div></pre></td><td class="code"><pre><div class="line"><span class="meta">@Override</span></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setBackgroundDrawable</span><span class="params">(Drawable drawable)</span> </span>&#123;</div><div class="line">        <span class="keyword">if</span> (drawable <span class="keyword">instanceof</span> ColorDrawable) &#123;</div><div class="line">            Bitmap bm = Bitmap.createBitmap(getWidth(),getHeight(), Bitmap.Config.ARGB_8888);</div><div class="line">            Paint paint = <span class="keyword">new</span> Paint();</div><div class="line">            paint.setAntiAlias(<span class="keyword">true</span>);</div><div class="line">            paint.setColor(((ColorDrawable)drawable).getColor());</div><div class="line">            paint.setStyle(Paint.Style.FILL);</div><div class="line">            <span class="comment">//根据创建的bitmap新建一张画布</span></div><div class="line">            Canvas canvas = <span class="keyword">new</span> Canvas(bm);</div><div class="line">            canvas.drawCircle(getWidth()/<span class="number">2</span>,getWidth()/<span class="number">2</span>,getWidth()/<span class="number">2</span>,paint);</div><div class="line">            RoundedBitmapDrawable roundedDrawable = RoundedBitmapDrawableFactory.create(getResources(),</div><div class="line">                    bm);</div><div class="line">            roundedDrawable.setCircular(<span class="keyword">true</span>);</div><div class="line">            <span class="keyword">super</span>.setBackgroundDrawable(roundedDrawable);</div><div class="line">        &#125; <span class="keyword">else</span> &#123;</div><div class="line">            BitmapDrawable bitmapDrawable = (BitmapDrawable) drawable;</div><div class="line">            <span class="meta">@SuppressWarnings</span>(<span class="string">"ConstantConditions"</span>)</div><div class="line">            RoundedBitmapDrawable roundedDrawable = RoundedBitmapDrawableFactory.create(getResources(),</div><div class="line">                    bitmapDrawable.getBitmap());</div><div class="line">            roundedDrawable.setCircular(<span class="keyword">true</span>);</div><div class="line">            <span class="keyword">super</span>.setBackgroundDrawable(roundedDrawable);</div><div class="line">        &#125;</div><div class="line">    &#125;</div></pre></td></tr></table></figure>
<ul>
<li>Drawable转为Bitmap的方法</li>
</ul>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">mExpandBm = Bitmap.createBitmap(mExpandDrawable.getIntrinsicWidth(),mExpandDrawable.getIntrinsicHeight(), Bitmap.Config.ARGB_8888);</div><div class="line">           Canvas cv1 = <span class="keyword">new</span> Canvas(mExpandBm);</div><div class="line">           mExpandDrawable.setBounds(<span class="number">0</span>,<span class="number">0</span>,mExpandDrawable.getIntrinsicWidth(),mExpandDrawable.getIntrinsicHeight());</div><div class="line">           mExpandDrawable.draw(cv1);</div></pre></td></tr></table></figure>
]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[Dalvik VM学习]]></title>
      <url>http://yoursite.com/2016/03/01/Dalvik%20VM%E5%AD%A6%E4%B9%A0/</url>
      <content type="html"><![CDATA[<h3 id="1-1-Dalvik架构"><a href="#1-1-Dalvik架构" class="headerlink" title="1.1 Dalvik架构"></a>1.1 Dalvik架构</h3><ul>
<li>Dalvik VM第一次加载生成Cache文件，速度较慢</li>
<li>Dalvik解释器采用预先算好的Goto地址，基于每个指令OpCode，都固定以64bytes为相对地址，可节省指令执行后查表的时间<a id="more"></a></li>
<li>dx将java的.class文件转换成.dex格式，优化时会使文件增加1～4倍，格式为ODEX</li>
</ul>
<h3 id="1-2-和java虚拟机的差异"><a href="#1-2-和java虚拟机的差异" class="headerlink" title="1.2  和java虚拟机的差异"></a>1.2  和java虚拟机的差异</h3><ul>
<li>虚拟机很小,使用的空间也很小</li>
<li>没有JIT编译器</li>
<li>常量池使用32位索引，以简化解释器</li>
<li>使用自己的字节码</li>
<li>基于register</li>
<li>通过Zygote进行class Preloading，完成虚拟机初始化</li>
</ul>
<h3 id="1-3-Dalvik-VM的主要特征"><a href="#1-3-Dalvik-VM的主要特征" class="headerlink" title="1.3  Dalvik VM的主要特征"></a>1.3  Dalvik VM的主要特征</h3><ul>
<li>.dex文件会把所有.class文件整合到一个文件中，减小了文件尺寸，i/o操作，提高类查找速度</li>
<li>每一个android应用运行在一个Dalvik VM实例里，每一个VM实例都是一个独立的进程空间，不同来源的应用使用不同的linux用户来运行</li>
<li>Zygote是一个虚拟机进程，每当系统需要执行一个android应用程序，Zygote就会孵化出一个子进程来执行该应用程序</li>
</ul>
<h3 id="1-4-Dalvik-VM代码结构"><a href="#1-4-Dalvik-VM代码结构" class="headerlink" title="1.4  Dalvik VM代码结构"></a>1.4  Dalvik VM代码结构</h3><p>代码保存在dalvik/目录下</p>
<ul>
<li>dalvikvm ：命令行调用入口文件目录，用于解释命令行参数，调用库函数接口等。</li>
<li>dexdump  ：用于查看看编译出来的文件是否正确</li>
<li>dexlist  ：生成查看dex文件里所有类方法的工具</li>
<li>dexopt  ：生成dex优化工具</li>
<li>dvz  ：生成从Zygote请求生成虚拟机实例的工具</li>
<li>hit  ：生成显示对象信息／堆栈信息的工具</li>
<li><p>……</p>
<p>–<br>学习中…</p>
</li>
</ul>
]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[Android键盘相关知识整合]]></title>
      <url>http://yoursite.com/2015/11/18/android%E9%94%AE%E7%9B%98%E7%9B%B8%E5%85%B3%E7%9F%A5%E8%AF%86%E6%95%B4%E5%90%88/</url>
      <content type="html"><![CDATA[<h3 id="1-显示键盘"><a href="#1-显示键盘" class="headerlink" title="1.显示键盘"></a>1.显示键盘</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line">et_text.requestFocus();</div><div class="line">et_text.post(<span class="keyword">new</span> Runnable() &#123;</div><div class="line">                    <span class="meta">@Override</span></div><div class="line">                    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">run</span><span class="params">()</span> </span>&#123;</div><div class="line">                        ((InputMethodManager) mContext.getSystemService(Context.INPUT_METHOD_SERVICE)).showSoftInput(et_text, <span class="number">0</span>);</div><div class="line">                    &#125;</div><div class="line">                &#125;);</div></pre></td></tr></table></figure>
<a id="more"></a>  
<h3 id="2-隐藏键盘"><a href="#2-隐藏键盘" class="headerlink" title="2.隐藏键盘"></a>2.隐藏键盘</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">private</span> InputMethodManager inputManager;<span class="comment">//软键盘控制器</span></div><div class="line">inputManager = (InputMethodManager) activity.getSystemService(Context.INPUT_METHOD_SERVICE);</div><div class="line">        listView.setOnScrollListener(<span class="keyword">new</span> PauseOnScrollListener(bitmapUtils, <span class="keyword">false</span>, <span class="keyword">true</span>, <span class="keyword">new</span> AbsListView.OnScrollListener() &#123;</div><div class="line">            <span class="meta">@Override</span></div><div class="line">            <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">onScrollStateChanged</span><span class="params">(AbsListView view, <span class="keyword">int</span> scrollState)</span> </span>&#123;</div><div class="line">                <span class="keyword">if</span> (activity.getWindow().getAttributes().softInputMode != WindowManager.LayoutParams.SOFT_INPUT_STATE_HIDDEN) &#123;</div><div class="line">                    <span class="keyword">if</span> (activity.getCurrentFocus() != <span class="keyword">null</span> )</div><div class="line">                        inputManager.hideSoftInputFromWindow(activity.getCurrentFocus().getWindowToken(), <span class="number">0</span>);</div><div class="line">                &#125;</div><div class="line">            &#125;</div><div class="line">            <span class="meta">@Override</span></div><div class="line">            <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">onScroll</span><span class="params">(AbsListView view, <span class="keyword">int</span> firstVisibleItem, <span class="keyword">int</span> visibleItemCount, <span class="keyword">int</span> totalItemCount)</span> </span>&#123;</div><div class="line">            &#125;</div><div class="line">        &#125;));</div></pre></td></tr></table></figure>
<h3 id="有用到键盘的地方，常常会出现View被键盘挡住的现象，解决办法如下"><a href="#有用到键盘的地方，常常会出现View被键盘挡住的现象，解决办法如下" class="headerlink" title="有用到键盘的地方，常常会出现View被键盘挡住的现象，解决办法如下:"></a>有用到键盘的地方，常常会出现View被键盘挡住的现象，解决办法如下:</h3><hr>
<ul>
<li>adjustResize  调整键盘保证其显示</li>
<li>adjustPan 移动界面保证界面底部显示</li>
</ul>
<h4 id="1-代码实现View的addOnGlobalLayoutListener接口，监听键盘高度并重新布局"><a href="#1-代码实现View的addOnGlobalLayoutListener接口，监听键盘高度并重新布局" class="headerlink" title="1.代码实现View的addOnGlobalLayoutListener接口，监听键盘高度并重新布局"></a>1.代码实现View的addOnGlobalLayoutListener接口，监听键盘高度并重新布局</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div></pre></td><td class="code"><pre><div class="line"><span class="comment">/**</span></div><div class="line">     * <span class="doctag">@param</span> root 最外层布局，需要调整的布局</div><div class="line">     * <span class="doctag">@param</span> scrollToView 被键盘遮挡的scrollToView，滚动root,使scrollToView在root可视区域的底部</div><div class="line">     */</div><div class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">controlKeyboardLayout</span><span class="params">(<span class="keyword">final</span> View root, <span class="keyword">final</span> View scrollToView)</span> </span>&#123;</div><div class="line">        root.getViewTreeObserver().addOnGlobalLayoutListener( <span class="keyword">new</span> ViewTreeObserver.OnGlobalLayoutListener() &#123;</div><div class="line">            <span class="meta">@Override</span></div><div class="line">            <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">onGlobalLayout</span><span class="params">()</span> </span>&#123;</div><div class="line">                Rect rect = <span class="keyword">new</span> Rect();</div><div class="line">                <span class="comment">//获取root在窗体的可视区域</span></div><div class="line">                root.getWindowVisibleDisplayFrame(rect);</div><div class="line">                <span class="comment">//获取root在窗体的不可视区域高度(被其他View遮挡的区域高度)</span></div><div class="line">                <span class="keyword">int</span> rootInvisibleHeight = root.getRootView().getHeight() - rect.bottom;</div><div class="line">                <span class="comment">//若不可视区域高度大于100，则键盘显示</span></div><div class="line">                <span class="keyword">if</span> (rootInvisibleHeight &gt; <span class="number">100</span>) &#123;</div><div class="line">                    <span class="keyword">int</span>[] location = <span class="keyword">new</span> <span class="keyword">int</span>[<span class="number">2</span>];</div><div class="line">                    <span class="comment">//获取scrollToView在窗体的坐标</span></div><div class="line">                    scrollToView.getLocationInWindow(location);</div><div class="line">                    <span class="comment">//计算root滚动高度，使scrollToView在可见区域</span></div><div class="line">                    <span class="keyword">int</span> srollHeight = (location[<span class="number">1</span>] + scrollToView.getHeight()) - rect.bottom;</div><div class="line">                    root.scrollTo(<span class="number">0</span>, srollHeight);</div><div class="line">                &#125; <span class="keyword">else</span> &#123;</div><div class="line">                    <span class="comment">//键盘隐藏</span></div><div class="line">                    root.scrollTo(<span class="number">0</span>, <span class="number">0</span>);</div><div class="line">                &#125;</div><div class="line">            &#125;</div><div class="line">        &#125;);</div><div class="line">    &#125;</div></pre></td></tr></table></figure>
<p>此方法有时会出现界面跳动的bug</p>
<h4 id="2-对于一般的Activity，直接在AndroidMainfest-xml中配置"><a href="#2-对于一般的Activity，直接在AndroidMainfest-xml中配置" class="headerlink" title="2.对于一般的Activity，直接在AndroidMainfest.xml中配置"></a>2.对于一般的Activity，直接在AndroidMainfest.xml中配置</h4><p>android:windowSoftInputMode=”adjustResize”<br>一般可解决问题</p>
<h4 id="3-对于设置过透明状态栏（android4-4）的界面，一般容易出现输入框有一部分被挡住的情况"><a href="#3-对于设置过透明状态栏（android4-4）的界面，一般容易出现输入框有一部分被挡住的情况" class="headerlink" title="3.对于设置过透明状态栏（android4.4）的界面，一般容易出现输入框有一部分被挡住的情况"></a>3.对于设置过透明状态栏（android4.4）的界面，一般容易出现输入框有一部分被挡住的情况</h4><p>这时需在ListView、RecyclerView的父布局上设置<br>android:fitsSystemWindows=”true”</p>
]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[睿思学长的面经]]></title>
      <url>http://yoursite.com/2015/11/18/%E6%B1%82%E8%81%8C%E7%BB%8F%E9%AA%8C%E5%88%86%E4%BA%AB/</url>
      <content type="html"><![CDATA[<p><strong>原文转自睿思jzj1993学长</strong></p>
<p>这篇文章写了很久了，今天又遇到一位对找工作毫无概念的大二同学，恰好和常见的找工作经验分享帖不一样，这篇文章主要就是介绍这种没人说的问题的。所以决定也分享到睿思上来吧。文中也提及了学历、专业对找工作的影响，但是也只是根据我的经验得出来的个人看法……<br><a id="more"></a><br>=====================无辜的分割线======================</p>
<p>昨天有同学问我找工作方面的事，感觉有很多疑问，想想有必要把我找工作那段时间学到的东西简单做个总结，供有需要的同学参考。</p>
<p>在找工作之前，和很多同学一样我有很多疑问，比如什么时候找工作这种事都不了解，但是找到工作之后，又忘了当初有哪些疑问。为了让这篇写的完整一点，我特地让一位对找工作不太了解、不愿透漏姓名的、机智的学弟帮忙，把他的疑问全部说出来，然后我汇总进行一个完整的总结。尤其是很多“脑残”问题，很少有人去写，但是却又有很多人不了解，很可能因此吃了亏。</p>
<p>这里要说明的是，我这里按照我自己的经历，讨论的主要是技术类岗位。找工作这种东西都是有时效性的，明年形势和今年可能大不相同。另外，我是西电本科毕业生，今年国庆之前刚和美团签约，做的是安卓开发，待遇我自己觉得还不错，这里就不透露了（感觉是个人隐私 o(╯□╰)o ）。</p>
<h2 id="1、校招和社招"><a href="#1、校招和社招" class="headerlink" title="1、校招和社招"></a>1、校招和社招</h2><p>公司招聘常分两种，社招和校招。社会招聘一般要求工作经验；校园招聘不是所有的公司都有，针对应届毕业生，通常正式入职之前会有一段时间实习（有的称为试用期）培训。公司通过校招吸收一些优秀人才，虽然没有工作经验，但是经过培训往往能很好的完成工作，对公司有利，也很好的促进了大学生就业。</p>
<h2 id="2、社会需求"><a href="#2、社会需求" class="headerlink" title="2、社会需求"></a>2、社会需求</h2><p>找工作核心是两点，一是社会对我们学生的需求，而是我们学生期望公司能给我们带来的利益，包括工资等等。所以这里先说社会需求。</p>
<p>在技术职位方面，就目前来看，最火的大概就是互联网了。典型的互联网公司，如谷歌、百度、阿里、腾讯等。互联网公司对技术人员需求很大，做的比较多的技术偏软件方向，网络、运维、云计算、大数据、算法、移动开发等。然后也有一些公司会做硬件设备，需要嵌入式、硬件之类，典型的公司如华为、小米等。当然大部分公司少不了市场营销、推广这类岗位，以及平面设计、网页设计这类的岗位。</p>
<p>有个很简单的办法就可以快速了解到公司的需求。例如我们搜索“百度校招”，就可以打开百度校招网站，然后看他都有哪些岗位，然后每个岗位有什么具体需求也写得很清楚明白。强烈建议计划找工作的同学先去了解下这些东西，然后有一定针对性的去学习，方便后面找工作。我就是一直没怎么在意这个，找工作的时候才感觉时间已经来不及了。</p>
<h2 id="3、学历的影响"><a href="#3、学历的影响" class="headerlink" title="3、学历的影响"></a>3、学历的影响</h2><p>很多人问我对上研和找工作怎么看。就我自己而言，我家里很想让我上研，何况我还比较容易争取保研资格。但是我自己很清楚，至少我是不怎么想继续呆在学校，想换个环境、更适合我的环境发展，也就是工作（如果出国也是个不错的选择，但是感觉条件不太好，目前也不是很想出国）。估计不少同学都遇到和我一样的问题，不想继续上研，但是家里又要求上研。</p>
<p>上研到底有没有必要呢？要不要上研，我觉得首先得明确自己以后有什么打算。</p>
<p>如果你以后想做学术研究，或者进研究所之类，学历肯定是必要的。我一直认为学历并不能衡量一个人的能力和学到的知识，但是总体来说，如果做学术，学历低的人肯定不如学历高的人。所以那些研究所什么的，可能是出于方便筛选的原则，当然是对学历有要求。还有的公司有一些工作，理论性比较强，比如模拟电路设计、机械方面设计，往往也会要求研究生学历，这个可以自行查看公司校招职位说明。</p>
<p>如果你只是想毕业了去做例如软件研发这类偏工程的东西，学历并不是那么重要。总体来说，应届研究生比本科生找的工作肯定好，很多公司很明确的给研究生月薪起薪要高一千。但是不要忘了，研究生是多花了三年时间，其中一些人还是交了不少学费才拿到研究生学历的，理应比上研之前待遇好一些。</p>
<p>拿今年阿里来说，官网上说今年计划招聘一千人，具体招了多少人我没有去了解，但是一千人实际上算是比较少的了。全国一千人，能分到西安来的就不多了，西电能进去的就更少了，而且阿里有那么多校招职位。我也面试了阿里，之所以去面试，一方面是知道阿里待遇好，另一方面阿里的招聘时间很早，所以就去了。面试很顺利到了终面，但是后来一直就没了消息。</p>
<p>后来了解到阿里差不多只在西电招了一些研究生，本科生很少。为什么主要招研究生呢？不是说好的不看学历么？原因很简单，大部分同学都是从大学开始学习技术方面知识的，而招聘在开学初9月份，也就是说，大部分本科生其实只学了三年，而大部分研究生已经学了六年。双倍的时间，那么少的名额，自然研究生多得多。</p>
<p>不过想想也幸亏我没被阿里录取，要不然我估计就不会考虑美团，也没有后面那么多经历和感受，然后写这篇文章了。实际上我更喜欢美团这种创业型公司的氛围，这个下文会说。</p>
<h2 id="4、专业和学习成绩"><a href="#4、专业和学习成绩" class="headerlink" title="4、专业和学习成绩"></a>4、专业和学习成绩</h2><p>专业和学习成绩对工作有多大的影响呢？</p>
<p>首先第一道门槛，例如有的公司明确指出，软件开发仅限通信、计算机、电子等相关专业学生，如果你是艺术类专业，通常可以自觉绕道了。不过我是一个相信奇迹的人，我想，如果一个艺术系的学生，意外的把编程学的相当好，然后去公司面试，公司完全可以破格录取（公司招聘不像高考那么严格，一分压倒一批人）。</p>
<p>然后还有什么影响呢？拿我在美团面试经历来说，面试官确实问了我学习成绩和专业方面的东西。我面试的是安卓开发，但是专业是通信，安卓开发作为软件，一般需要《数据结构》《数据库》《操作系统》《计算机网络》《设计模式》之类学科知识，但是我的专业还好还学了数据结构，操作系统和网络只是选修课随便学了点，数据库、设计模式则是我自己学的。对于我而言，平时喜欢接触新东西，所以该学的东西基本算是了解了，但是并不深入，另外也有可能完全就不知道有这个学科，比如《设计模式》还是意外从同学那看到的。如果我是计算机或者软件专业，这些课可能就是必修，虽说是应付考试，但是好歹对课程还是有了基本概念。考试成绩也是差不多的意思。</p>
<p>总体而言，这两者没有很大影响，只要面试时你能证明你的实力就够了。</p>
<h2 id="5、公司待遇相关"><a href="#5、公司待遇相关" class="headerlink" title="5、公司待遇相关"></a>5、公司待遇相关</h2><p>一提到工作，很多人唯一会想的的就是工资水平。工资确实很关键，但是确实不是唯一值得考虑的东西。</p>
<p>首先有哪些公司呢？个人感觉最好的差不多就是世界级巨头，像谷歌、微软、德州仪器这种。这些大公司，工资等各方面待遇一流，平台好，发展前景大。尤其谷歌一直是很多程序员的梦想王国。</p>
<p>现在问题来了，这些公司很多都在国外，国内并不一定能有多好。以谷歌为例，谷歌中国只有上海有软件研发岗位，而且似乎不怎么招人了。谷歌应该是对算法要求很高。听同学说，之前有算法很强的人面试谷歌，然后去了谷歌美国总部。也有算法很强本可以去谷歌总部的人，因为英语实在没法交流，没去成。</p>
<p>其次，公认的国内互联网三巨头BAT：百度、阿里、腾讯。据我了解，百度、阿里工资都很高，年薪能到20w以上，腾讯工资低一点，但是据说公司里面很好玩。</p>
<p>在其次，应该就是像美团、360、金山等等这些公司。我们手机中用的几乎每款国产应用，都有官网，并且很多都有校招。</p>
<p>然后还有华为，感觉华为算是比较特别的。就公司实力来看，华为是世界五百强，绝对秒杀BAT（世界五百强的网络公司很少，具体自行百度），华为的规模相当庞大，遍布世界各地。华为不算是互联网公司，做的最多的是网络设备，然后现在也在做手机、云计算等。华为这么庞大，于是有个特点，招人特别多，所以对毕业生要求不是很高。工资待遇方面，如果你的实力够强，可以特殊起薪，应该不会差。华为CEO从事过军事科技方面研究，参过军，华为公司又很庞大，可能也是因为这几个原因，据说华为公司的管理比较规范严格一些，尤其是保密方面做得比一般的公司高，另外华为推崇奋斗者的工作态度。至于这样的氛围，到底好不好，不同的人看法不同。</p>
<p>工资待遇可以参考文章末尾的链接。工资一般都是税前的，实际上扣掉五险一金，再去掉个人所得税，再考虑到房租、吃住等等消费，实际上每个月能剩的也不那么多了。赚钱难，且赚且珍惜。另外大部分公司工资神奇的不是按12个月算，而是14、15甚至到18个月，原因是有年终奖之类也按月薪算了，还有更重要的一点，很多公司加班不少，悲惨的程序猿……</p>
<p>除了工资以外，还有哪些值得考虑的问题呢？前面说了公司的氛围。就公司氛围来说，一般大公司的特点是管理制度成熟规范化，等级制度比较严格，比较特例的是谷歌，具体自行百度。而小公司就随意一些，不少小公司也以推崇平等自由的氛围作为一个吸引毕业生应聘的特点，但是小公司可能会有更多不合理的制度。大公司工作会被安排的比较固定和规范，而小公司你可能需要同时去考虑比较多的问题，当然也能得到更多锻炼。</p>
<p>在创业型的小公司，你会有更多的学习机会。如果公司发展的好，或许还能有意想不到的收获，比如分股份什么的（据说阿里上市造就了很多千万富翁，那些人不少都是在阿里呆了很久的员工）。收获越大，风险越大，小公司往往风险会更大，这就需要自行判断了。</p>
<p>工作地点也是一个值得考虑的问题。大部分人倾向于北上广深一线城市，确实大城市发展机会多，但是消费水平、生活压力也会大一些。北京互联网公司多，尤其创业互联网公司特别多，发展机会很多，消费水平高，环境不是很好。而深圳是一个很包容的城市，最发达的是电子行业。大连听说是个不错的城市，经济和环境都不错。杭州也不错，尤其旅游景点很多，阿里的总部就在杭州。更多的自行了解吧。</p>
<p>男女比例也是一个有价值的问题。在美团，据说女员工比男员工要多，这对于我们很多男程序员而言可以算是一件好事。而不少公司技术类环境，普遍的男女比例严重失调。</p>
<p>是否加班也应该考虑一下。据说华为就是比较典型的加班奋斗工作狂的公司（我也是听说，不知道具体情况）。如果你觉得年轻时就应该好好奋斗，或者你不希望把自己的所有时间全部贡献在公司了，你就应该考虑下这个问题。</p>
<p>然后公司还有其他例如住房补贴、免费餐饮、免费乘车这类福利，虽然不是很大的数额，但是至少总比没有好。</p>
<p>恩，忘了说，阿里这种帅富公司据说还有一年一度的集体婚礼、年度体检、无息贷款、幸福班车、甚至子女教育相关问题等福利，具体看官网，另外是否确实有这些，可以询问已经在那些公司工作的人（不排除有些公司的部分福利只是说说而已）。</p>
<p>然后还有几个重要的，五险一金、户口问题。五险一金请自行百度，应该是国家规定的，正规公司应该都提供的保险、住房公积金方面的东西，在你每个月工资的基础上扣除一部分缴纳五险一金，同时公司按一定的比例也给你缴纳一部分。户口是个大问题，也是很难解决的问题。如果你在北京工作，没有户口你就是外来人员，不能享受北京当地的市民待遇。如果买房之类的，有当地户口也能减免很多钱。但是北京户口很难拿到，毕竟那么多人都想定居京都，何况又有巨大的好处。有人说北京户口价值100万，在一定程度上是可以这么说的。我没有什么社会经验，所有的这些也是道听途说，主要是提醒大家留意一下这些杂七杂八的问题。北京户口只有阿里这种大公司才有可能给你解决，360据说今年也会解决北京户口，但是名额肯定少。如果进国企、央企，解决户口问题的可能性应该会大很多。</p>
<p>和户口相关的还有一个档案的问题。如果你没有户口去北京，档案会被退回到户口所在地，有必要的话，需要自己再转到北京。有的公司会帮助你把档案转过去，可以在签约时问一问。具体怎么转，转了有什么作用我也不了解，大家自己再看吧。</p>
<h2 id="6、面试相关"><a href="#6、面试相关" class="headerlink" title="6、面试相关"></a>6、面试相关</h2><p>面试首先是简历的准备。关于简历怎么准备，网上有各种参考资料，我不再细说。总体而言就是不要太啰嗦也不能太简单；一定要根据公司的需求，把自己相应的能力尽可能展示出来，不求多大全；然后可以做的有特点一些，给面试官留下比较深的印象。</p>
<p>招聘的流程一般是笔试、面试、给Offer、签约。</p>
<p>在大三快结束，4~6月份左右的样子，很多公司会有实习招聘。你可以面试进入公司实习。如果你有很想去的公司，你可以申请那个公司的实习；实习稍微努力一点，一般后来就能进去公司正式工作，这样难度会降低一些。</p>
<p>在大四开学，大概9~10月份时，是公司正式校招最火爆的时间。另外来年春季也会有一些公司招聘，不过公司之间竞争力激烈，知名的公司往往校招时间也比较早。华为今年7月份就开始了第一批次的正式校招，9月初就出来结果了。阿里、百度等公司在暑假有提前批次，如果有公司的员工邀请，你可以参加提前批的招聘。</p>
<p>招聘一般先笔试，如果是提前批次，可能不用笔试。在笔试之前，你应该在公司校招网站注册，并投递简历，这样笔试时间地点就会通知你。如果你没有注册，不少公司也可以“罢笔”，直接“强行”参加考试，一般笔试会现场交纸质简历，可以提前准备好。</p>
<p>笔试根据你投的岗位考试，有的岗位不用笔试。至于笔试具体内容，请自行百度，网上很多，例如你可以搜索“阿里校招笔试题”。大部分笔试都是现场发试卷考，一般在西安市区的西工大、交大比较多，阿里是在线笔试，有人好奇在线笔试会不会作弊，这个确实是靠个人自觉了。如果什么都不会的人作弊通过了笔试，面试也一样会被刷下来。</p>
<p>笔试通过了就会通知参加面试。面试常常分两种，技术类和非技术类。技术类要求的主要是技术，对个人形象一般没有太多要求，所以没必要特地搞个西装革履。非技术类尤其是市场营销什么的，最好还是注意下个人形象吧。技术类一般是单面，一个面试官面试一个人。非技术类往往第一轮会有群面，因为对个人的交流能力有要求，群面能一定程度上考察这种能力。</p>
<p>面试技巧我也不多说，问的哪些问题网上很多，自己找找就好了。感觉是技术类有项目经验会很有优势，没有项目经验的话，把技术相关的课程基础学的比较扎实，或者有别的一些能体现你学习能力等的优势，比如学习成绩很好拿过国家奖，也是可以的（当然公司更倾向于项目经验丰富，入职直接能做东西的人，但是这样的人毕竟少一些）。</p>
<p>技术岗位，常见的面试一般会有三轮，一面二面是技术面，三面HR面，面试完了会让等通知。如果通过了就会通知后续签约等事宜。</p>
<p>通常面试通过了，公司会给短信等通知，也就是所谓的Offer，意味着你可以进去那个公司。和高考不一样，你可以同时拿多个公司的Offer，然后对比选择最想去的一个。甚至你还可以用Offer去和公司谈条件，当然这个视情况而定，不同公司不同情况各不相同。如果你确实很强，公司之间也会竞争，向你给出最好的条件待遇。</p>
<p>Offer拿到之后，过一段时间公司就会通知你去和他们签约。签约一是和公司签Offer，即劳动合同，有的公司可能没有这个。这里面会有薪资待遇、工作年限等信息，并且规定了违约相关处理。你可以和一个公司签了Offer然后决定换另一个公司，但是违约了要交一定的违约金，另外对个人信誉影响不太好，所以要慎重一点。</p>
<p>还有一个要签的是三方协议，三方即学生、公司和学校。三方协议的签约可以参考后面给你出的链接。</p>
<p>三方协议签完，大四一年基本没课可上，恩，真是个愉快、自由、轻松的一年，就等着拿到学位证，开开心心去京城上班了o(╯□╰)o。升职加薪，成为高富帅，当上总经理，出任CEO，迎娶白富美，迈向人生巅峰……想想还有点小激动那……哎，别做梦了，还不知道哪一年的事……</p>
]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[一个简单实用的android项目架构方案]]></title>
      <url>http://yoursite.com/2015/11/18/android%20%E9%A1%B9%E7%9B%AE%E6%90%AD%E5%BB%BA/</url>
      <content type="html"><![CDATA[<p><img src="/assets/blogImg/Android_Structure.jpg" alt="架构图"></p>
<h3 id="项目搭建"><a href="#项目搭建" class="headerlink" title="项目搭建"></a>项目搭建</h3><p><a href="http://keeganlee.me/post/android/20150629" target="_blank" rel="external">原帖</a></p>
<h4 id="准备工作建立module并设置依赖关系"><a href="#准备工作建立module并设置依赖关系" class="headerlink" title="准备工作建立module并设置依赖关系"></a><code>准备工作</code>建立module并设置依赖关系</h4><p><strong>model为模型层，api为接口层，core为核心层，app为界面层。</strong></p>
<ul>
<li>四个模块之间的依赖设置为：model没有任何依赖，接口层依赖了模型层，核心层依赖了模型层和接口层，界面层依赖了核心层和模型层。<br>然后建立模块之间的依赖关系<br><img src="/assets/blogImg/dependencies.jpeg" alt="建立module"></li>
</ul>
<h5 id="第一步业务对象模型model"><a href="#第一步业务对象模型model" class="headerlink" title="第一步业务对象模型model"></a><code>第一步</code>业务对象模型model</h5><ul>
<li>封装业务逻辑，大部分都是从接口中传来的对象<br>简单的bean,此处为CouponBO</li>
</ul>
<h5 id="第二步接口层封装api"><a href="#第二步接口层封装api" class="headerlink" title="第二步接口层封装api"></a><code>第二步</code>接口层封装api</h5><ul>
<li>设计一种json返回的固定结构，如：</li>
</ul>
<figure class="highlight"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">&#123;"event": "0", "msg": "success"&#125;</div><div class="line">&#123;"event": "0", "msg": "success", "obj":&#123;...&#125;&#125;</div><div class="line">&#123;"event": "0", "msg": "success", "objList":[&#123;...&#125;, &#123;...&#125;], "currentPage": 1, "pageSize": 20, "maxCount": 2, "maxPage": 1&#125;</div></pre></td></tr></table></figure>
<ul>
<li>封装为实体类<br><em>注意变量名需要和json的键名保持一致以方便解析</em></li>
</ul>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ApiResponse</span>&lt;<span class="title">T</span>&gt; </span>&#123;</div><div class="line">    <span class="keyword">private</span> String event;    <span class="comment">// 返回码，0为成功</span></div><div class="line">    <span class="keyword">private</span> String msg;      <span class="comment">// 返回信息</span></div><div class="line">    <span class="keyword">private</span> T obj;           <span class="comment">// 单个对象</span></div><div class="line">    <span class="keyword">private</span> T objList;       <span class="comment">// 数组对象</span></div><div class="line">    <span class="keyword">private</span> <span class="keyword">int</span> currentPage; <span class="comment">// 当前页数</span></div><div class="line">    <span class="keyword">private</span> <span class="keyword">int</span> pageSize;    <span class="comment">// 每页显示数量</span></div><div class="line">    <span class="keyword">private</span> <span class="keyword">int</span> maxCount;    <span class="comment">// 总条数</span></div><div class="line">    <span class="keyword">private</span> <span class="keyword">int</span> maxPage;     <span class="comment">// 总页数</span></div><div class="line">    <span class="comment">// 构造函数，初始化code和msg</span></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="title">ApiResponse</span><span class="params">(String event, String msg)</span> </span>&#123;</div><div class="line">        <span class="keyword">this</span>.event = event;</div><div class="line">        <span class="keyword">this</span>.msg = msg;</div><div class="line">    &#125;</div><div class="line">    <span class="comment">// 判断结果是否成功</span></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">isSuccess</span><span class="params">()</span> </span>&#123;</div><div class="line">        <span class="keyword">return</span> event.equals(<span class="string">"0"</span>);</div><div class="line">    &#125;</div><div class="line">    <span class="comment">// TODO 所有属性的getter和setter</span></div><div class="line">&#125;</div></pre></td></tr></table></figure>
<ul>
<li>对应的请求接口,如下：</li>
</ul>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">Api</span> </span>&#123;</div><div class="line">    <span class="comment">// 发送验证码</span></div><div class="line">    <span class="keyword">public</span> <span class="keyword">final</span> <span class="keyword">static</span> String SEND_SMS_CODE = <span class="string">"service.sendSmsCode4Register"</span>;</div><div class="line">    <span class="comment">// 注册</span></div><div class="line">    <span class="keyword">public</span> <span class="keyword">final</span> <span class="keyword">static</span> String REGISTER = <span class="string">"customer.registerByPhone"</span>;</div><div class="line">    <span class="comment">// 登录</span></div><div class="line">    <span class="keyword">public</span> <span class="keyword">final</span> <span class="keyword">static</span> String LOGIN = <span class="string">"customer.loginByApp"</span>;</div><div class="line">    <span class="comment">// 券列表</span></div><div class="line">    <span class="keyword">public</span> <span class="keyword">final</span> <span class="keyword">static</span> String LIST_COUPON = <span class="string">"issue.listNewCoupon"</span>;</div><div class="line"></div><div class="line">    <span class="comment">/**</span></div><div class="line">     * 发送验证码  --传入的T为Void</div><div class="line">     * <span class="doctag">@param</span> phoneNum 手机号码</div><div class="line">     * <span class="doctag">@return</span> 成功时返回：&#123; "event": "0", "msg":"success" &#125;</div><div class="line">     */</div><div class="line">    <span class="function"><span class="keyword">public</span> ApiResponse&lt;Void&gt; <span class="title">sendSmsCode4Register</span><span class="params">(String phoneNum)</span></span>;</div><div class="line"></div><div class="line">    <span class="comment">/**</span></div><div class="line">     * 注册</div><div class="line">     * <span class="doctag">@param</span> phoneNum 手机号码</div><div class="line">     * <span class="doctag">@param</span> code     验证码</div><div class="line">     * <span class="doctag">@param</span> password MD5加密的密码</div><div class="line">     * <span class="doctag">@return</span> 成功时返回：&#123; "event": "0", "msg":"success" &#125;</div><div class="line">     */</div><div class="line">    <span class="function"><span class="keyword">public</span> ApiResponse&lt;Void&gt; <span class="title">registerByPhone</span><span class="params">(String phoneNum, String code, String password)</span></span>;</div><div class="line"></div><div class="line">    <span class="comment">/**</span></div><div class="line">     * 登录</div><div class="line">     * <span class="doctag">@param</span> loginName 登录名（手机号）</div><div class="line">     * <span class="doctag">@param</span> password  MD5加密的密码</div><div class="line">     * <span class="doctag">@param</span> imei      手机IMEI串号</div><div class="line">     * <span class="doctag">@param</span> loginOS   Android为1</div><div class="line">     * <span class="doctag">@return</span> 成功时返回：&#123; "event": "0", "msg":"success" &#125;</div><div class="line">     */</div><div class="line">    <span class="function"><span class="keyword">public</span> ApiResponse&lt;Void&gt; <span class="title">loginByApp</span><span class="params">(String loginName, String password, String imei, <span class="keyword">int</span> loginOS)</span></span>;</div><div class="line"></div><div class="line">    <span class="comment">/**</span></div><div class="line">     * 券列表  --传入的T为List&lt;CouponBO&gt;</div><div class="line">     * <span class="doctag">@param</span> currentPage 当前页数</div><div class="line">     * <span class="doctag">@param</span> pageSize    每页显示数量</div><div class="line">     * <span class="doctag">@return</span> 成功时返回：&#123; "event": "0", "msg":"success", "objList":[...] &#125;</div><div class="line">     */</div><div class="line">    <span class="keyword">public</span> ApiResponse&lt;List&lt;CouponBO&gt;&gt; listNewCoupon(<span class="keyword">int</span> currentPage, <span class="keyword">int</span> pageSize);</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<ul>
<li>然后就是api的具体实现方法ApiImpl</li>
</ul>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line"><span class="comment">//传入参数进行网络请求相关的内容</span></div><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ApiImpl</span> <span class="keyword">implements</span> <span class="title">Api</span> </span>&#123; ... &#125;</div></pre></td></tr></table></figure>
<p>——此处还可把网络请求相关的内容放入另一个类中，如原作者写的HttpEngine类</p>
<blockquote>
<p>设计思想：<br>1.网络请求作为一个单例来使用<br>2.抽取出请求的编码，等待超时时间，请求地址等一些常量</p>
</blockquote>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div><div class="line">61</div><div class="line">62</div><div class="line">63</div><div class="line">64</div><div class="line">65</div><div class="line">66</div><div class="line">67</div><div class="line">68</div><div class="line">69</div><div class="line">70</div><div class="line">71</div><div class="line">72</div><div class="line">73</div><div class="line">74</div><div class="line">75</div><div class="line">76</div><div class="line">77</div><div class="line">78</div><div class="line">79</div><div class="line">80</div><div class="line">81</div><div class="line">82</div><div class="line">83</div><div class="line">84</div><div class="line">85</div><div class="line">86</div><div class="line">87</div><div class="line">88</div><div class="line">89</div><div class="line">90</div><div class="line">91</div><div class="line">92</div><div class="line">93</div><div class="line">94</div><div class="line">95</div><div class="line">96</div><div class="line">97</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">HttpEngine</span> </span>&#123;</div><div class="line">    <span class="keyword">private</span> <span class="keyword">final</span> <span class="keyword">static</span> String SERVER_URL = <span class="string">"http://uat.b.quancome.com/platform/api"</span>;</div><div class="line">    <span class="keyword">private</span> <span class="keyword">final</span> <span class="keyword">static</span> String REQUEST_MOTHOD = <span class="string">"POST"</span>;</div><div class="line">    <span class="keyword">private</span> <span class="keyword">final</span> <span class="keyword">static</span> String ENCODE_TYPE = <span class="string">"UTF-8"</span>;</div><div class="line">    <span class="keyword">private</span> <span class="keyword">final</span> <span class="keyword">static</span> <span class="keyword">int</span> TIME_OUT = <span class="number">15000</span>;</div><div class="line"></div><div class="line">    <span class="keyword">private</span> <span class="keyword">static</span> HttpEngine instance = <span class="keyword">null</span>;</div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">private</span> <span class="title">HttpEngine</span><span class="params">()</span> </span>&#123;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> HttpEngine <span class="title">getInstance</span><span class="params">()</span> </span>&#123;</div><div class="line">        <span class="keyword">if</span> (instance == <span class="keyword">null</span>) &#123;</div><div class="line">            instance = <span class="keyword">new</span> HttpEngine();</div><div class="line">        &#125;</div><div class="line">        <span class="keyword">return</span> instance;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="keyword">public</span> &lt;T&gt; <span class="function">T <span class="title">postHandle</span><span class="params">(Map&lt;String, String&gt; paramsMap, Type typeOfT)</span> <span class="keyword">throws</span> IOException </span>&#123;</div><div class="line">        String data = joinParams(paramsMap);</div><div class="line">        HttpUrlConnection connection = getConnection();</div><div class="line">        connection.setRequestProperty(<span class="string">"Content-Length"</span>, String.valueOf(data.getBytes().length));</div><div class="line">        connection.connect();</div><div class="line">        OutputStream os = connection.getOutputStream();</div><div class="line">        os.write(data.getBytes());</div><div class="line">        os.flush();</div><div class="line">        <span class="keyword">if</span> (connection.getResponseCode() == <span class="number">200</span>) &#123;</div><div class="line">            <span class="comment">// 获取响应的输入流对象</span></div><div class="line">            InputStream is = connection.getInputStream();</div><div class="line">            <span class="comment">// 创建字节输出流对象</span></div><div class="line">            ByteArrayOutputStream baos = <span class="keyword">new</span> ByteArrayOutputStream();</div><div class="line">            <span class="comment">// 定义读取的长度</span></div><div class="line">            <span class="keyword">int</span> len = <span class="number">0</span>;</div><div class="line">            <span class="comment">// 定义缓冲区</span></div><div class="line">            <span class="keyword">byte</span> buffer[] = <span class="keyword">new</span> <span class="keyword">byte</span>[<span class="number">1024</span>];</div><div class="line">            <span class="comment">// 按照缓冲区的大小，循环读取</span></div><div class="line">            <span class="keyword">while</span> ((len = is.read(buffer)) != -<span class="number">1</span>) &#123;</div><div class="line">                <span class="comment">// 根据读取的长度写入到os对象中</span></div><div class="line">                baos.write(buffer, <span class="number">0</span>, len);</div><div class="line">            &#125;</div><div class="line">            <span class="comment">// 释放资源</span></div><div class="line">            is.close();</div><div class="line">            baos.close();</div><div class="line">            connection.disconnect();</div><div class="line">            <span class="comment">// 返回字符串</span></div><div class="line">            <span class="keyword">final</span> String result = <span class="keyword">new</span> String(baos.toByteArray());</div><div class="line">            Gson gson = <span class="keyword">new</span> Gson();</div><div class="line">            <span class="keyword">return</span> gson.fromJson(result, typeOfT);</div><div class="line">        &#125; <span class="keyword">else</span> &#123;</div><div class="line">            connection.disconnect();</div><div class="line">            <span class="keyword">return</span> <span class="keyword">null</span>;</div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">private</span> HttpURLConnection <span class="title">getConnection</span><span class="params">()</span> </span>&#123;</div><div class="line">        HttpURLConnection connection = <span class="keyword">null</span>;</div><div class="line">        <span class="comment">// 初始化connection</span></div><div class="line">        <span class="keyword">try</span> &#123;</div><div class="line">            <span class="comment">// 根据地址创建URL对象</span></div><div class="line">            URL url = <span class="keyword">new</span> URL(SERVER_URL);</div><div class="line">            <span class="comment">// 根据URL对象打开链接</span></div><div class="line">            connection = (HttpURLConnection) url.openConnection();</div><div class="line">            <span class="comment">// 设置请求的方式</span></div><div class="line">            connection.setRequestMethod(REQUEST_MOTHOD);</div><div class="line">            <span class="comment">// 发送POST请求必须设置允许输入，默认为true</span></div><div class="line">            connection.setDoInput(<span class="keyword">true</span>);</div><div class="line">            <span class="comment">// 发送POST请求必须设置允许输出</span></div><div class="line">            connection.setDoOutput(<span class="keyword">true</span>);</div><div class="line">            <span class="comment">// 设置不使用缓存</span></div><div class="line">            connection.setUseCaches(<span class="keyword">false</span>);</div><div class="line">            <span class="comment">// 设置请求的超时时间</span></div><div class="line">            connection.setReadTimeout(TIME_OUT);</div><div class="line">            connection.setConnectTimeout(TIME_OUT);</div><div class="line">            connection.setRequestProperty(<span class="string">"Content-Type"</span>, <span class="string">"application/x-www-form-urlencoded"</span>);</div><div class="line">            connection.setRequestProperty(<span class="string">"Connection"</span>, <span class="string">"keep-alive"</span>);</div><div class="line">            connection.setRequestProperty(<span class="string">"Response-Type"</span>, <span class="string">"json"</span>);</div><div class="line">            connection.setChunkedStreamingMode(<span class="number">0</span>);</div><div class="line">        &#125; <span class="keyword">catch</span> (IOException e) &#123;</div><div class="line">            e.printStackTrace();</div><div class="line">        &#125;</div><div class="line">        <span class="keyword">return</span> connection;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">private</span> String <span class="title">joinParams</span><span class="params">(Map&lt;String, String&gt; paramsMap)</span> </span>&#123;</div><div class="line">        StringBuilder stringBuilder = <span class="keyword">new</span> StringBuilder();</div><div class="line">        <span class="keyword">for</span> (String key : paramsMap.keySet()) &#123;</div><div class="line">            stringBuilder.append(key);</div><div class="line">            stringBuilder.append(<span class="string">"="</span>);</div><div class="line">            <span class="keyword">try</span> &#123;          stringBuilder.append(URLEncoder.encode(paramsMap.get(key), ENCODE_TYPE));</div><div class="line">            &#125; <span class="keyword">catch</span> (UnsupportedEncodingException e) &#123;</div><div class="line">                e.printStackTrace();</div><div class="line">            &#125;</div><div class="line">            stringBuilder.append(<span class="string">"&amp;"</span>);</div><div class="line">        &#125;</div><div class="line">        <span class="keyword">return</span> stringBuilder.substring(<span class="number">0</span>, stringBuilder.length() - <span class="number">1</span>);</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p><code>第三步</code>核心层逻辑</p>
<blockquote>
<p><code>核心层处于接口层和界面层之间，向下调用Api，向上提供Action，它的核心任务就是处理复杂的业务逻辑</code></p>
</blockquote>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">AppAction</span> </span>&#123;</div><div class="line">    <span class="comment">// 发送手机验证码</span></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">sendSmsCode</span><span class="params">(String phoneNum, ActionCallbackListener&lt;Void&gt; listener)</span></span>;</div><div class="line">    <span class="comment">// 注册</span></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">register</span><span class="params">(String phoneNum, String code, String password, ActionCallbackListener&lt;Void&gt; listener)</span></span>;</div><div class="line">    <span class="comment">// 登录</span></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">login</span><span class="params">(String loginName, String password, ActionCallbackListener&lt;Void&gt; listener)</span></span>;</div><div class="line">    <span class="comment">// 按分页获取券列表</span></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">listCoupon</span><span class="params">(<span class="keyword">int</span> currentPage, ActionCallbackListener&lt;List&lt;CouponBO&gt;&gt; listener)</span></span>;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>然后再去实现这些请求逻辑</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">AppActionImpl</span> <span class="keyword">implements</span> <span class="title">AppAction</span> </span>&#123; ... &#125;</div></pre></td></tr></table></figure>
<p>像<code>参数为空，参数合法化</code> 的这些检查都可放在此处检查，减少app模块逻辑里面不必要的混乱</p>
<blockquote>
<p><code>将参数为空的检查、手机号有效性的检查、数字型范围的检查等等，都可以抽成独立的方法，从而减少重复代码的编写。异步任务里的代码也一样，都是可以通过重构优化的。另外，需要扩展时，比如添加缓存，那就在调用Api之前处理。</code></p>
</blockquote>
<p><code>第四步</code> 界面层app</p>
<ul>
<li>界面层需要调用核心层的Action，而这会在整个应用级别都用到，因此，Action的实例最好放在Application里</li>
<li>一个Activity的基类</li>
<li><p>一个抽象的适配器基类</p>
</li>
<li><ul>
<li><ul>
<li>完</li>
</ul>
</li>
</ul>
</li>
</ul>
]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[android Path工具学习]]></title>
      <url>http://yoursite.com/2015/11/18/android%20Path%E5%B7%A5%E5%85%B7%E5%AD%A6%E4%B9%A0/</url>
      <content type="html"><![CDATA[<p>###android Path工具学习</p>
<ul>
<li><strong>setShader(Shader shader)</strong>设置图像效果，使用Shader可以绘制出各种渐变效果</li>
<li><strong>setShaderLayer(float radius,float dx,float dy,int color)</strong> 在图形下面设置阴影层，产生阴影效果，radius为阴影的角度，dx和dy为阴影在x轴和y轴上的距离，color为阴影的颜色<a id="more"></a>  </li>
<li><strong>setSrokeJoin(Paint.Join join);</strong>  设置绘制时各图形的结合方式，如平滑效果等  </li>
<li><strong>setXfermode(Xfermode xfermode);</strong>  设置图形重叠时的处理方式，如合并，取交集或并集，经常用来制作橡皮的擦除效果</li>
<li><strong>quadTo(float x1, float y1, float x2, float y2);</strong>画线时形成平滑的曲线<em>贝塞尔曲线</em>，x1,y1为控制点的坐标，x2,y2为终点的坐标值</li>
<li><strong>lineTo(float x, float y);</strong>直线连接两点</li>
<li><strong>reset()</strong>重置绘制路线，即隐藏之前绘制的轨迹<br>####其他</li>
<li><strong>View中的isInEditMode()方法</strong>  当视图在绘制时，即处于编辑状态，返回true</li>
<li><strong>drawArc(RectF oval, float startAngle, float sweepAngle, boolean useCenter,Paint paint)</strong> 绘制圆弧，oval为圆弧的外轮廓矩形区域，startAngle起始角度，sweepAngle  圆弧扫过的角度，userCenter为真绘制饼图</li>
</ul>
]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[我的Android学习笔记1]]></title>
      <url>http://yoursite.com/2015/11/18/android%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/</url>
      <content type="html"><![CDATA[<h3 id="java学习日记-小知识杂记"><a href="#java学习日记-小知识杂记" class="headerlink" title="java学习日记(小知识杂记)"></a>java学习日记(小知识杂记)</h3><h4 id="1-代码可读性"><a href="#1-代码可读性" class="headerlink" title="1.代码可读性"></a>1.代码可读性</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">scene.fight(hero,enemy,kongfu,FIST);</div></pre></td></tr></table></figure>
<a id="more"></a>  
<p>改为</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">hero.fight(enemy).with(kongfu).by(FIST);</div></pre></td></tr></table></figure>
<h4 id="2-不想被重载的方法加上final修饰"><a href="#2-不想被重载的方法加上final修饰" class="headerlink" title="2.不想被重载的方法加上final修饰"></a>2.不想被重载的方法加上final修饰</h4><h4 id="3-Thread的run-方法陷阱"><a href="#3-Thread的run-方法陷阱" class="headerlink" title="3.Thread的run()方法陷阱"></a>3.Thread的run()方法陷阱</h4><p>启动线程应该使用thread.start()方法，若写成thread.run()则和一个普通的对象调用一次内部写的run()方法没有区别，而不会启动一个线程</p>
<h4 id="4-减少判断次数"><a href="#4-减少判断次数" class="headerlink" title="4.减少判断次数"></a>4.减少判断次数</h4><p>判断一个List是否为空时，我们通常会这样判断</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">if</span>(list.size() &gt; <span class="number">0</span>) <span class="keyword">return</span> <span class="keyword">true</span>;</div><div class="line"><span class="keyword">else</span> <span class="keyword">return</span> <span class="keyword">false</span>;</div></pre></td></tr></table></figure>
<p>它可以直接写为</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">return</span> list.size() &gt; <span class="number">0</span>;</div></pre></td></tr></table></figure>
<p>再如</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">if</span>(list != <span class="keyword">null</span>)&#123;<span class="keyword">for</span>( ... )&#123; ... &#125;&#125;</div></pre></td></tr></table></figure>
<p>则可改为</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">if</span>(list == <span class="keyword">null</span>) <span class="keyword">return</span>;</div><div class="line"><span class="keyword">for</span>( ... )&#123; ... &#125;</div></pre></td></tr></table></figure>
<h4 id="5-向上转型后使用的是父类的变量，和继承的方法有所区别"><a href="#5-向上转型后使用的是父类的变量，和继承的方法有所区别" class="headerlink" title="5.向上转型后使用的是父类的变量，和继承的方法有所区别"></a>5.向上转型后使用的是父类的变量，和继承的方法有所区别</h4><h4 id="6-数据库操作"><a href="#6-数据库操作" class="headerlink" title="6.数据库操作"></a>6.数据库操作</h4><h5 id="a-选择表table1中的第20到30条数据"><a href="#a-选择表table1中的第20到30条数据" class="headerlink" title="a.选择表table1中的第20到30条数据"></a>a.选择表table1中的第20到30条数据</h5><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">select * form table1 limit 19,11</div></pre></td></tr></table></figure>
<h5 id="b-没有数据进行更新，使用insert会报错。可使用replace"><a href="#b-没有数据进行更新，使用insert会报错。可使用replace" class="headerlink" title="b.没有数据进行更新，使用insert会报错。可使用replace"></a>b.没有数据进行更新，使用insert会报错。可使用replace</h5><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">replace into table1(id,name) value (1,&quot;bill&quot;);</div></pre></td></tr></table></figure>
<h4 id="7-持有Context导致的内存泄漏问题"><a href="#7-持有Context导致的内存泄漏问题" class="headerlink" title="7.持有Context导致的内存泄漏问题"></a>7.持有Context导致的内存泄漏问题</h4><p><code>如果一个对象持有的Context(比如Activity)的生命周期比这个对象的短，则会引起内存泄漏</code><br><a href="http://droidyue.com/blog/2015/04/12/avoid-memory-leaks-on-context-in-android/" target="_blank" rel="external">点击此处查看相关博客</a><br><a href="http://droidyue.com/blog/2015/01/11/looking-into-singleton/" target="_blank" rel="external">单例模式详解</a></p>
<blockquote>
<ul>
<li>饿汉式</li>
<li>懒汉式</li>
<li>synchronized保证唯一性 （会导致性能下降）</li>
<li>static机制</li>
</ul>
</blockquote>
<ul>
<li>应该尽量使用ApplicationContext,但对于UI控件，它的Context必须是Activity (Toast除外)</li>
</ul>
<h4 id="8-ViewPager实现平滑滚动"><a href="#8-ViewPager实现平滑滚动" class="headerlink" title="8.ViewPager实现平滑滚动"></a>8.ViewPager实现平滑滚动</h4><blockquote>
<p>需要通过反射的方式，把Scroller自定义</p>
<ul>
<li>用法</li>
</ul>
</blockquote>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">ViewPagerScroller viewPagerScroller = <span class="keyword">new</span> ViewPagerScroller(<span class="keyword">this</span>,<span class="keyword">new</span> DecelerateInterpolator(),<span class="keyword">true</span>);</div><div class="line">        viewPagerScroller.setScrollDuration(<span class="number">400</span>);</div><div class="line">        viewPagerScroller.initViewPagerScroll(mainPager);<span class="comment">//这个是设置切换过渡时间</span></div></pre></td></tr></table></figure>
<ul>
<li>实现代码</li>
</ul>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div></pre></td><td class="code"><pre><div class="line"><span class="comment">/**</span></div><div class="line">     * ViewPager 滚动速度设置</div><div class="line">     *</div><div class="line">     */</div><div class="line">    <span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ViewPagerScroller</span> <span class="keyword">extends</span> <span class="title">Scroller</span> </span>&#123;</div><div class="line">        <span class="keyword">private</span> <span class="keyword">int</span> mScrollDuration = <span class="number">2000</span>;             <span class="comment">// 滑动速度</span></div><div class="line"></div><div class="line">        <span class="comment">/**</span></div><div class="line">         * 设置速度速度</div><div class="line">         * <span class="doctag">@param</span> duration</div><div class="line">         */</div><div class="line">        <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setScrollDuration</span><span class="params">(<span class="keyword">int</span> duration)</span></span>&#123;</div><div class="line">            <span class="keyword">this</span>.mScrollDuration = duration;</div><div class="line">        &#125;</div><div class="line"></div><div class="line">        <span class="function"><span class="keyword">public</span> <span class="title">ViewPagerScroller</span><span class="params">(Context context)</span> </span>&#123;</div><div class="line">            <span class="keyword">super</span>(context);</div><div class="line">        &#125;</div><div class="line"></div><div class="line">        <span class="function"><span class="keyword">public</span> <span class="title">ViewPagerScroller</span><span class="params">(Context context, Interpolator interpolator)</span> </span>&#123;</div><div class="line">            <span class="keyword">super</span>(context, interpolator);</div><div class="line">        &#125;</div><div class="line"></div><div class="line">        <span class="function"><span class="keyword">public</span> <span class="title">ViewPagerScroller</span><span class="params">(Context context, Interpolator interpolator, <span class="keyword">boolean</span> flywheel)</span> </span>&#123;</div><div class="line">            <span class="keyword">super</span>(context, interpolator, flywheel);</div><div class="line">        &#125;</div><div class="line"></div><div class="line">        <span class="meta">@Override</span></div><div class="line">        <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">startScroll</span><span class="params">(<span class="keyword">int</span> startX, <span class="keyword">int</span> startY, <span class="keyword">int</span> dx, <span class="keyword">int</span> dy, <span class="keyword">int</span> duration)</span> </span>&#123;</div><div class="line">            <span class="keyword">super</span>.startScroll(startX, startY, dx, dy, mScrollDuration);</div><div class="line">        &#125;</div><div class="line"></div><div class="line">        <span class="meta">@Override</span></div><div class="line">        <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">startScroll</span><span class="params">(<span class="keyword">int</span> startX, <span class="keyword">int</span> startY, <span class="keyword">int</span> dx, <span class="keyword">int</span> dy)</span> </span>&#123;</div><div class="line">            <span class="keyword">super</span>.startScroll(startX, startY, dx, dy, mScrollDuration);</div><div class="line">        &#125;</div><div class="line"></div><div class="line">        <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">initViewPagerScroll</span><span class="params">(ViewPager viewPager)</span> </span>&#123;</div><div class="line">            <span class="keyword">try</span> &#123;</div><div class="line">                Field mScroller = ViewPager.class.getDeclaredField(<span class="string">"mScroller"</span>);</div><div class="line">                mScroller.setAccessible(<span class="keyword">true</span>);</div><div class="line">                mScroller.set(viewPager, <span class="keyword">this</span>);</div><div class="line">            &#125; <span class="keyword">catch</span>(Exception e) &#123;</div><div class="line">                e.printStackTrace();</div><div class="line">            &#125;</div><div class="line">        &#125;</div><div class="line">    &#125;</div></pre></td></tr></table></figure>
<h4 id="9-android-4-4-实现沉浸式状态栏"><a href="#9-android-4-4-实现沉浸式状态栏" class="headerlink" title="9. android 4.4 实现沉浸式状态栏"></a>9. android 4.4 实现沉浸式状态栏</h4><ul>
<li><strong>1.xml style文件</strong>—–style.xml(v-19)</li>
</ul>
<figure class="highlight xml"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div></pre></td><td class="code"><pre><div class="line"><span class="tag">&lt;<span class="name">style</span> <span class="attr">name</span>=<span class="string">"AppTheme"</span> <span class="attr">parent</span>=<span class="string">"Theme.AppCompat.Light.NoActionBar"</span>&gt;</span><span class="xml"></span></div><div class="line">                <span class="tag">&lt;<span class="name">item</span> <span class="attr">name</span>=<span class="string">"android:windowActionBar"</span>&gt;</span>false<span class="tag">&lt;/<span class="name">item</span>&gt;</span></div><div class="line">                <span class="tag">&lt;<span class="name">item</span> <span class="attr">name</span>=<span class="string">"android:windowNoTitle"</span>&gt;</span>true<span class="tag">&lt;/<span class="name">item</span>&gt;</span></div><div class="line">                <span class="tag">&lt;<span class="name">item</span> <span class="attr">name</span>=<span class="string">"colorPrimary"</span>&gt;</span>#3498db<span class="tag">&lt;/<span class="name">item</span>&gt;</span></div><div class="line">                <span class="tag">&lt;<span class="name">item</span> <span class="attr">name</span>=<span class="string">"colorPrimaryDark"</span>&gt;</span>#3498db<span class="tag">&lt;/<span class="name">item</span>&gt;</span></div><div class="line">                <span class="tag">&lt;<span class="name">item</span> <span class="attr">name</span>=<span class="string">"colorAccent"</span>&gt;</span>#3498db<span class="tag">&lt;/<span class="name">item</span>&gt;</span></div><div class="line">                <span class="tag">&lt;<span class="name">item</span> <span class="attr">name</span>=<span class="string">"android:textColorPrimary"</span>&gt;</span>#eeeeee<span class="tag">&lt;/<span class="name">item</span>&gt;</span></div><div class="line">                <span class="tag">&lt;<span class="name">item</span> <span class="attr">name</span>=<span class="string">"android:windowIsTranslucent"</span>&gt;</span>true<span class="tag">&lt;/<span class="name">item</span>&gt;</span></div><div class="line">                <span class="tag">&lt;<span class="name">item</span> <span class="attr">name</span>=<span class="string">"android:windowTranslucentNavigation"</span>&gt;</span>true<span class="tag">&lt;/<span class="name">item</span>&gt;</span></div><div class="line">                <span class="tag">&lt;<span class="name">item</span> <span class="attr">name</span>=<span class="string">"android:windowTranslucentStatus"</span>&gt;</span>true<span class="tag">&lt;/<span class="name">item</span>&gt;</span></div><div class="line">                <span class="tag">&lt;<span class="name">item</span> <span class="attr">name</span>=<span class="string">"android:windowContentOverlay"</span>&gt;</span>@null<span class="tag">&lt;/<span class="name">item</span>&gt;</span></div><div class="line">        <span class="tag">&lt;/<span class="name">style</span>&gt;</span></div></pre></td></tr></table></figure>
<ul>
<li>2.然后需要在布局文件根节点设置</li>
</ul>
<figure class="highlight xml"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">android:fitsSystemWindows="true"</div></pre></td></tr></table></figure>
<ul>
<li>3.导入开源库</li>
</ul>
<figure class="highlight gradle"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">compile</span> <span class="string">'com.readystatesoftware.systembartint:systembartint:1.0.3'</span></div></pre></td></tr></table></figure>
<ul>
<li>4.在MainActivity的onCreate方法中设置</li>
</ul>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div></pre></td><td class="code"><pre><div class="line">applyKitKatTranslucency();</div><div class="line"><span class="comment">/**</span></div><div class="line">     * Apply KitKat specific translucency.</div><div class="line">     */</div><div class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">applyKitKatTranslucency</span><span class="params">()</span> </span>&#123;</div><div class="line">        <span class="comment">// KitKat translucent navigation/status bar.</span></div><div class="line">        <span class="keyword">if</span> (Build.VERSION.SDK_INT &gt;= Build.VERSION_CODES.KITKAT) &#123;</div><div class="line">            setTranslucentStatus(<span class="keyword">true</span>); <span class="comment">//设置透明状态栏</span></div><div class="line">            SystemBarTintManager mTintManager = <span class="keyword">new</span> SystemBarTintManager(<span class="keyword">this</span>);</div><div class="line">            mTintManager.setStatusBarTintEnabled(<span class="keyword">true</span>);</div><div class="line">            mTintManager.setNavigationBarTintEnabled(<span class="keyword">true</span>);</div><div class="line">            mTintManager.setTintColor(<span class="number">0xFF3498db</span>); <span class="comment">//设置状态栏颜色</span></div><div class="line">            <span class="comment">//mTintManager.setTintDrawable(UIElementsHelper.getGeneralActionBarBackground(this));</span></div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="meta">@TargetApi</span>(<span class="number">19</span>)</div><div class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">setTranslucentStatus</span><span class="params">(<span class="keyword">boolean</span> on)</span> </span>&#123;</div><div class="line">        Window win = getWindow();</div><div class="line">        WindowManager.LayoutParams winParams = win.getAttributes();</div><div class="line">        <span class="keyword">final</span> <span class="keyword">int</span> bits = WindowManager.LayoutParams.FLAG_TRANSLUCENT_STATUS;</div><div class="line">        <span class="keyword">if</span> (on) &#123;</div><div class="line">            winParams.flags |= bits;</div><div class="line">        &#125; <span class="keyword">else</span> &#123;</div><div class="line">            winParams.flags &amp;= ~bits;</div><div class="line">        &#125;</div><div class="line">        win.setAttributes(winParams);</div><div class="line">    &#125;</div></pre></td></tr></table></figure>
<h4 id="10-可滑动tabs页"><a href="#10-可滑动tabs页" class="headerlink" title="10.可滑动tabs页"></a>10.可滑动tabs页</h4><p><strong>ViewPager + RadioGroup</strong></p>
<h4 id="11-Fragment应该在什么地方初始化"><a href="#11-Fragment应该在什么地方初始化" class="headerlink" title="11.Fragment应该在什么地方初始化"></a>11.Fragment应该在什么地方初始化</h4><p><img src="/assets/blogImg/fragment_live.png" alt="Fragment的生命周期"></p>
<blockquote>
<p>onCreateView返回Fragment 的View，所以这个方法返回的越快越好，一般耗时的事情都放在onCreateView以后,至于findViewById啥的一般放在onActivityCreated中</p>
</blockquote>
<h4 id="12-Fragment和v4包中的Fragment的区别"><a href="#12-Fragment和v4包中的Fragment的区别" class="headerlink" title="12.Fragment和v4包中的Fragment的区别"></a>12.Fragment和v4包中的Fragment的区别</h4><ul>
<li>Fragment支持3.0之后的版本，android.support.v4.app.Fragment可兼容到1.6</li>
<li>当v4.fragment使用<fragment>标签的时，当这个Activity的布局中有<fragment>标签的时候，这个Activity必须继承FragmentActivity</fragment></fragment></li>
<li>如果要使用FragmentManager，必须使用getSupportFragmentManager()</li>
<li>对于使用<fragment>标签的，sdk版本在14以上的要用getFragmentManager(),而在14一下的可以用getSupportFragmentManager()</fragment></li>
</ul>
<h4 id="13-PhotoView和ViewPager缩放溢出bug"><a href="#13-PhotoView和ViewPager缩放溢出bug" class="headerlink" title="13.PhotoView和ViewPager缩放溢出bug"></a>13.PhotoView和ViewPager缩放溢出bug</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div></pre></td><td class="code"><pre><div class="line"><span class="comment">//这个bug是android ViewPager 自己的问题，解决方案如下</span></div><div class="line"><span class="meta">@Override</span></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">onInterceptTouchEvent</span><span class="params">(MotionEvent ev)</span> </span>&#123;</div><div class="line">        <span class="keyword">try</span> &#123;</div><div class="line">            <span class="keyword">return</span> <span class="keyword">super</span>.onInterceptTouchEvent(ev);</div><div class="line">        &#125; <span class="keyword">catch</span> (Exception e) &#123;</div><div class="line">            <span class="comment">// ignore it</span></div><div class="line">        &#125;</div><div class="line">        <span class="keyword">return</span> <span class="keyword">false</span>;</div><div class="line">    &#125;</div><div class="line"></div><div class="line"></div><div class="line">    <span class="meta">@Override</span></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">onTouchEvent</span><span class="params">(MotionEvent ev)</span> </span>&#123;</div><div class="line">        <span class="keyword">try</span> &#123;</div><div class="line">            <span class="keyword">return</span> <span class="keyword">super</span>.onTouchEvent(ev);</div><div class="line">        &#125; <span class="keyword">catch</span> (IllegalArgumentException ex) &#123;</div><div class="line">            <span class="comment">// ignore it</span></div><div class="line">        &#125;</div><div class="line">        <span class="keyword">return</span> <span class="keyword">false</span>;</div><div class="line">    &#125;</div></pre></td></tr></table></figure>
<h4 id="14-Toolbar使用"><a href="#14-Toolbar使用" class="headerlink" title="14.Toolbar使用"></a>14.Toolbar使用</h4><ul>
<li>Activity需要继承自AppCompatActivity</li>
<li><p>设置显示小箭头</p>
<blockquote>
<p>setSupportActionBar(toolbar);<br>getSupportActionBar().setHomeButtonEnabled(true);       getSupportActionBar().setDisplayHomeAsUpEnabled(true);</p>
</blockquote>
</li>
<li><p>设置小箭头的事件</p>
</li>
</ul>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line">toolbar.setNavigationOnClickListener(<span class="keyword">new</span> View.OnClickListener() &#123;</div><div class="line">                <span class="meta">@Override</span></div><div class="line">                <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">onClick</span><span class="params">(View v)</span> </span>&#123;</div><div class="line">                    finish();</div><div class="line">                &#125;</div><div class="line">            &#125;);</div></pre></td></tr></table></figure>
<ul>
<li>Android-ObservableScrollView  (<strong>github上的开源库</strong>)</li>
</ul>
<h4 id="15-不用注解绑定id"><a href="#15-不用注解绑定id" class="headerlink" title="15.不用注解绑定id"></a>15.不用注解绑定id</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">private</span> SparseArray&lt;View&gt; mViews = <span class="keyword">new</span> SparseArray&lt;&gt;();</div><div class="line"></div><div class="line"><span class="keyword">public</span> &lt;T extends View&gt; <span class="function">T <span class="title">bindView</span><span class="params">(<span class="keyword">int</span> id)</span></span>&#123;</div><div class="line">        T view = (T) mViews.get(id);</div><div class="line">        <span class="keyword">if</span>(view == <span class="keyword">null</span>)&#123;</div><div class="line">            view = (T) findViewById(id);</div><div class="line">            mViews.put(id,view);</div><div class="line">        &#125;</div><div class="line">        <span class="keyword">return</span> view;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="keyword">public</span> &lt;T extends View&gt; <span class="function">T <span class="title">get</span><span class="params">(<span class="keyword">int</span> id)</span></span>&#123;</div><div class="line">        <span class="keyword">return</span> (T)bindView(id);</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setOnClickListener</span><span class="params">(View.OnClickListener listener,<span class="keyword">int</span>... ids)</span></span>&#123;</div><div class="line">        <span class="keyword">if</span>(ids == <span class="keyword">null</span>) <span class="keyword">return</span>;</div><div class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> id : ids)&#123;</div><div class="line">            get(id).setOnClickListener(listener);</div><div class="line">        &#125;</div><div class="line">    &#125;</div></pre></td></tr></table></figure>
<h4 id="16-fragment点击穿透问题"><a href="#16-fragment点击穿透问题" class="headerlink" title="16.fragment点击穿透问题"></a>16.fragment点击穿透问题</h4><ul>
<li>1.在xml fragment的包裹容器中设置 android:clickable=”true”,可能会导致其它的不可点击的情况</li>
<li>2.Fragment实现View.OnTouchListener接口，设置根部局的触摸事件，重写onTouch方法-&gt;return true;(阻止事件传递)</li>
</ul>
<h4 id="17-Android-Service及IPC通信"><a href="#17-Android-Service及IPC通信" class="headerlink" title="17. Android Service及IPC通信"></a>17. Android Service及IPC通信</h4><p>Service有两种，本地服务和远程服务，本地服务运行在同一进程中，远程服务运行在不同服务中</p>
<p>开启Service有两种方式，startService()和bindService()。<br>当Client调用startService()后，Client和Service并没有关联，其结束也要通过stopSelf()结束（或是stopService()方法）；而Client调用bindService()后，二者相互关联，它们通过Binder的代理对象进行交互，结束服务调用unBindService()断开关联即可。</p>
<p>AIDL（Android Interface Definition Language）是一种IDL语言，用于生成可在两个进程间通信的代码。AIDL面向接口，其用于约束两个进程间的通讯规则，供编译器生成代码，进程间的通信信息，首先会被转换成AIDL协议消息，然后发送给对方，对方收到AIDL协议消息后再转成相应的对象（信息经过了双向转换，代理类由编译器生成）</p>
]]></content>
    </entry>
    
  
  
</search>
